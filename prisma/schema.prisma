// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Token           Token[]
}

model Token {
  id          String    @id @default(cuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Institute {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Unit      Unit[]
}

model Unit {
  id             String           @id @default(cuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  institute      Institute        @relation(fields: [instituteId], references: [id])
  instituteId    String
  Warehouse      Warehouse[]
  ChartOfAccount ChartOfAccount[]
  PeopleCategory PeopleCategory[]
  ItemType       ItemType[]
  PriceBook      PriceBook[]
  MultipleUom    MultipleUom[]
  Prefix         Prefix[]
  Image          Image[]
  Transaction    Transaction[]
  GeneralSetting GeneralSetting?
  UnitOfMeasure  UnitOfMeasure[]

  @@unique([instituteId, name])
}

model Warehouse {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  unit        Unit          @relation(fields: [unitId], references: [id])
  unitId      String
  Transaction Transaction[]
}

model AccountClass {
  id                   String            @id @default(cuid())
  type                 BalanceSheet
  code                 String            @unique
  group                String?
  name                 String            @unique
  balanceSheetPosition Vector
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  AccountSubClass      AccountSubClass[]
}

model AccountSubClass {
  id                   String           @id @default(cuid())
  code                 String           @unique
  group                String?
  name                 String           @unique
  balanceSheetPosition Vector
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  accountClass         AccountClass     @relation(fields: [accountClassId], references: [id])
  accountClassId       String
  ChartOfAccount       ChartOfAccount[]
}

model ChartOfAccount {
  id                String              @id @default(cuid())
  code              String
  group             String?
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accountSubClass   AccountSubClass     @relation(fields: [accountSubClassId], references: [id])
  accountSubClassId String
  unit              Unit                @relation(fields: [unitId], references: [id])
  unitId            String
  TransactionDetail TransactionDetail[]
}

model GeneralSetting {
  id                String            @id @default(cuid())
  companyName       String
  recalculateMethod RecalculateMethod @default(AVG)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  unit              Unit              @relation(fields: [unitId], references: [id])
  unitId            String            @unique
}

model PeopleCategory {
  id         String   @id @default(cuid())
  code       String?
  name       String
  isCustomer Boolean
  isSupplier Boolean
  isEmployee Boolean
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  People     People[]
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
}

model People {
  id               String         @id @default(cuid())
  code             String?
  name             String
  note             String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  peopleCategory   PeopleCategory @relation(fields: [peopleCategoryId], references: [id])
  peopleCategoryId String
}

model UnitOfMeasure {
  id                String              @id @default(cuid())
  code              String?
  name              String
  note              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  unit              Unit                @relation(fields: [unitId], references: [id])
  unitId            String
  MultipleUom       MultipleUom[]
  TransactionDetail TransactionDetail[]
}

model ItemType {
  id           String         @id @default(cuid())
  name         String
  isStock      Boolean
  isSale       Boolean
  isPurchase   Boolean
  isAdjustment Boolean
  isTransfer   Boolean
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ItemCategory ItemCategory[]
  unit         Unit           @relation(fields: [unitId], references: [id])
  unitId       String
}

model ItemCategory {
  id         String   @id @default(cuid())
  name       String
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  itemType   ItemType @relation(fields: [itemTypeId], references: [id])
  itemTypeId String
  Item       Item[]
}

model Item {
  id             String        @id @default(cuid())
  code           String
  name           String
  description    String?
  note           String?
  minQty         Float         @default(0)
  maxQty         Float         @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  itemCategory   ItemCategory  @relation(fields: [itemCategoryId], references: [id])
  itemCategoryId String
  MultipleUom    MultipleUom[]
  Images         Image[]
}

model Image {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
}

model MultipleUom {
  id              String            @id @default(cuid())
  convertionQty   Float             @default(1.0)
  barcode         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  unit            Unit              @relation(fields: [unitId], references: [id])
  unitId          String
  unitOfMeasure   UnitOfMeasure     @relation(fields: [unitOfMeasureId], references: [id])
  unitOfMeasureId String
  item            Item              @relation(fields: [itemId], references: [id])
  itemId          String
  PriceBookDetail PriceBookDetail[]

  @@unique([unitId, barcode])
  @@unique([unitOfMeasureId, itemId, unitId, convertionQty])
}

model PriceBook {
  id              String            @id @default(cuid())
  startDate       DateTime?
  endDate         DateTime?
  note            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  unit            Unit              @relation(fields: [unitId], references: [id])
  unitId          String
  PriceBookDetail PriceBookDetail[]
}

model PriceBookDetail {
  id            String      @id @default(cuid())
  qty           Float       @default(1)
  price         Float
  discount      Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  priceBook     PriceBook   @relation(fields: [priceBookId], references: [id])
  priceBookId   String
  multipleUom   MultipleUom @relation(fields: [multipleUomId], references: [id])
  multipleUomId String
}

model Prefix {
  id              String          @id @default(cuid())
  transactionType TransactionType
  name            String
  transactionName String
  lastCode        Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  unit            Unit            @relation(fields: [unitId], references: [id])
  unitId          String

  @@unique([transactionType, unitId])
}

model Transaction {
  id                String              @id @default(cuid())
  transactionType   TransactionType
  transactionNumber String
  beforeTax         Float               @default(0)
  taxValue          Float               @default(0)
  total             Float               @default(0)
  note              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  unit              Unit                @relation(fields: [unitId], references: [id])
  unitId            String
  warehouse         Warehouse           @relation(fields: [warehouseId], references: [id])
  warehouseId       String
  TransactionDetail TransactionDetail[]
}

model TransactionDetail {
  id               String          @id @default(cuid())
  qtyInput         Float
  priceInput       Float
  discountInput    Float           @default(0)
  vector           Vector
  beforeDiscount   Float
  discount         Float
  amount           Float
  taxValue         Float
  total            Float
  note             String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  transaction      Transaction     @relation(fields: [transactionId], references: [id])
  transactionId    String
  unitOfMeasure    UnitOfMeasure?  @relation(fields: [unitOfMeasureId], references: [id])
  unitOfMeasureId  String?
  chartOfAccount   ChartOfAccount? @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId String?
}

enum TransactionType {
  SALE_QUOTATION
  SALE_ORDER
  SALE_INVOICE
  SALE_RETURN
  PURCHASE_QUOTATION
  PURCHASE_ORDER
  PURCHASE_INVOICE
  PURCHASE_RETURN
  RECEIVEABLE_PAYMENT
  DEBT_PAYMENT
  EXPENSE
  REVENUE
  TRANSFER_FUND
  TRANSFER_ITEM_SEND
  TRANSFER_ITEM_RECEIVE
  STOCK_OPNAME
  JOURNAL_ENTRY
  BEGINNING_BALANCE_STOCK
  BEGINNING_BALANCE_DEBT
  BEGINNING_BALANCE_RECEIVABLE
}

enum RecalculateMethod {
  FIFO
  AVG
}

enum BalanceSheet {
  AKTIVA
  PASIVA
}

enum Vector {
  POSITIVE
  NEGATIVE
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
