// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String?
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Token           Token[]
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Institute {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Unit      Unit[]
}

model Unit {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  institute   Institute @relation(fields: [instituteId], references: [id])
  instituteId Int
  Store       Store[]
}

model Store {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  unit      Unit        @relation(fields: [unitId], references: [id])
  unitId    Int
  Warehouse Warehouse[]
}

model Warehouse {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int
}

model GeneralSetting {
  id          Int      @id @default(autoincrement())
  companyName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PeopleCategory {
  id         Int      @id @default(autoincrement())
  name       String
  isCustomer Boolean
  isSupplier Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  People     People[]
}

model People {
  id               Int            @id @default(autoincrement())
  name             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  peopleCategory   PeopleCategory @relation(fields: [peopleCategoryId], references: [id])
  peopleCategoryId Int
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
