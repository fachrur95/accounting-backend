// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  name            String?
  password        String
  role            Role          @default(USER)
  isEmailVerified Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Token           Token[]
  LogActivity     LogActivity[]
  UserUnit        UserUnit[]
}

model Token {
  id          String    @id @default(cuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Institute {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String?
  Unit      Unit[]
}

model Unit {
  id             String           @id @default(cuid())
  name           String
  createdAt      DateTime         @default(now())
  createdBy      String
  updatedAt      DateTime         @updatedAt
  updatedBy      String?
  institute      Institute        @relation(fields: [instituteId], references: [id])
  instituteId    String
  Warehouse      Warehouse[]
  ChartOfAccount ChartOfAccount[]
  PeopleCategory PeopleCategory[]
  ItemType       ItemType[]
  PriceBook      PriceBook[]
  MultipleUom    MultipleUom[]
  Prefix         Prefix[]
  Transaction    Transaction[]
  GeneralSetting GeneralSetting?
  UnitOfMeasure  UnitOfMeasure[]
  UserUnit       UserUnit[]
  People         People[]
  ItemCategory   ItemCategory[]
  Item           Item[]
  LogActivity    LogActivity[]
  Tax            Tax[]
  StockCard      StockCard[]
  ItemCogs       ItemCogs[]
  Term           Term[]

  @@unique([instituteId, name])
}

model Warehouse {
  id                     String        @id @default(cuid())
  name                   String
  createdAt              DateTime      @default(now())
  createdBy              String
  updatedAt              DateTime      @updatedAt
  updatedBy              String?
  unit                   Unit          @relation(fields: [unitId], references: [id])
  unitId                 String
  Transaction            Transaction[] @relation("warehouse")
  TransactionDestination Transaction[] @relation("warehouseDestination")
  StockCard              StockCard[]
}

model UserUnit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
}

model AccountClass {
  id                   String            @id @default(cuid())
  type                 BalanceSheet
  code                 String            @unique
  group                String?
  name                 String            @unique
  balanceSheetPosition Vector
  createdAt            DateTime          @default(now())
  createdBy            String
  updatedAt            DateTime          @updatedAt
  updatedBy            String?
  AccountSubClass      AccountSubClass[]
}

model AccountSubClass {
  id                   String           @id @default(cuid())
  code                 String           @unique
  group                String?
  name                 String           @unique
  balanceSheetPosition Vector
  createdAt            DateTime         @default(now())
  createdBy            String
  updatedAt            DateTime         @updatedAt
  updatedBy            String?
  accountClass         AccountClass     @relation(fields: [accountClassId], references: [id])
  accountClassId       String
  ChartOfAccount       ChartOfAccount[]
}

model ChartOfAccount {
  id                String              @id @default(cuid())
  code              String
  group             String?
  name              String
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  createdBy         String
  updatedAt         DateTime            @updatedAt
  updatedBy         String?
  accountSubClass   AccountSubClass     @relation(fields: [accountSubClassId], references: [id])
  accountSubClassId String
  unit              Unit                @relation(fields: [unitId], references: [id])
  unitId            String
  TransactionDetail TransactionDetail[]
  Transaction       Transaction[]

  @@unique([code, unitId])
  @@unique([group, unitId])
}

model GeneralSetting {
  id                String            @id @default(cuid())
  companyName       String
  recalculateMethod RecalculateMethod @default(AVG)
  isStrictMode      Boolean           @default(true)
  createdAt         DateTime          @default(now())
  createdBy         String
  updatedAt         DateTime          @updatedAt
  unit              Unit              @relation(fields: [unitId], references: [id])
  unitId            String            @unique
}

model PeopleCategory {
  id         String      @id @default(cuid())
  code       String?
  name       String
  isCustomer Boolean
  isSupplier Boolean
  isEmployee Boolean
  note       String?
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  createdBy  String
  updatedAt  DateTime    @updatedAt
  updatedBy  String?
  People     People[]
  unit       Unit        @relation(fields: [unitId], references: [id])
  unitId     String
  PriceBook  PriceBook[]
}

model People {
  id               String         @id @default(cuid())
  code             String?
  name             String
  note             String?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  createdBy        String
  updatedAt        DateTime       @updatedAt
  updatedBy        String?
  peopleCategory   PeopleCategory @relation(fields: [peopleCategoryId], references: [id])
  peopleCategoryId String
  unit             Unit           @relation(fields: [unitId], references: [id])
  unitId           String
  Transaction      Transaction[]
}

model UnitOfMeasure {
  id          String        @id @default(cuid())
  code        String?
  name        String
  note        String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  createdBy   String
  updatedAt   DateTime      @updatedAt
  updatedBy   String?
  unit        Unit          @relation(fields: [unitId], references: [id])
  unitId      String
  MultipleUom MultipleUom[]
}

model Term {
  id          String        @id @default(cuid())
  name        String
  period      Float         @default(0)
  note        String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  createdBy   String
  updatedAt   DateTime      @updatedAt
  updatedBy   String?
  unit        Unit          @relation(fields: [unitId], references: [id])
  unitId      String
  Transaction Transaction[]
}

model Tax {
  id                String              @id @default(cuid())
  name              String
  rate              Float               @default(0)
  note              String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  createdBy         String
  updatedAt         DateTime            @updatedAt
  updatedBy         String?
  unit              Unit                @relation(fields: [unitId], references: [id])
  unitId            String
  Item              Item[]
  TransactionDetail TransactionDetail[]
}

model ItemType {
  id           String         @id @default(cuid())
  name         String
  isStock      Boolean
  isSale       Boolean
  isPurchase   Boolean
  isAdjustment Boolean
  isTransfer   Boolean
  note         String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  createdBy    String
  updatedAt    DateTime       @updatedAt
  updatedBy    String?
  ItemCategory ItemCategory[]
  unit         Unit           @relation(fields: [unitId], references: [id])
  unitId       String
}

model ItemCategory {
  id         String   @id @default(cuid())
  name       String
  note       String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  createdBy  String
  updatedAt  DateTime @updatedAt
  updatedBy  String?
  itemType   ItemType @relation(fields: [itemTypeId], references: [id])
  itemTypeId String
  Item       Item[]
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
}

model Item {
  id             String        @id @default(cuid())
  code           String
  name           String
  description    String?
  note           String?
  isActive       Boolean       @default(true)
  minQty         Float         @default(0)
  maxQty         Float         @default(0)
  createdAt      DateTime      @default(now())
  createdBy      String
  updatedAt      DateTime      @updatedAt
  updatedBy      String?
  tax            Tax?          @relation(fields: [taxId], references: [id])
  taxId          String?
  itemCategory   ItemCategory  @relation(fields: [itemCategoryId], references: [id])
  itemCategoryId String
  MultipleUom    MultipleUom[]
  Images         Image[]
  unit           Unit          @relation(fields: [unitId], references: [id])
  unitId         String
  StockCard      StockCard[]
  ItemCogs       ItemCogs[]
}

model Image {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
}

model MultipleUom {
  id                String              @id @default(cuid())
  conversionQty     Float               @default(1.0)
  barcode           String?
  createdAt         DateTime            @default(now())
  createdBy         String
  updatedAt         DateTime            @updatedAt
  updatedBy         String?
  unit              Unit                @relation(fields: [unitId], references: [id])
  unitId            String
  unitOfMeasure     UnitOfMeasure       @relation(fields: [unitOfMeasureId], references: [id], onDelete: Cascade)
  unitOfMeasureId   String
  item              Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId            String
  PriceBookDetail   PriceBookDetail[]
  TransactionDetail TransactionDetail[]

  @@unique([unitId, barcode])
  @@unique([unitOfMeasureId, itemId, unitId])
}

model PriceBook {
  id               String            @id @default(cuid())
  name             String
  startDate        DateTime?
  endDate          DateTime?
  note             String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  createdBy        String
  updatedAt        DateTime          @updatedAt
  updatedBy        String?
  peopleCategory   PeopleCategory?   @relation(fields: [peopleCategoryId], references: [id])
  peopleCategoryId String?
  unit             Unit              @relation(fields: [unitId], references: [id])
  unitId           String
  PriceBookDetail  PriceBookDetail[]

  @@unique([name, unitId])
}

model PriceBookDetail {
  id            String      @id @default(cuid())
  qty           Float       @default(1)
  price         Float
  discount      Float
  createdAt     DateTime    @default(now())
  createdBy     String
  updatedAt     DateTime    @updatedAt
  updatedBy     String?
  priceBook     PriceBook   @relation(fields: [priceBookId], references: [id], onDelete: Cascade)
  priceBookId   String
  multipleUom   MultipleUom @relation(fields: [multipleUomId], references: [id], onDelete: Cascade)
  multipleUomId String

  @@unique([priceBookId, multipleUomId, qty])
}

model Prefix {
  id              String          @id @default(cuid())
  transactionType TransactionType
  name            String
  prefix          String
  lastCode        Int             @default(0)
  createdAt       DateTime        @default(now())
  createdBy       String
  updatedAt       DateTime        @updatedAt
  updatedBy       String?
  unit            Unit            @relation(fields: [unitId], references: [id])
  unitId          String

  @@unique([transactionType, unitId])
  @@unique([prefix, unitId])
}

model Transaction {
  id                       String              @id @default(cuid())
  transactionType          TransactionType
  transactionNumber        String
  paymentInput             Float
  change                   Float               @default(0)
  beforeTax                Float               @default(0)
  taxValue                 Float               @default(0)
  total                    Float               @default(0)
  totalPayment             Float               @default(0)
  underPayment             Float               @default(0)
  entryDate                DateTime            @default(now())
  dueDate                  DateTime            @default(now())
  note                     String?
  createdAt                DateTime            @default(now())
  createdBy                String
  updatedAt                DateTime            @updatedAt
  updatedBy                String?
  deletedAt                DateTime?
  deletedBy                String?
  people                   People?             @relation(fields: [peopleId], references: [id])
  peopleId                 String?
  unit                     Unit                @relation(fields: [unitId], references: [id])
  unitId                   String
  term                     Term?               @relation(fields: [termId], references: [id])
  termId                   String?
  warehouse                Warehouse?          @relation("warehouse", fields: [warehouseId], references: [id])
  warehouseId              String?
  warehouseDestination     Warehouse?          @relation("warehouseDestination", fields: [warehouseDestinationId], references: [id])
  warehouseDestinationId   String?
  chartOfAccount           ChartOfAccount?     @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId         String?
  TransactionDetail        TransactionDetail[] @relation("transaction")
  TransactionDetailPayment TransactionDetail[] @relation("transactionPayment")
  ItemCogs                 ItemCogs[]

  @@unique([transactionNumber, unitId])
}

model TransactionDetail {
  id                   String          @id @default(cuid())
  qtyInput             Float           @default(0)
  priceInput           Float           @default(0)
  discountInput        Float           @default(0)
  conversionQty        Float           @default(1.0)
  taxRate              Float           @default(0)
  vector               Vector
  qty                  Float
  beforeDiscount       Float
  discount             Float
  amount               Float
  taxValue             Float
  total                Float
  cogs                 Float           @default(0)
  note                 String?
  createdAt            DateTime        @default(now())
  createdBy            String
  updatedAt            DateTime        @updatedAt
  updatedBy            String?
  transaction          Transaction     @relation("transaction", fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId        String
  transactionPayment   Transaction?    @relation("transactionPayment", fields: [transactionPaymentId], references: [id], onDelete: Cascade)
  transactionPaymentId String?
  multipleUom          MultipleUom?    @relation(fields: [multipleUomId], references: [id], onDelete: Cascade)
  multipleUomId        String?
  tax                  Tax?            @relation(fields: [taxId], references: [id])
  taxId                String?
  chartOfAccount       ChartOfAccount? @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId     String?
}

model ItemCogs {
  id            String      @id @default(cuid())
  qty           Float
  qtyStatic     Float
  cogs          Float
  date          DateTime
  createdAt     DateTime    @default(now())
  createdBy     String
  updatedAt     DateTime    @updatedAt
  updatedBy     String?
  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId        String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String
  unit          Unit        @relation(fields: [unitId], references: [id])
  unitId        String
}

model StockCard {
  id          String    @id @default(cuid())
  qty         Float
  incoming    Float     @default(0)
  createdAt   DateTime  @default(now())
  createdBy   String
  updatedAt   DateTime  @updatedAt
  updatedBy   String?
  item        Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  unit        Unit      @relation(fields: [unitId], references: [id])
  unitId      String

  @@unique([itemId, warehouseId, unitId])
}

model LogActivity {
  id           String       @id @default(cuid())
  message      String
  data         String?
  activityType ActivityType
  createdAt    DateTime     @default(now())
  createdBy    String
  unit         Unit?        @relation(fields: [unitId], references: [id])
  unitId       String?
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
}

enum TransactionType {
  SALE_QUOTATION
  SALE_ORDER
  SALE_INVOICE
  SALE_RETURN
  PURCHASE_QUOTATION
  PURCHASE_ORDER
  PURCHASE_INVOICE
  PURCHASE_RETURN
  RECEIVEABLE_PAYMENT
  DEBT_PAYMENT
  EXPENSE
  REVENUE
  TRANSFER_FUND
  TRANSFER_ITEM_SEND
  TRANSFER_ITEM_RECEIVE
  STOCK_OPNAME
  JOURNAL_ENTRY
  BEGINNING_BALANCE_STOCK
  BEGINNING_BALANCE_DEBT
  BEGINNING_BALANCE_RECEIVABLE
}

enum RecalculateMethod {
  AVG
  FIFO
}

enum BalanceSheet {
  AKTIVA
  PASIVA
}

enum Vector {
  POSITIVE
  NEGATIVE
}

enum Role {
  USER
  ADMIN
  AUDITOR
  SUPERADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum TableLog {
  USER
  INSTITUTE
  UNIT
  WAREHOUSE
  ACCOUNT_CLASS
  ACCOUNT_SUB_CLASS
  CHART_OF_ACCOUNT
  GENERAL_SETTING
  PEOPLE_CATEGORY
  PEOPLE
  UNIT_OF_MEASURE
}

enum ActivityType {
  REGISTER
  LOGIN
  LOGOUT
  VERIFY_EMAIL
  RESET_PASSWORD
  VIEW
  READ
  INSERT
  UPDATE
  DELETE
}
