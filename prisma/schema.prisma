// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  name            String?
  password        String
  role            Role          @default(USER)
  isEmailVerified Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tokens          Token[]
  logActivities   LogActivity[]
  userUnits       UserUnit[]
}

model Token {
  id          String    @id @default(cuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Institute {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String?
  units     Unit[]
}

model Unit {
  id                String             @id @default(cuid())
  name              String
  createdAt         DateTime           @default(now())
  createdBy         String
  updatedAt         DateTime           @updatedAt
  updatedBy         String?
  institute         Institute          @relation(fields: [instituteId], references: [id])
  instituteId       String
  // warehouses        Warehouse[]
  chartOfAccounts   ChartOfAccount[]
  peopleCategories  PeopleCategory[]
  itemTypes         ItemType[]
  priceBooks        PriceBook[]
  multipleUoms      MultipleUom[]
  prefixes          Prefix[]
  transactions      Transaction[]
  generalSetting    GeneralSetting?
  unitOfMeasures    UnitOfMeasure[]
  userUnits         UserUnit[]
  peoples           People[]
  itemCategories    ItemCategory[]
  items             Item[]
  logActivities     LogActivity[]
  taxes             Tax[]
  // StockCard        StockCard[]
  itemCogs          ItemCogs[]
  terms             Term[]
  itemCogsDetails   ItemCogsDetail[]
  financialClosings FinancialClosing[]
  cashRegisters     CashRegister[]
  generalLedgers    GeneralLedger[]

  @@unique([instituteId, name])
}

// model Warehouse {
//   id                      String        @id @default(cuid())
//   name                    String
//   createdAt               DateTime      @default(now())
//   createdBy               String
//   updatedAt               DateTime      @updatedAt
//   updatedBy               String?
//   unit                    Unit          @relation(fields: [unitId], references: [id])
//   unitId                  String
//   transactions            Transaction[] @relation("warehouse")
//   transactionDestinations Transaction[] @relation("warehouseDestination")
//   // StockCard              StockCard[]
// }

model UserUnit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
}

model AccountClass {
  id                   String               @id @default(cuid())
  categoryClass        CategoryAccountClass @default(CURRENT_ASSET)
  categoryClassCode    Int?
  type                 BalanceSheet
  code                 String               @unique
  group                String?
  name                 String               @unique
  balanceSheetPosition Vector               @default(POSITIVE)
  profitLossPosition   Vector               @default(POSITIVE)
  createdAt            DateTime             @default(now())
  createdBy            String
  updatedAt            DateTime             @updatedAt
  updatedBy            String?
  accountSubClasses    AccountSubClass[]
}

model AccountSubClass {
  id                   String           @id @default(cuid())
  cashFlow             String?
  subCashFlow          String?
  code                 String           @unique
  group                String?
  name                 String           @unique
  balanceSheetPosition Vector           @default(POSITIVE)
  profitLossPosition   Vector           @default(POSITIVE)
  createdAt            DateTime         @default(now())
  createdBy            String
  updatedAt            DateTime         @updatedAt
  updatedBy            String?
  accountClass         AccountClass     @relation(fields: [accountClassId], references: [id])
  accountClassId       String
  chartOfAccounts      ChartOfAccount[]
}

model ChartOfAccount {
  id                           String                @id @default(cuid())
  code                         String
  group                        String?
  name                         String
  isActive                     Boolean               @default(true)
  createdAt                    DateTime              @default(now())
  createdBy                    String
  updatedAt                    DateTime              @updatedAt
  updatedBy                    String?
  accountSubClass              AccountSubClass       @relation(fields: [accountSubClassId], references: [id])
  accountSubClassId            String
  unit                         Unit                  @relation(fields: [unitId], references: [id])
  unitId                       String
  transactionDetails           TransactionDetail[]
  transactions                 Transaction[]
  cashRegisterMains            CashRegister[]        @relation("main")
  cashRegisterDeposits         CashRegister[]        @relation("deposit")
  cashRegisterBeginBalances    CashRegister[]        @relation("beginBalance")
  itemCategoryStocks           ItemCategory[]        @relation("stock")
  itemCategoryCogs             ItemCategory[]        @relation("cogs")
  itemCategorySales            ItemCategory[]        @relation("sales")
  generalSettingCurrentProfits GeneralSetting[]      @relation("currentProfit")
  generalSettingDebits         GeneralSetting[]      @relation("debit")
  generalSettingCredits        GeneralSetting[]      @relation("credit")
  generalLedgerDetails         GeneralLedgerDetail[]

  @@unique([code, unitId])
  @@unique([group, unitId])
}

model CashRegister {
  id                    String         @id @default(cuid())
  name                  String
  note                  String?
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  createdBy             String
  updatedAt             DateTime       @updatedAt
  updatedBy             String?
  mainAccount           ChartOfAccount @relation("main", fields: [mainAccountId], references: [id])
  mainAccountId         String
  depositAccount        ChartOfAccount @relation("deposit", fields: [depositAccountId], references: [id])
  depositAccountId      String
  beginBalanceAccount   ChartOfAccount @relation("beginBalance", fields: [beginBalanceAccountId], references: [id])
  beginBalanceAccountId String
  unit                  Unit           @relation(fields: [unitId], references: [id])
  unitId                String
  transactions          Transaction[]
}

model GeneralSetting {
  id                     String            @id @default(cuid())
  companyName            String
  leader                 String?
  accountant             String?
  recalculateMethod      RecalculateMethod @default(FIFO)
  isStrictMode           Boolean           @default(true)
  createdAt              DateTime          @default(now())
  createdBy              String
  updatedAt              DateTime          @updatedAt
  updatedBy              String?
  unit                   Unit              @relation(fields: [unitId], references: [id])
  unitId                 String            @unique
  currentProfitAccount   ChartOfAccount?   @relation("currentProfit", fields: [currentProfitAccountId], references: [id])
  currentProfitAccountId String?
  debitAccount           ChartOfAccount?   @relation("debit", fields: [debitAccountId], references: [id])
  debitAccountId         String?
  creditAccount          ChartOfAccount?   @relation("credit", fields: [creditAccountId], references: [id])
  creditAccountId        String?
}

model PeopleCategory {
  id         String      @id @default(cuid())
  code       String?
  name       String
  discount   Float       @default(0)
  isCustomer Boolean
  isSupplier Boolean
  isEmployee Boolean
  note       String?
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  createdBy  String
  updatedAt  DateTime    @updatedAt
  updatedBy  String?
  peoples    People[]
  unit       Unit        @relation(fields: [unitId], references: [id])
  unitId     String
  priceBooks PriceBook[]
}

model People {
  id                  String         @id @default(cuid())
  code                String?
  name                String
  note                String?
  isActive            Boolean        @default(true)
  createdAt           DateTime       @default(now())
  createdBy           String
  updatedAt           DateTime       @updatedAt
  updatedBy           String?
  peopleCategory      PeopleCategory @relation(fields: [peopleCategoryId], references: [id])
  peopleCategoryId    String
  unit                Unit           @relation(fields: [unitId], references: [id])
  unitId              String
  transactionPeoples  Transaction[]  @relation("people")
  transactionCashiers Transaction[]  @relation("cashier")
}

model UnitOfMeasure {
  id           String        @id @default(cuid())
  code         String?
  name         String
  note         String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  createdBy    String
  updatedAt    DateTime      @updatedAt
  updatedBy    String?
  unit         Unit          @relation(fields: [unitId], references: [id])
  unitId       String
  multipleUoms MultipleUom[]
}

model Term {
  id           String        @id @default(cuid())
  name         String
  period       Float         @default(0)
  note         String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  createdBy    String
  updatedAt    DateTime      @updatedAt
  updatedBy    String?
  unit         Unit          @relation(fields: [unitId], references: [id])
  unitId       String
  transactions Transaction[]
}

model Tax {
  id                 String              @id @default(cuid())
  name               String
  rate               Float               @default(0)
  note               String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  createdBy          String
  updatedAt          DateTime            @updatedAt
  updatedBy          String?
  unit               Unit                @relation(fields: [unitId], references: [id])
  unitId             String
  items              Item[]
  transactionDetails TransactionDetail[]
}

model ItemType {
  id             String         @id @default(cuid())
  name           String
  isStock        Boolean
  isSale         Boolean
  isPurchase     Boolean
  isAdjustment   Boolean
  isTransfer     Boolean
  note           String?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  createdBy      String
  updatedAt      DateTime       @updatedAt
  updatedBy      String?
  itemCategories ItemCategory[]
  unit           Unit           @relation(fields: [unitId], references: [id])
  unitId         String
}

model ItemCategory {
  id             String          @id @default(cuid())
  name           String
  note           String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  createdBy      String
  updatedAt      DateTime        @updatedAt
  updatedBy      String?
  itemType       ItemType        @relation(fields: [itemTypeId], references: [id])
  itemTypeId     String
  salesAccount   ChartOfAccount  @relation("sales", fields: [salesAccountId], references: [id])
  salesAccountId String
  stockAccount   ChartOfAccount? @relation("stock", fields: [stockAccountId], references: [id])
  stockAccountId String?
  cogsAccount    ChartOfAccount? @relation("cogs", fields: [cogsAccountId], references: [id])
  cogsAccountId  String?
  items          Item[]
  unit           Unit            @relation(fields: [unitId], references: [id])
  unitId         String
}

model Item {
  id                   String                @id @default(cuid())
  code                 String
  name                 String
  description          String?
  note                 String?
  isActive             Boolean               @default(true)
  minQty               Float                 @default(0)
  maxQty               Float                 @default(0)
  manualCogs           Float                 @default(0)
  price                Float                 @default(0)
  createdAt            DateTime              @default(now())
  createdBy            String
  updatedAt            DateTime              @updatedAt
  updatedBy            String?
  tax                  Tax?                  @relation(fields: [taxId], references: [id])
  taxId                String?
  itemCategory         ItemCategory          @relation(fields: [itemCategoryId], references: [id])
  itemCategoryId       String
  multipleUoms         MultipleUom[]
  images               Image[]
  unit                 Unit                  @relation(fields: [unitId], references: [id])
  unitId               String
  // StockCard      StockCard[]
  itemCogs             ItemCogs[]
  generalLedgerDetails GeneralLedgerDetail[]
}

model Image {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
}

model MultipleUom {
  id                 String              @id @default(cuid())
  conversionQty      Float               @default(1.0)
  barcode            String?
  createdAt          DateTime            @default(now())
  createdBy          String
  updatedAt          DateTime            @updatedAt
  updatedBy          String?
  unit               Unit                @relation(fields: [unitId], references: [id])
  unitId             String
  unitOfMeasure      UnitOfMeasure       @relation(fields: [unitOfMeasureId], references: [id], onDelete: Cascade)
  unitOfMeasureId    String
  item               Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId             String
  priceBookDetails   PriceBookDetail[]
  transactionDetails TransactionDetail[]

  @@unique([unitId, barcode])
  @@unique([unitOfMeasureId, itemId, unitId])
}

model PriceBook {
  id               String            @id @default(cuid())
  name             String
  startDate        DateTime?
  endDate          DateTime?
  note             String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  createdBy        String
  updatedAt        DateTime          @updatedAt
  updatedBy        String?
  peopleCategory   PeopleCategory?   @relation(fields: [peopleCategoryId], references: [id])
  peopleCategoryId String?
  unit             Unit              @relation(fields: [unitId], references: [id])
  unitId           String
  priceBookDetails PriceBookDetail[]

  @@unique([name, unitId])
}

model PriceBookDetail {
  id            String      @id @default(cuid())
  qty           Float       @default(1)
  price         Float
  discount      Float
  createdAt     DateTime    @default(now())
  createdBy     String
  updatedAt     DateTime    @updatedAt
  updatedBy     String?
  priceBook     PriceBook   @relation(fields: [priceBookId], references: [id], onDelete: Cascade)
  priceBookId   String
  multipleUom   MultipleUom @relation(fields: [multipleUomId], references: [id], onDelete: Cascade)
  multipleUomId String

  @@unique([priceBookId, multipleUomId, qty])
}

model Prefix {
  id              String          @id @default(cuid())
  transactionType TransactionType
  name            String
  prefix          String
  lastCode        Int             @default(0)
  createdAt       DateTime        @default(now())
  createdBy       String
  updatedAt       DateTime        @updatedAt
  updatedBy       String?
  unit            Unit            @relation(fields: [unitId], references: [id])
  unitId          String

  @@unique([transactionType, unitId])
  @@unique([prefix, unitId])
}

model Transaction {
  id                        String              @id @default(cuid())
  transactionType           TransactionType
  transactionNumber         String
  paymentInput              Float               @default(0)
  specialDiscount           Float               @default(0)
  discountGroupInput        Float               @default(0)
  paymentType               PaymentType         @default(CASH)
  change                    Float               @default(0)
  beforeTax                 Float               @default(0)
  taxValue                  Float               @default(0)
  total                     Float               @default(0)
  totalPayment              Float               @default(0)
  underPayment              Float               @default(0)
  entryDate                 DateTime            @default(now())
  dueDate                   DateTime            @default(now())
  note                      String?
  createdAt                 DateTime            @default(now())
  createdBy                 String
  updatedAt                 DateTime            @updatedAt
  updatedBy                 String?
  deletedAt                 DateTime?
  deletedBy                 String?
  people                    People?             @relation("people", fields: [peopleId], references: [id])
  peopleId                  String?
  cashier                   People?             @relation("cashier", fields: [cashierId], references: [id])
  cashierId                 String?
  unit                      Unit                @relation(fields: [unitId], references: [id])
  unitId                    String
  term                      Term?               @relation(fields: [termId], references: [id])
  termId                    String?
  // warehouse                 Warehouse?          @relation("warehouse", fields: [warehouseId], references: [id])
  // warehouseId               String?
  // warehouseDestination      Warehouse?          @relation("warehouseDestination", fields: [warehouseDestinationId], references: [id])
  // warehouseDestinationId    String?
  chartOfAccount            ChartOfAccount?     @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId          String?
  cashRegister              CashRegister?       @relation(fields: [cashRegisterId], references: [id])
  cashRegisterId            String?
  transactionParent         Transaction?        @relation("transactionSelf", fields: [transactionParentId], references: [id])
  transactionParentId       String?
  transactionChildren       Transaction[]       @relation("transactionSelf")
  transactionDetails        TransactionDetail[] @relation("transaction")
  transactionDetailPayments TransactionDetail[] @relation("transactionPayment")
  generalLedger             GeneralLedger?

  @@unique([transactionNumber, unitId])
}

model TransactionDetail {
  id                        String                @id @default(cuid())
  qtyInput                  Float                 @default(0)
  priceInput                Float                 @default(0)
  discountInput             Float                 @default(0)
  conversionQty             Float                 @default(1.0)
  taxRate                   Float                 @default(0)
  vector                    Vector
  qty                       Float                 @default(0)
  beforeDiscount            Float                 @default(0)
  discount                  Float                 @default(0)
  distribute                Float                 @default(0)
  distributeValue           Float                 @default(0)
  amount                    Float                 @default(0)
  taxValue                  Float                 @default(0)
  total                     Float                 @default(0)
  note                      String?
  createdAt                 DateTime              @default(now())
  createdBy                 String
  updatedAt                 DateTime              @updatedAt
  updatedBy                 String?
  transaction               Transaction           @relation("transaction", fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId             String
  transactionDetailParent   TransactionDetail?    @relation("transactionDetailChildren", fields: [transactionDetailParentId], references: [id])
  transactionDetailParentId String?
  transactionPayment        Transaction?          @relation("transactionPayment", fields: [transactionPaymentId], references: [id])
  transactionPaymentId      String?
  multipleUom               MultipleUom?          @relation(fields: [multipleUomId], references: [id])
  multipleUomId             String?
  tax                       Tax?                  @relation(fields: [taxId], references: [id])
  taxId                     String?
  chartOfAccount            ChartOfAccount?       @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId          String?
  itemCogsDetails           ItemCogsDetail[]
  itemCogs                  ItemCogs?
  generalLedgerDetails      GeneralLedgerDetail[]
  transactionDetailChildren TransactionDetail[]   @relation("transactionDetailChildren")
}

model FinancialClosing {
  id        String   @id @default(cuid())
  entryDate DateTime @default(now())
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String?
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
}

model GeneralLedger {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  createdBy            String
  updatedAt            DateTime              @updatedAt
  updatedBy            String?
  unit                 Unit                  @relation(fields: [unitId], references: [id])
  unitId               String
  transaction          Transaction           @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId        String                @unique
  generalLedgerDetails GeneralLedgerDetail[]
}

model GeneralLedgerDetail {
  id                  String             @id @default(cuid())
  vector              Vector
  amount              Float
  createdAt           DateTime           @default(now())
  createdBy           String
  updatedAt           DateTime           @updatedAt
  updatedBy           String?
  generalLedger       GeneralLedger      @relation(fields: [generalLedgerId], references: [id], onDelete: Cascade)
  generalLedgerId     String
  chartOfAccount      ChartOfAccount     @relation(fields: [chartOfAccountId], references: [id], onDelete: Cascade)
  chartOfAccountId    String
  item                Item?              @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId              String?
  transactionDetail   TransactionDetail? @relation(fields: [transactionDetailId], references: [id], onDelete: Cascade)
  transactionDetailId String?
}

model ItemCogs {
  id                  String            @id @default(cuid())
  qty                 Float
  qtyStatic           Float
  cogs                Float
  date                DateTime
  createdAt           DateTime          @default(now())
  createdBy           String
  updatedAt           DateTime          @updatedAt
  updatedBy           String?
  item                Item              @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId              String
  transactionDetail   TransactionDetail @relation(fields: [transactionDetailId], references: [id], onDelete: Cascade)
  transactionDetailId String            @unique
  unit                Unit              @relation(fields: [unitId], references: [id])
  unitId              String
  itemCogsDetails     ItemCogsDetail[]
}

model ItemCogsDetail {
  id                  String            @id @default(cuid())
  qty                 Float
  cogs                Float
  date                DateTime
  transactionDetail   TransactionDetail @relation(fields: [transactionDetailId], references: [id], onDelete: Cascade)
  transactionDetailId String
  itemCogs            ItemCogs          @relation(fields: [itemCogsId], references: [id], onDelete: Cascade)
  itemCogsId          String
  unit                Unit              @relation(fields: [unitId], references: [id])
  unitId              String
}

// model StockCard {
//   id          String    @id @default(cuid())
//   qty         Float
//   incoming    Float     @default(0)
//   createdAt   DateTime  @default(now())
//   createdBy   String
//   updatedAt   DateTime  @updatedAt
//   updatedBy   String?
//   item        Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
//   itemId      String
//   warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
//   warehouseId String
//   unit        Unit      @relation(fields: [unitId], references: [id])
//   unitId      String

//   @@unique([itemId, warehouseId, unitId])
// }

model LogActivity {
  id           String       @id @default(cuid())
  message      String
  data         String?
  activityType ActivityType
  createdAt    DateTime     @default(now())
  createdBy    String
  unit         Unit?        @relation(fields: [unitId], references: [id])
  unitId       String?
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
}

enum TransactionType {
  SALE_QUOTATION
  SALE_ORDER
  SALE_INVOICE
  SALE_RETURN
  PURCHASE_QUOTATION
  PURCHASE_ORDER
  PURCHASE_INVOICE
  PURCHASE_RETURN
  RECEIVABLE_PAYMENT
  DEBT_PAYMENT
  DOWN_PAYMENT_RECEIVE
  DOWN_PAYMENT_DEBT
  EXPENSE
  REVENUE
  TRANSFER_FUND
  TRANSFER_ITEM_SEND
  TRANSFER_ITEM_RECEIVE
  STOCK_OPNAME
  STOCK_ADJUSTMENT
  JOURNAL_ENTRY
  BEGINNING_BALANCE_STOCK
  BEGINNING_BALANCE_DEBT
  BEGINNING_BALANCE_RECEIVABLE
  OPEN_REGISTER
  CLOSE_REGISTER
}

enum RecalculateMethod {
  AVG
  FIFO
  MANUAL
}

enum PaymentType {
  CASH
  CASHLESS
}

enum BalanceSheet {
  AKTIVA
  PASIVA
}

enum Vector {
  POSITIVE
  NEGATIVE
}

enum Role {
  USER
  ADMIN
  AUDITOR
  SUPERADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum TableLog {
  USER
  INSTITUTE
  UNIT
  // WAREHOUSE
  ACCOUNT_CLASS
  ACCOUNT_SUB_CLASS
  CHART_OF_ACCOUNT
  GENERAL_SETTING
  PEOPLE_CATEGORY
  PEOPLE
  UNIT_OF_MEASURE
}

enum ActivityType {
  REGISTER
  LOGIN
  LOGOUT
  VERIFY_EMAIL
  RESET_PASSWORD
  VIEW
  READ
  INSERT
  UPDATE
  DELETE
}

enum CategoryAccountClass {
  CURRENT_ASSET
  FIXED_ASSET
  CURRENT_LIABILITIES
  LONG_TERM_LIABILITIES
  EQUITY
  NET_PROFIT
  REVENUE
  COGS
  COGM
  EXPENSE
  OTHER_REVENUE
  OTHER_EXPENSE
  TAX
}
