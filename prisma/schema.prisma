// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Token           Token[]
}

model Token {
  id          String    @id @default(cuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Institute {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Unit      Unit[]
}

model Unit {
  id             String           @id @default(cuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  institute      Institute        @relation(fields: [instituteId], references: [id])
  instituteId    String
  Warehouse      Warehouse[]
  ChartOfAccount ChartOfAccount[]
  PeopleCategory PeopleCategory[]
}

model Warehouse {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
}

model AccountClass {
  id                   String            @id @default(cuid())
  type                 BalanceSheet
  code                 String
  group                String?
  name                 String
  balanceSheetPosition Vector
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  AccountSubClass      AccountSubClass[]
}

model AccountSubClass {
  id                   String           @id @default(cuid())
  code                 String
  group                String?
  name                 String
  balanceSheetPosition Vector
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  accountClass         AccountClass     @relation(fields: [accountClassId], references: [id])
  accountClassId       String
  ChartOfAccount       ChartOfAccount[]
}

model ChartOfAccount {
  id                String          @id @default(cuid())
  code              String
  group             String?
  name              String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  accountSubClass   AccountSubClass @relation(fields: [accountSubClassId], references: [id])
  accountSubClassId String
  unit              Unit            @relation(fields: [unitId], references: [id])
  unitId            String
}

model GeneralSetting {
  id          String   @id @default(cuid())
  companyName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PeopleCategory {
  id         String   @id @default(cuid())
  name       String
  isCustomer Boolean
  isSupplier Boolean
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  People     People[]
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
}

model People {
  id               String         @id @default(cuid())
  name             String
  note             String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  peopleCategory   PeopleCategory @relation(fields: [peopleCategoryId], references: [id])
  peopleCategoryId String
}

model ItemType {
  id           String         @id @default(cuid())
  name         String
  isStock      Boolean
  isSale       Boolean
  isPurchase   Boolean
  isAdjustment Boolean
  isTransfer   Boolean
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ItemCategory ItemCategory[]
}

model ItemCategory {
  id         String   @id @default(cuid())
  name       String
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  itemType   ItemType @relation(fields: [itemTypeId], references: [id])
  itemTypeId String
  Item       Item[]
}

model Item {
  id             String       @id @default(cuid())
  name           String
  note           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  itemCategory   ItemCategory @relation(fields: [itemCategoryId], references: [id])
  itemCategoryId String
}

enum BalanceSheet {
  AKTIVA
  PASIVA
}

enum Vector {
  POSITIVE
  NEGATIVE
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
