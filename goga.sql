-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               5.7.43-log - MySQL Community Server (GPL)
-- Server OS:                    Win64
-- HeidiSQL Version:             12.5.0.6677
-- --------------------------------------------------------
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */
;
/*!40101 SET NAMES utf8 */
;
/*!50503 SET NAMES utf8mb4 */
;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */
;
/*!40103 SET TIME_ZONE='+00:00' */
;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */
;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */
;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */
;
-- Dumping database structure for gogabook
CREATE DATABASE IF NOT EXISTS `gogabook`
/*!40100 DEFAULT CHARACTER SET latin1 */
;
USE `gogabook`;
-- Dumping structure for table gogabook.errorlog
CREATE TABLE IF NOT EXISTS `errorlog` (
	`errorlog_id` char(36) NOT NULL,
	`errorlog_syntax` longtext NOT NULL,
	`errorlog_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`errorlog_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.finance
CREATE TABLE IF NOT EXISTS `finance` (
	`finance_id` char(36) NOT NULL,
	`trans_id` char(36) NOT NULL,
	`masterexchange_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`finance_text` varchar(255) NOT NULL,
	`finance_type` tinyint(3) unsigned NOT NULL,
	`finance_entrydate` bigint(20) unsigned DEFAULT NULL,
	`finance_duedate` bigint(20) DEFAULT NULL,
	`finance_exchangevalue` decimal(20, 6) unsigned DEFAULT NULL,
	`finance_originalvalue` decimal(20, 6) unsigned DEFAULT NULL,
	`finance_currentvalue` decimal(20, 6) DEFAULT NULL,
	`finance_description` varchar(500) DEFAULT NULL,
	`finance_oleh` varchar(500) DEFAULT NULL,
	PRIMARY KEY (`finance_id`, `masterbussiness_id`),
	KEY `FK_finance_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_finance_masterother` (`masterexchange_id`, `masterbussiness_id`),
	KEY `FK_finance_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_finance_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_finance_masterother` FOREIGN KEY (`masterexchange_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_finance_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.financeline
CREATE TABLE IF NOT EXISTS `financeline` (
	`financeline_id` char(36) NOT NULL,
	`finance_id` char(36) NOT NULL,
	`trans_id` char(36) DEFAULT NULL,
	`masterexchange_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`financeline_text` varchar(255) NOT NULL,
	`financeline_status` enum('P', 'O', 'C') NOT NULL DEFAULT 'P',
	`financeline_type` tinyint(3) unsigned NOT NULL,
	`financeline_entrydate` bigint(20) DEFAULT NULL,
	`financeline_nomorgiro` varchar(255) DEFAULT NULL,
	`financeline_girojatem` bigint(20) unsigned DEFAULT NULL,
	`financeline_girocair` bigint(20) unsigned DEFAULT NULL,
	`financeline_vector` tinyint(4) DEFAULT NULL,
	`financeline_exchangevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`financeline_total` decimal(22, 2) unsigned DEFAULT NULL,
	`financeline_totalvalue` decimal(22, 2) unsigned DEFAULT NULL,
	`financeline_description` varchar(500) DEFAULT NULL,
	`financeline_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`financeline_id`, `masterbussiness_id`),
	KEY `FK_financeline_finance` (`finance_id`, `masterbussiness_id`),
	KEY `FK_financeline_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_financeline_masterother` (`masterexchange_id`, `masterbussiness_id`),
	KEY `FK_financeline_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_financeline_finance` FOREIGN KEY (`finance_id`, `masterbussiness_id`) REFERENCES `finance` (`finance_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_financeline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_financeline_masterother` FOREIGN KEY (`masterexchange_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_financeline_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.generalsetting
CREATE TABLE IF NOT EXISTS `generalsetting` (
	`generalsetting_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`generalsetting_metodehitung` enum('0', '1', '2', '3') DEFAULT '2' COMMENT '0	tidak hitung\r\n1	hitung AVG\r\n2	hitung FIFO\r\n3	hitung LIFO',
	`generalsetting_isautogeneratekodebarang` tinyint(1) unsigned DEFAULT '1',
	`generalsetting_digitautogenerate` smallint(5) unsigned DEFAULT '5',
	`generalsetting_ismultimatauang` tinyint(1) unsigned DEFAULT '0',
	`generalsetting_selisihwaktu` smallint(5) unsigned DEFAULT NULL,
	`generalsetting_namaperusahaan` varchar(255) DEFAULT NULL,
	`generalsetting_alamatperusahaan` varchar(255) DEFAULT NULL,
	`generalsetting_kotaperusahaan` varchar(255) DEFAULT NULL,
	`generalsetting_nomornpwp` varchar(255) DEFAULT NULL,
	`generalsetting_namanpwp` varchar(255) DEFAULT NULL,
	`generalsetting_alamatnpwp` varchar(500) DEFAULT NULL,
	`generalsetting_phone` varchar(500) DEFAULT NULL,
	`generalsetting_fax` varchar(500) DEFAULT NULL,
	`generalsetting_direktur` varchar(500) DEFAULT NULL,
	`generalsetting_namabank` varchar(500) DEFAULT NULL,
	`generalsetting_branchbank` varchar(500) DEFAULT NULL,
	`generalsetting_accname` varchar(500) DEFAULT NULL,
	`generalsetting_accno` varchar(500) DEFAULT NULL,
	`generalsetting_warehouseperson` varchar(500) DEFAULT NULL,
	`generalsetting_tahunviskal` bigint(20) unsigned DEFAULT NULL,
	`generalsetting_warna` varchar(255) DEFAULT NULL,
	`generalsetting_oleh` varchar(255) DEFAULT NULL,
	`generalsetting_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`generalsetting_id`, `masterbussiness_id`),
	UNIQUE KEY `generalsetting_id` (`generalsetting_id`),
	KEY `FK_generalsetting_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_generalsetting_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.generalsettingapprove
CREATE TABLE IF NOT EXISTS `generalsettingapprove` (
	`generalsettingapprove_id` char(36) NOT NULL,
	`masterprefix_id` char(36) NOT NULL,
	`generalsetting_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`generalsettingapprove_operator` tinyint(1) unsigned DEFAULT '0' COMMENT '0       or\r\n1       and',
	PRIMARY KEY (`generalsettingapprove_id`, `masterbussiness_id`),
	KEY `FK_generalsettingapprove_generalsetting` (`generalsetting_id`, `masterbussiness_id`),
	KEY `FK_generalsettingapprove_masterprefix` (`masterprefix_id`, `masterbussiness_id`),
	KEY `FK_generalsettingapprove_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_generalsettingapprove_generalsetting` FOREIGN KEY (`generalsetting_id`, `masterbussiness_id`) REFERENCES `generalsetting` (`generalsetting_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingapprove_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingapprove_masterprefix` FOREIGN KEY (`masterprefix_id`, `masterbussiness_id`) REFERENCES `masterprefix` (`masterprefix_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.generalsettingapproveline
CREATE TABLE IF NOT EXISTS `generalsettingapproveline` (
	`generalsettingapproveline_id` char(36) NOT NULL,
	`generalsettingapprove_id` char(36) NOT NULL,
	`masteruserbussiness_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (
		`generalsettingapproveline_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingapproveline_generalsettingapprove` (`generalsettingapprove_id`, `masterbussiness_id`),
	KEY `FK_generalsettingapproveline_masteruserbussiness` (`masteruserbussiness_id`, `masterbussiness_id`),
	KEY `FK_generalsettingapproveline_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_generalsettingapproveline_generalsettingapprove` FOREIGN KEY (`generalsettingapprove_id`, `masterbussiness_id`) REFERENCES `generalsettingapprove` (`generalsettingapprove_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingapproveline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingapproveline_masteruserbussiness` FOREIGN KEY (`masteruserbussiness_id`, `masterbussiness_id`) REFERENCES `masteruserbussiness` (`masteruserbussiness_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.generalsettingcek
CREATE TABLE IF NOT EXISTS `generalsettingcek` (
	`generalsettingcek_id` char(36) NOT NULL,
	`generalsetting_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`generalsettingcek_qtytarikquoteorderbeli` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikorderfakturrbeli` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikquoteorderjual` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikorderfakturjual` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikquoteorderasembly` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikorderfakturasembly` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikquoteorderdisasembly` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikorderfakturdisasembly` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikquoteordertransfer` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_qtytarikorderfakturtransfer` tinyint(1) unsigned DEFAULT '1',
	`generalsettingcek_alokasidefaultquotebeli` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultquotejual` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultquotetransfer` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultquotekoreksi` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultquoteassembly` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultquotedissasembly` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultorderbeli` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultorderjual` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultordertransfer` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultorderkoreksi` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultorderassembly` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_alokasidefaultorderdissasembly` tinyint(1) unsigned DEFAULT '0',
	`generalsettingcek_stok` enum('0', '1', '2') DEFAULT '0' COMMENT '0       tanpa cek\r\n1       cek stok inhand\r\n2       cek stok alokasi',
	`generalsettingcek_jualhargahpp` enum('0', '1', '2') DEFAULT '0' COMMENT '0 tanpa cek\r\n1 tidak boleh kurang\r\n2 tidak boleh kurang atau sama dengan',
	PRIMARY KEY (`generalsettingcek_id`, `masterbussiness_id`),
	UNIQUE KEY `generalsetting_id` (`generalsetting_id`),
	KEY `FK_generalsettingcek_generalsetting` (`generalsetting_id`, `masterbussiness_id`),
	KEY `FK_generalsettingcek_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_generalsettingcek_generalsetting` FOREIGN KEY (`generalsetting_id`, `masterbussiness_id`) REFERENCES `generalsetting` (`generalsetting_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingcek_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.generalsettingdefault
CREATE TABLE IF NOT EXISTS `generalsettingdefault` (
	`generalsettingdefault_id` char(36) NOT NULL,
	`generalsetting_id` char(36) NOT NULL,
	`generalsettingdefault_masteruom_id` char(36) DEFAULT NULL,
	`generalsettingdefault_mastertax_id` char(36) DEFAULT NULL,
	`generalsettingdefault_masteritemcategory_id` char(36) DEFAULT NULL,
	`generalsettingdefault_mastercreditterm_id` char(36) DEFAULT NULL,
	`generalsettingdefault_exchangecode_id` char(36) DEFAULT NULL,
	`generalsettingdefault_saldolababerjalan_id` char(36) DEFAULT NULL,
	`generalsettingdefault_saldolabaditahan_id` char(36) DEFAULT NULL,
	`generalsettingdefault_persediaan_id` char(36) DEFAULT NULL,
	`generalsettingdefault_hpp_id` char(36) DEFAULT NULL,
	`generalsettingdefault_penjualan_id` char(36) DEFAULT NULL,
	`generalsettingdefault_returpenjualan_id` char(36) DEFAULT NULL,
	`generalsettingdefault_discpenjualan_id` char(36) DEFAULT NULL,
	`generalsettingdefault_vatmasuk_id` char(36) DEFAULT NULL,
	`generalsettingdefault_vatkeluar_id` char(36) DEFAULT NULL,
	`generalsettingdefault_asset_id` char(36) DEFAULT NULL,
	`generalsettingdefault_assetexpense_id` char(36) DEFAULT NULL,
	`generalsettingdefault_assetakumulasi_id` char(36) DEFAULT NULL,
	`generalsettingdefault_assetkeuntungan_id` char(36) DEFAULT NULL,
	`generalsettingdefault_assetkerugian_id` char(36) DEFAULT NULL,
	`generalsettingdefault_assetperawatan_id` char(36) DEFAULT NULL,
	`generalsettingdefault_assetppnmasuk_id` char(36) DEFAULT NULL,
	`generalsettingdefault_assetppnkeluar_id` char(36) DEFAULT NULL,
	`generalsettingdefault_koreksi_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (`generalsettingdefault_id`, `masterbussiness_id`),
	UNIQUE KEY `generalsetting_id` (`generalsetting_id`),
	KEY `FK_generalsettingdefault_masterbussiness` (`masterbussiness_id`),
	KEY `FK_generalsettingdefault_generalsetting` (`generalsetting_id`, `masterbussiness_id`),
	KEY `FK_generalsettingdefault_masterother` (
		`generalsettingdefault_masteruom_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masterother_2` (
		`generalsettingdefault_mastertax_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteritemcategory` (
		`generalsettingdefault_masteritemcategory_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masterother_3` (
		`generalsettingdefault_mastercreditterm_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masterother_4` (
		`generalsettingdefault_exchangecode_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount` (
		`generalsettingdefault_saldolababerjalan_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_2` (
		`generalsettingdefault_saldolabaditahan_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_3` (
		`generalsettingdefault_persediaan_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_4` (
		`generalsettingdefault_hpp_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_5` (
		`generalsettingdefault_penjualan_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_6` (
		`generalsettingdefault_returpenjualan_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_7` (
		`generalsettingdefault_discpenjualan_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_8` (
		`generalsettingdefault_vatmasuk_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_9` (
		`generalsettingdefault_vatkeluar_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_10` (
		`generalsettingdefault_asset_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_11` (
		`generalsettingdefault_assetexpense_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_12` (
		`generalsettingdefault_assetakumulasi_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_13` (
		`generalsettingdefault_assetkeuntungan_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_14` (
		`generalsettingdefault_assetkerugian_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_15` (
		`generalsettingdefault_assetperawatan_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_16` (
		`generalsettingdefault_assetppnmasuk_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_17` (
		`generalsettingdefault_assetppnkeluar_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingdefault_masteraccount_18` (
		`generalsettingdefault_koreksi_id`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_generalsettingdefault_generalsetting` FOREIGN KEY (`generalsetting_id`, `masterbussiness_id`) REFERENCES `generalsetting` (`generalsetting_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingdefault_masteraccount` FOREIGN KEY (
		`generalsettingdefault_saldolababerjalan_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_10` FOREIGN KEY (
		`generalsettingdefault_asset_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_11` FOREIGN KEY (
		`generalsettingdefault_assetexpense_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_12` FOREIGN KEY (
		`generalsettingdefault_assetakumulasi_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_13` FOREIGN KEY (
		`generalsettingdefault_assetkeuntungan_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_14` FOREIGN KEY (
		`generalsettingdefault_assetkerugian_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_15` FOREIGN KEY (
		`generalsettingdefault_assetperawatan_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_16` FOREIGN KEY (
		`generalsettingdefault_assetppnmasuk_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_17` FOREIGN KEY (
		`generalsettingdefault_assetppnkeluar_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_18` FOREIGN KEY (
		`generalsettingdefault_koreksi_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_2` FOREIGN KEY (
		`generalsettingdefault_saldolabaditahan_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_3` FOREIGN KEY (
		`generalsettingdefault_persediaan_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_4` FOREIGN KEY (
		`generalsettingdefault_hpp_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_5` FOREIGN KEY (
		`generalsettingdefault_penjualan_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_6` FOREIGN KEY (
		`generalsettingdefault_returpenjualan_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_7` FOREIGN KEY (
		`generalsettingdefault_discpenjualan_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_8` FOREIGN KEY (
		`generalsettingdefault_vatmasuk_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masteraccount_9` FOREIGN KEY (
		`generalsettingdefault_vatkeluar_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingdefault_masteritemcategory` FOREIGN KEY (
		`generalsettingdefault_masteritemcategory_id`,
		`masterbussiness_id`
	) REFERENCES `masteritemcategory` (`masteritemcategory_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masterother` FOREIGN KEY (
		`generalsettingdefault_masteruom_id`,
		`masterbussiness_id`
	) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masterother_2` FOREIGN KEY (
		`generalsettingdefault_mastertax_id`,
		`masterbussiness_id`
	) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masterother_3` FOREIGN KEY (
		`generalsettingdefault_mastercreditterm_id`,
		`masterbussiness_id`
	) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingdefault_masterother_4` FOREIGN KEY (
		`generalsettingdefault_exchangecode_id`,
		`masterbussiness_id`
	) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.generalsettingpurch
CREATE TABLE IF NOT EXISTS `generalsettingpurch` (
	`generalsettingpurch_id` char(36) NOT NULL,
	`generalsetting_id` char(36) NOT NULL,
	`generalsettingpurch_hutang_id` char(36) DEFAULT NULL,
	`generalsettingpurch_unbill_id` char(36) DEFAULT NULL,
	`generalsettingpurch_uangmuka_id` char(36) DEFAULT NULL,
	`generalsettingpurch_uangmukaorder_id` char(36) DEFAULT NULL,
	`generalsettingpurch_bg_id` char(36) DEFAULT NULL,
	`generalsettingpurch_selisihretur_id` char(36) DEFAULT NULL,
	`generalsettingpurch_ppn_id` char(36) DEFAULT NULL COMMENT 'biaya yang kena ppn, kalau itemcategory terdapat ppn masukan',
	`masterbussiness_id` char(36) NOT NULL,
	`generalsettingpurch_priceperpiece` tinyint(1) unsigned DEFAULT '0',
	`generalsettingpurch_bgpotonghutang` tinyint(1) unsigned DEFAULT '1',
	`generalsettingpurch_cekplafonquote` tinyint(1) unsigned DEFAULT '0',
	`generalsettingpurch_cekplafonorder` tinyint(1) unsigned DEFAULT '0',
	`generalsettingpurch_cekplafon` tinyint(1) unsigned DEFAULT '0',
	`generalsettingpurch_quotemaxitem` smallint(5) unsigned DEFAULT '500',
	`generalsettingpurch_ordermaxitem` smallint(5) unsigned DEFAULT '500',
	`generalsettingpurch_invoicemaxitem` smallint(5) unsigned DEFAULT '500',
	`generalsettingpurch_quotedirectprint` tinyint(1) unsigned DEFAULT '0',
	`generalsettingpurch_orderdirectprint` tinyint(1) unsigned DEFAULT '0',
	`generalsettingpurch_invoicedirectprint` tinyint(1) unsigned DEFAULT '0',
	`generalsettingpurch_returdirectprint` tinyint(1) unsigned DEFAULT '0',
	`generalsettingpurch_quotetypeprint` tinyint(3) unsigned DEFAULT '1',
	`generalsettingpurch_ordertypeprint` tinyint(3) unsigned DEFAULT '1',
	`generalsettingpurch_invoicetypeprint` tinyint(3) unsigned DEFAULT '1',
	`generalsettingpurch_returtypeprint` tinyint(3) unsigned DEFAULT '1',
	`generalsettingpurch_ubahhargatarikquoteorder` tinyint(1) unsigned DEFAULT '1',
	`generalsettingpurch_ubahhargatarikorderfaktur` tinyint(1) unsigned DEFAULT '1',
	`generalsettingpurch_ubahdisctarikquoteorder` tinyint(1) unsigned DEFAULT '1',
	`generalsettingpurch_ubahdisctarikorderfaktur` tinyint(1) unsigned DEFAULT '1',
	PRIMARY KEY (`generalsettingpurch_id`, `masterbussiness_id`),
	UNIQUE KEY `generalsetting_id` (`generalsetting_id`),
	KEY `FK_generalsettingpurch_generalsetting` (`generalsetting_id`, `masterbussiness_id`),
	KEY `FK_generalsettingpurch_masterbussiness` (`masterbussiness_id`),
	KEY `FK_generalsettingpurch_masteraccount` (
		`generalsettingpurch_hutang_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingpurch_masteraccount_2` (
		`generalsettingpurch_unbill_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingpurch_masteraccount_3` (
		`generalsettingpurch_uangmuka_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingpurch_masteraccount_4` (
		`generalsettingpurch_uangmukaorder_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingpurch_masteraccount_5` (`generalsettingpurch_bg_id`, `masterbussiness_id`),
	KEY `FK_generalsettingpurch_masteraccount_6` (
		`generalsettingpurch_selisihretur_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingpurch_masteraccount_7` (
		`generalsettingpurch_ppn_id`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_generalsettingpurch_generalsetting` FOREIGN KEY (`generalsetting_id`, `masterbussiness_id`) REFERENCES `generalsetting` (`generalsetting_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingpurch_masteraccount` FOREIGN KEY (
		`generalsettingpurch_hutang_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingpurch_masteraccount_2` FOREIGN KEY (
		`generalsettingpurch_unbill_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingpurch_masteraccount_3` FOREIGN KEY (
		`generalsettingpurch_uangmuka_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingpurch_masteraccount_4` FOREIGN KEY (
		`generalsettingpurch_uangmukaorder_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingpurch_masteraccount_5` FOREIGN KEY (
		`generalsettingpurch_bg_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingpurch_masteraccount_6` FOREIGN KEY (
		`generalsettingpurch_selisihretur_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingpurch_masteraccount_7` FOREIGN KEY (
		`generalsettingpurch_ppn_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingpurch_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.generalsettingsell
CREATE TABLE IF NOT EXISTS `generalsettingsell` (
	`generalsettingsell_id` char(36) NOT NULL,
	`generalsetting_id` char(36) NOT NULL,
	`generalsettingsell_piutang_id` char(36) DEFAULT NULL,
	`generalsettingsell_unbill_id` char(36) DEFAULT NULL,
	`generalsettingsell_unbillrevenue_id` char(36) DEFAULT NULL,
	`generalsettingsell_uangmuka_id` char(36) DEFAULT NULL,
	`generalsettingsell_uangmukaorder_id` char(36) DEFAULT NULL,
	`generalsettingsell_bg_id` char(36) DEFAULT NULL,
	`generalsettingsell_ppn_id` char(36) DEFAULT NULL COMMENT 'terjadi apabila terdapat akun kena ppn, kalau itemcategory udah punya ppn',
	`generalsettingsell_defaultmasterpartner_id` char(36) DEFAULT NULL,
	`generalsettingsell_cardcharges` char(36) DEFAULT NULL,
	`generalsettingsell_selisihretur_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`generalsettingsell_angsuran` tinyint(1) unsigned DEFAULT '0',
	`generalsettingsell_priceperpiece` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_bgpotongpiutang` tinyint(1) unsigned DEFAULT '0',
	`generalsettingsell_cekplafonquote` tinyint(1) unsigned DEFAULT '0',
	`generalsettingsell_cekplafonorder` tinyint(1) unsigned DEFAULT '0',
	`generalsettingsell_cekplafon` tinyint(1) unsigned DEFAULT '0',
	`generalsettingsell_quotemaxitem` smallint(5) unsigned DEFAULT '500',
	`generalsettingsell_ordermaxitem` smallint(5) unsigned DEFAULT '500',
	`generalsettingsell_invoicemaxitem` smallint(5) unsigned DEFAULT '500',
	`generalsettingsell_quotedirectprint` tinyint(1) unsigned DEFAULT NULL,
	`generalsettingsell_orderdirectprint` tinyint(1) unsigned DEFAULT NULL,
	`generalsettingsell_invoicedirectprint` tinyint(1) unsigned DEFAULT NULL,
	`generalsettingsell_returdirectprint` tinyint(1) unsigned DEFAULT NULL,
	`generalsettingsell_quotetypeprint` tinyint(3) unsigned DEFAULT '1',
	`generalsettingsell_ordertypeprint` tinyint(3) unsigned DEFAULT '1',
	`generalsettingsell_invoicetypeprint` tinyint(3) unsigned DEFAULT '1',
	`generalsettingsell_returtypeprint` tinyint(3) unsigned DEFAULT '1',
	`generalsettingsell_ubahhargatarikquoteorder` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_ubahhargatarikorderfaktur` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_ubahdisctarikquoteorder` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_ubahdisctarikorderfaktur` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_ubahhargaquote` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_ubahhargaorder` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_ubahdiscquote` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_ubahdiscorder` tinyint(1) unsigned DEFAULT '1',
	`generalsettingsell_ubahhargainvoice` tinyint(1) unsigned DEFAULT NULL,
	`generalsettingsell_ubahdiscinvoice` tinyint(1) unsigned DEFAULT NULL,
	`generalsettingsell_notabanner` text,
	PRIMARY KEY (`generalsettingsell_id`, `masterbussiness_id`),
	UNIQUE KEY `generalsetting_id` (`generalsetting_id`),
	KEY `FK_generalsettingsell_generalsetting` (`generalsetting_id`, `masterbussiness_id`),
	KEY `FK_generalsettingsell_masterbussiness` (`masterbussiness_id`),
	KEY `FK_generalsettingsell_masteraccount` (
		`generalsettingsell_piutang_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingsell_masteraccount_2` (
		`generalsettingsell_unbill_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingsell_masteraccount_3` (
		`generalsettingsell_uangmuka_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingsell_masteraccount_4` (
		`generalsettingsell_uangmukaorder_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingsell_masteraccount_5` (`generalsettingsell_bg_id`, `masterbussiness_id`),
	KEY `FK_generalsettingsell_masteraccount_6` (`generalsettingsell_ppn_id`, `masterbussiness_id`),
	KEY `FK_generalsettingsell_masterpartner` (
		`generalsettingsell_defaultmasterpartner_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingsell_masteraccount_7` (
		`generalsettingsell_unbillrevenue_id`,
		`masterbussiness_id`
	),
	KEY `FK_generalsettingsell_masteraccount_8` (
		`generalsettingsell_cardcharges`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_generalsettingsell_generalsetting` FOREIGN KEY (`generalsetting_id`, `masterbussiness_id`) REFERENCES `generalsetting` (`generalsetting_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingsell_masteraccount` FOREIGN KEY (
		`generalsettingsell_piutang_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingsell_masteraccount_2` FOREIGN KEY (
		`generalsettingsell_unbill_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingsell_masteraccount_3` FOREIGN KEY (
		`generalsettingsell_uangmuka_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingsell_masteraccount_4` FOREIGN KEY (
		`generalsettingsell_uangmukaorder_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingsell_masteraccount_5` FOREIGN KEY (`generalsettingsell_bg_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingsell_masteraccount_6` FOREIGN KEY (
		`generalsettingsell_ppn_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingsell_masteraccount_7` FOREIGN KEY (
		`generalsettingsell_unbillrevenue_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingsell_masteraccount_8` FOREIGN KEY (
		`generalsettingsell_cardcharges`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_generalsettingsell_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_generalsettingsell_masterpartner` FOREIGN KEY (
		`generalsettingsell_defaultmasterpartner_id`,
		`masterbussiness_id`
	) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.gl
CREATE TABLE IF NOT EXISTS `gl` (
	`gl_id` char(36) NOT NULL,
	`trans_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`gl_text` varchar(255) NOT NULL,
	`gl_status` enum('P', 'O', 'C', 'H', 'OD', 'CT') NOT NULL DEFAULT 'P',
	`gl_type` tinyint(4) unsigned NOT NULL,
	`gl_description` varchar(255) DEFAULT NULL,
	`gl_entrydate` bigint(20) unsigned DEFAULT NULL,
	`gl_nomorgiro` varchar(255) DEFAULT NULL,
	`gl_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`gl_id`, `masterbussiness_id`),
	KEY `FK_gl_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_gl_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_gl_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_gl_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.glline
CREATE TABLE IF NOT EXISTS `glline` (
	`glline_id` char(36) NOT NULL,
	`gl_id` char(36) NOT NULL,
	`transline_id` char(36) DEFAULT NULL,
	`masteraccount_id` char(36) NOT NULL,
	`masteritem_id` char(36) DEFAULT NULL,
	`masterexchange_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`glline_description` varchar(500) DEFAULT NULL,
	`glline_exchangevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`glline_vector` tinyint(4) DEFAULT NULL,
	`glline_amount` decimal(33, 15) DEFAULT NULL,
	`glline_amountvalue` decimal(33, 15) DEFAULT NULL,
	PRIMARY KEY (`glline_id`, `masterbussiness_id`),
	KEY `FK_glline_gl` (`gl_id`, `masterbussiness_id`),
	KEY `FK_glline_transline` (`transline_id`, `masterbussiness_id`),
	KEY `FK_glline_masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	KEY `FK_glline_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_glline_masterother` (`masterexchange_id`, `masterbussiness_id`),
	KEY `FK_glline_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_glline_gl` FOREIGN KEY (`gl_id`, `masterbussiness_id`) REFERENCES `gl` (`gl_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_glline_masteraccount` FOREIGN KEY (`masteraccount_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_glline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_glline_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_glline_masterother` FOREIGN KEY (`masterexchange_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_glline_transline` FOREIGN KEY (`transline_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.historylog
CREATE TABLE IF NOT EXISTS `historylog` (
	`historylog_id` char(36) NOT NULL,
	`historylog_keyunique` char(36) DEFAULT NULL,
	`historylog_entitas` text,
	`historylog_namatabel` varchar(255) DEFAULT NULL,
	`historylog_alias` varchar(255) DEFAULT NULL,
	`historylog_value` varchar(255) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`historylog_mode` enum('I', 'U', 'D', 'V') DEFAULT NULL,
	`historylog_entityinduk` varchar(255) DEFAULT NULL,
	`historylog_type` smallint(6) DEFAULT NULL,
	`historylog_oleh` varchar(255) DEFAULT NULL,
	`historylog_waktu` bigint(20) unsigned DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.komisi
CREATE TABLE IF NOT EXISTS `komisi` (
	`komisi_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`komisi_description` varchar(255) DEFAULT NULL,
	`komisi_startdate` bigint(20) unsigned DEFAULT NULL,
	`komisi_enddate` bigint(20) unsigned DEFAULT NULL,
	`komisi_typesales` enum('Semua', 'Tertentu') DEFAULT NULL,
	`komisi_typeitem` enum('Semua', 'Kategori', 'Barang') DEFAULT NULL,
	`komisi_typecustomer` enum('Semua', 'Kategori', 'Pelanggan', 'UsiaPelanggan') DEFAULT NULL,
	`komisi_ispersentase` tinyint(1) unsigned DEFAULT NULL,
	`komisi_ketentuan` enum(
		'PerFaktur',
		'PerQty',
		'NilaiPenjualan',
		'LabaKotor'
	) DEFAULT NULL,
	`komisi_usiapelanggan` smallint(5) unsigned DEFAULT NULL,
	`komisi_usiafrom` enum('Order', 'Invoice', 'Master') DEFAULT NULL,
	PRIMARY KEY (`komisi_id`, `masterbussiness_id`),
	KEY `FK_komisi_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_komisi_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.komisicustomer
CREATE TABLE IF NOT EXISTS `komisicustomer` (
	`komisicustomer_id` char(36) NOT NULL,
	`komisi_id` char(36) NOT NULL,
	`mastercustomer_id` char(36) DEFAULT NULL,
	`mastercustomerkategori_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (`komisicustomer_id`, `masterbussiness_id`),
	KEY `FK_komisicustomer_komisi` (`komisi_id`, `masterbussiness_id`),
	KEY `FK_komisicustomer_masterbussiness` (`masterbussiness_id`),
	KEY `FK_komisicustomer_masterpartner` (`mastercustomer_id`, `masterbussiness_id`),
	KEY `FK_komisicustomer_masterpartnercategory` (`mastercustomerkategori_id`, `masterbussiness_id`),
	CONSTRAINT `FK_komisicustomer_komisi` FOREIGN KEY (`komisi_id`, `masterbussiness_id`) REFERENCES `komisi` (`komisi_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisicustomer_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisicustomer_masterpartner` FOREIGN KEY (`mastercustomer_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisicustomer_masterpartnercategory` FOREIGN KEY (
		`mastercustomerkategori_id`,
		`masterbussiness_id`
	) REFERENCES `masterpartnercategory` (`masterpartnercategory_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.komisiline
CREATE TABLE IF NOT EXISTS `komisiline` (
	`komisiline_id` char(36) NOT NULL,
	`komisi_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`komisiline_valueinput` decimal(20, 6) DEFAULT NULL,
	`komisiline_komisiinput` decimal(20, 6) DEFAULT NULL,
	PRIMARY KEY (`komisiline_id`, `masterbussiness_id`),
	KEY `FK_komisiline_komisi` (`komisi_id`, `masterbussiness_id`),
	KEY `FK_komisiline_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_komisiline_komisi` FOREIGN KEY (`komisi_id`, `masterbussiness_id`) REFERENCES `komisi` (`komisi_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisiline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.komisisales
CREATE TABLE IF NOT EXISTS `komisisales` (
	`komisisales_id` char(36) NOT NULL,
	`komisi_id` char(36) NOT NULL,
	`mastersales_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (`komisisales_id`, `masterbussiness_id`),
	KEY `FK_komisisales_komisi` (`komisi_id`, `masterbussiness_id`),
	KEY `FK_komisisales_masterpartner` (`mastersales_id`, `masterbussiness_id`),
	KEY `FK_komisisales_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_komisisales_komisi` FOREIGN KEY (`komisi_id`, `masterbussiness_id`) REFERENCES `komisi` (`komisi_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisisales_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisisales_masterpartner` FOREIGN KEY (`mastersales_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.komisisyarat
CREATE TABLE IF NOT EXISTS `komisisyarat` (
	`komisisyarat_id` char(36) NOT NULL,
	`komisi_id` char(36) NOT NULL,
	`masteritem_id` char(36) DEFAULT NULL,
	`masteritemcategory_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (`komisisyarat_id`, `masterbussiness_id`),
	KEY `FK_komisisyarat_komisi` (`komisi_id`, `masterbussiness_id`),
	KEY `FK_komisisyarat_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_komisisyarat_masteritemcategory` (`masteritemcategory_id`, `masterbussiness_id`),
	KEY `FK_komisisyarat_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_komisisyarat_komisi` FOREIGN KEY (`komisi_id`, `masterbussiness_id`) REFERENCES `komisi` (`komisi_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisisyarat_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisisyarat_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_komisisyarat_masteritemcategory` FOREIGN KEY (`masteritemcategory_id`, `masterbussiness_id`) REFERENCES `masteritemcategory` (`masteritemcategory_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteraccount
CREATE TABLE IF NOT EXISTS `masteraccount` (
	`masteraccount_id` char(36) NOT NULL,
	`masteraccountsubclass_id` char(36) NOT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masteraccount_description` varchar(255) NOT NULL,
	`masteraccount_alias` varchar(255) DEFAULT NULL,
	`masteraccount_restrict` tinyint(1) unsigned DEFAULT '0',
	`masteraccount_active` tinyint(1) unsigned NOT NULL,
	`masteraccount_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masteraccount_id`, `masterbussiness_id`),
	KEY `FK_masteraccount_masteraccountsubclass` (`masteraccountsubclass_id`),
	KEY `FK_masteraccount_masterplatform` (`masterplatform_id`),
	KEY `FK_masteraccount_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masteraccount_masteraccountsubclass` FOREIGN KEY (`masteraccountsubclass_id`) REFERENCES `masteraccountsubclass` (`masteraccountsubclass_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteraccount_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteraccount_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteraccountclass
CREATE TABLE IF NOT EXISTS `masteraccountclass` (
	`masteraccountclass_id` char(36) NOT NULL,
	`masteraccountclass_categoryclass` enum(
		'FIXED ASSET',
		'CURRENT ASSET',
		'LONG TERM LIABILITIES',
		'CURRENT LIABILITIES',
		'EQUITY',
		'NET PROFIT',
		'REVENUE',
		'COGS',
		'COGM',
		'EXPENSE',
		'OTHER REVENUE',
		'OTHER EXPENSE',
		'TAX'
	) NOT NULL,
	`masteraccountclass_categoryclasscode` tinyint(3) unsigned DEFAULT NULL,
	`masteraccountclass_aktivapasiva` tinyint(3) unsigned DEFAULT NULL,
	`masteraccountclass_description` varchar(255) NOT NULL,
	`masteraccountclass_alias` varchar(255) DEFAULT NULL,
	`masteraccountclass_neraca` tinyint(4) DEFAULT NULL,
	`masteraccountclass_profitloss` tinyint(4) DEFAULT NULL,
	`masteraccountclass_active` tinyint(1) unsigned NOT NULL,
	`masteraccountclass_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masteraccountclass_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteraccountclasshistory
CREATE TABLE IF NOT EXISTS `masteraccountclasshistory` (
	`masteraccountclasshistory_id` char(36) NOT NULL,
	`masteraccountclasshistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masteraccountclass_id` char(36) DEFAULT NULL,
	`masteraccountclass_categoryclass` enum(
		'FIXED ASSET',
		'CURRENT ASSET',
		'LONG TERM LIABILITIES',
		'CURRENT LIABILITIES',
		'EQUITY',
		'NET PROFIT',
		'REVENUE',
		'COGS',
		'COGM',
		'EXPENSE',
		'OTHER REVENUE',
		'OTHER EXPENSE',
		'TAX'
	) DEFAULT NULL,
	`masteraccountclass_categoryclasscode` tinyint(3) unsigned DEFAULT NULL,
	`masteraccountclass_aktivapasiva` tinyint(3) unsigned DEFAULT NULL,
	`masteraccountclass_description` varchar(255) DEFAULT NULL,
	`masteraccountclass_alias` varchar(255) DEFAULT NULL,
	`masteraccountclass_neraca` tinyint(4) DEFAULT NULL,
	`masteraccountclass_profitloss` tinyint(4) DEFAULT NULL,
	`masteraccountclass_active` tinyint(1) unsigned DEFAULT NULL,
	`masteraccountclass_oleh` varchar(255) DEFAULT NULL,
	`masteraccountclasshistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteraccountclasshistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteraccounthistory
CREATE TABLE IF NOT EXISTS `masteraccounthistory` (
	`masteraccounthistory_id` char(36) NOT NULL,
	`masteraccounthistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masteraccount_id` char(36) DEFAULT NULL,
	`masteraccountsubclass_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masteraccount_description` varchar(255) DEFAULT NULL,
	`masteraccount_alias` varchar(255) DEFAULT NULL,
	`masteraccount_restrict` tinyint(1) unsigned DEFAULT NULL,
	`masteraccount_active` tinyint(1) unsigned DEFAULT NULL,
	`masteraccount_oleh` varchar(255) DEFAULT NULL,
	`masteraccounthistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteraccounthistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteraccountsubclass
CREATE TABLE IF NOT EXISTS `masteraccountsubclass` (
	`masteraccountsubclass_id` char(36) NOT NULL,
	`masteraccountclass_id` char(36) NOT NULL,
	`masteraccountsubclass_cashflow` varchar(255) DEFAULT NULL,
	`masteraccountsubclass_subcashflow` varchar(255) DEFAULT NULL,
	`masteraccountsubclass_neraca` tinyint(4) DEFAULT '1',
	`masteraccountsubclass_labarugi` tinyint(4) DEFAULT '1',
	`masteraccountsubclass_description` varchar(255) NOT NULL,
	`masteraccountsubclass_alias` varchar(255) DEFAULT NULL,
	`masteraccountsubclass_active` tinyint(1) unsigned NOT NULL,
	`masteraccountsubclass_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masteraccountsubclass_id`),
	KEY `FK_masteraccountsubclass_masteraccountclass` (`masteraccountclass_id`),
	CONSTRAINT `FK_masteraccountsubclass_masteraccountclass` FOREIGN KEY (`masteraccountclass_id`) REFERENCES `masteraccountclass` (`masteraccountclass_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteraccountsubclasshistory
CREATE TABLE IF NOT EXISTS `masteraccountsubclasshistory` (
	`masteraccountsubclasshistory_id` char(36) NOT NULL,
	`masteraccountsubclasshistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masteraccountsubclass_id` char(36) DEFAULT NULL,
	`masteraccountclass_id` char(36) DEFAULT NULL,
	`masteraccountsubclass_cashflow` varchar(255) DEFAULT NULL,
	`masteraccountsubclass_subcashflow` varchar(255) DEFAULT NULL,
	`masteraccountsubclass_neraca` tinyint(4) DEFAULT '1',
	`masteraccountsubclass_labarugi` tinyint(4) DEFAULT '1',
	`masteraccountsubclass_description` varchar(255) DEFAULT NULL,
	`masteraccountsubclass_alias` varchar(255) DEFAULT NULL,
	`masteraccountsubclass_active` tinyint(1) unsigned DEFAULT NULL,
	`masteraccountsubclass_oleh` varchar(255) DEFAULT NULL,
	`masteraccountsubclasshistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteraccountsubclasshistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterareakecamatan
CREATE TABLE IF NOT EXISTS `masterareakecamatan` (
	`masterareakecamatan_id` char(36) NOT NULL,
	`masterareakota_id` char(36) NOT NULL,
	`masterkecamatan_text` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`masterareakecamatan_id`),
	KEY `FK_masterareakecamatan_masterareakota` (`masterareakota_id`),
	CONSTRAINT `FK_masterareakecamatan_masterareakota` FOREIGN KEY (`masterareakota_id`) REFERENCES `masterareakota` (`masterareakota_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterareakelurahan
CREATE TABLE IF NOT EXISTS `masterareakelurahan` (
	`masterareakelurahan_id` char(36) NOT NULL,
	`masterareakecamatan_id` char(36) NOT NULL,
	`masterareakelurahan_text` varchar(255) DEFAULT NULL,
	`masterareakelurahan_kodepos` varchar(10) DEFAULT NULL,
	PRIMARY KEY (`masterareakelurahan_id`),
	KEY `FK_masterareakelurahan_masterareakecamatan` (`masterareakecamatan_id`),
	CONSTRAINT `FK_masterareakelurahan_masterareakecamatan` FOREIGN KEY (`masterareakecamatan_id`) REFERENCES `masterareakecamatan` (`masterareakecamatan_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterareakota
CREATE TABLE IF NOT EXISTS `masterareakota` (
	`masterareakota_id` char(36) NOT NULL,
	`masterareaprovinsi_id` char(36) NOT NULL,
	`masterareakota_text` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`masterareakota_id`),
	KEY `FK_masterareakota_masterareaprovinsi` (`masterareaprovinsi_id`),
	CONSTRAINT `FK_masterareakota_masterareaprovinsi` FOREIGN KEY (`masterareaprovinsi_id`) REFERENCES `masterareaprovinsi` (`masterareaprovinsi_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterareanegara
CREATE TABLE IF NOT EXISTS `masterareanegara` (
	`masterareanegara_id` char(36) NOT NULL,
	`masterareanegara_matauang` varchar(255) DEFAULT NULL,
	`masterareanegara_text` varchar(255) DEFAULT NULL,
	`masterareanegara_prefix` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`masterareanegara_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterareaprovinsi
CREATE TABLE IF NOT EXISTS `masterareaprovinsi` (
	`masterareaprovinsi_id` char(36) NOT NULL,
	`masterareanegara_id` char(36) NOT NULL,
	`masterareaprovinsi_text` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`masterareaprovinsi_id`),
	KEY `FK_masterareaprovinsi_masterareanegara` (`masterareanegara_id`),
	CONSTRAINT `FK_masterareaprovinsi_masterareanegara` FOREIGN KEY (`masterareanegara_id`) REFERENCES `masterareanegara` (`masterareanegara_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterbussiness
CREATE TABLE IF NOT EXISTS `masterbussiness` (
	`masterbussiness_id` char(36) NOT NULL,
	`masterindustri_id` char(36) NOT NULL,
	`mastertipeusaha_id` char(36) NOT NULL,
	`masterjumlahkaryawan_id` char(36) NOT NULL,
	`masterbussiness_endbilling` bigint(20) unsigned DEFAULT NULL,
	`masterbussiness_jumuser` bigint(20) unsigned DEFAULT NULL,
	`masterbussiness_active` tinyint(1) unsigned NOT NULL,
	`masterbussiness_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masterbussiness_id`),
	KEY `FK_masterbussiness_mastersetup` (`masterindustri_id`),
	KEY `FK_masterbussiness_mastersetup_2` (`mastertipeusaha_id`),
	KEY `FK_masterbussiness_mastersetup_3` (`masterjumlahkaryawan_id`),
	CONSTRAINT `FK_masterbussiness_mastersetup` FOREIGN KEY (`masterindustri_id`) REFERENCES `mastersetup` (`mastersetup_id`),
	CONSTRAINT `FK_masterbussiness_mastersetup_2` FOREIGN KEY (`mastertipeusaha_id`) REFERENCES `mastersetup` (`mastersetup_id`),
	CONSTRAINT `FK_masterbussiness_mastersetup_3` FOREIGN KEY (`masterjumlahkaryawan_id`) REFERENCES `mastersetup` (`mastersetup_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterbussinesshistory
CREATE TABLE IF NOT EXISTS `masterbussinesshistory` (
	`masterbussinesshistory_id` char(36) NOT NULL,
	`masterbussinesshistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterindustri_id` char(36) NOT NULL,
	`mastertipeusaha_id` char(36) NOT NULL,
	`masterjumlahkaryawan_id` char(36) NOT NULL,
	`masterbussiness_active` tinyint(1) unsigned NOT NULL,
	`masterbussiness_oleh` varchar(255) NOT NULL,
	`masterbussinesshistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterbussinesshistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterbussinesstutupbuku
CREATE TABLE IF NOT EXISTS `masterbussinesstutupbuku` (
	`masterbussinesstutupbuku_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterbussinesstutupbuku_periode` bigint(20) unsigned NOT NULL,
	`masterbussinesstutupbuku_status` enum('P', 'C') DEFAULT 'P',
	`masterbussinesstutupbuku_oleh` varchar(255) NOT NULL,
	`masterbussinesstutupbuku_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (
		`masterbussinesstutupbuku_id`,
		`masterbussiness_id`
	),
	KEY `FK_masterbussinesstutupbuku_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterbussinesstutupbuku_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterfixasset
CREATE TABLE IF NOT EXISTS `masterfixasset` (
	`masterfixasset_id` char(36) NOT NULL,
	`masterfixassetcategory_id` char(36) NOT NULL,
	`masterpartner_id` char(36) DEFAULT NULL,
	`masterpartnerjual_id` char(36) DEFAULT NULL,
	`masterstore_id` char(36) DEFAULT NULL,
	`mastertax_id` char(36) DEFAULT NULL,
	`mastertaxjual_id` char(36) DEFAULT NULL,
	`mastercreditterm_id` char(36) DEFAULT NULL,
	`mastercredittermjual_id` char(36) DEFAULT NULL,
	`masteraccountbeli_id` char(36) DEFAULT NULL,
	`masteraccountjual_id` char(36) DEFAULT NULL,
	`trans_id` char(36) DEFAULT NULL,
	`transjual_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterfixasset_description` varchar(255) DEFAULT NULL,
	`masterfixasset_modepenyusutan` tinyint(3) unsigned DEFAULT NULL COMMENT '0 tidak di susutkan\r\n1 SLINE\r\n2 DBAL\r\n3 Sum of The Year Digit Method\r\n4 Service Hours Method\r\n5 Productive Output Method',
	`masterfixasset_serialno` varchar(255) DEFAULT NULL,
	`masterfixasset_tanggalperolehan` bigint(20) unsigned DEFAULT NULL,
	`masterfixasset_tanggalmulaipenyusutan` bigint(20) unsigned DEFAULT NULL,
	`masterfixasset_tanggalterjual` bigint(20) unsigned DEFAULT NULL,
	`masterfixasset_taxrate` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_taxratejual` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_jangkawaktupenyusutan` tinyint(3) unsigned DEFAULT NULL,
	`masterfixasset_ratepenyusutan` float unsigned DEFAULT NULL,
	`masterfixasset_perolehanvalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_susutvalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_taxvalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_taxvaluejual` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_salvagevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_active` tinyint(1) unsigned NOT NULL,
	`masterfixasset_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masterfixasset_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masterplatform` (`masterplatform_id`),
	KEY `FK_masterfixasset_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masterfixasset_masterfixassetcategory` (`masterfixassetcategory_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masterpartner` (`masterpartner_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masterpartner_2` (`masterpartnerjual_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masterother` (`masterstore_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masterother_2` (`mastertax_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masterother_3` (`mastertaxjual_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masterother_4` (`mastercreditterm_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masterother_5` (`mastercredittermjual_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masteraccount` (`masteraccountbeli_id`, `masterbussiness_id`),
	KEY `FK_masterfixasset_masteraccount_2` (`masteraccountjual_id`, `masterbussiness_id`),
	CONSTRAINT `FK_masterfixasset_masteraccount` FOREIGN KEY (`masteraccountbeli_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masteraccount_2` FOREIGN KEY (`masteraccountjual_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterfixassetcategory` FOREIGN KEY (
		`masterfixassetcategory_id`,
		`masterbussiness_id`
	) REFERENCES `masterfixassetcategory` (
		`masterfixassetcategory_id`,
		`masterbussiness_id`
	) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterother` FOREIGN KEY (`masterstore_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterother_2` FOREIGN KEY (`mastertax_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterother_3` FOREIGN KEY (`mastertaxjual_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterother_4` FOREIGN KEY (`mastercreditterm_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterother_5` FOREIGN KEY (`mastercredittermjual_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterpartner` FOREIGN KEY (`masterpartner_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterpartner_2` FOREIGN KEY (`masterpartnerjual_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixasset_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterfixassetcategory
CREATE TABLE IF NOT EXISTS `masterfixassetcategory` (
	`masterfixassetcategory_id` char(36) NOT NULL,
	`masterfixassetcategory_accountasset` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountexpense` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountaccumulation` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountkeuntungan` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountkerugian` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountperawatan` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountmasukan` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountkeluaran` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterfixassetcategory_description` varchar(255) NOT NULL,
	`masterfixassetcategory_active` tinyint(1) unsigned NOT NULL,
	`masterfixassetcategory_oleh` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`masterfixassetcategory_id`, `masterbussiness_id`),
	KEY `FK_masterfixassetcategory_masterplatform` (`masterplatform_id`),
	KEY `FK_masterfixassetcategory_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masterfixassetcategory_masteraccount` (
		`masterfixassetcategory_accountasset`,
		`masterbussiness_id`
	),
	KEY `FK_masterfixassetcategory_masteraccount_2` (
		`masterfixassetcategory_accountexpense`,
		`masterbussiness_id`
	),
	KEY `FK_masterfixassetcategory_masteraccount_3` (
		`masterfixassetcategory_accountaccumulation`,
		`masterbussiness_id`
	),
	KEY `FK_masterfixassetcategory_masteraccount_4` (
		`masterfixassetcategory_accountkeuntungan`,
		`masterbussiness_id`
	),
	KEY `FK_masterfixassetcategory_masteraccount_5` (
		`masterfixassetcategory_accountkerugian`,
		`masterbussiness_id`
	),
	KEY `FK_masterfixassetcategory_masteraccount_6` (
		`masterfixassetcategory_accountperawatan`,
		`masterbussiness_id`
	),
	KEY `FK_masterfixassetcategory_masteraccount_7` (
		`masterfixassetcategory_accountmasukan`,
		`masterbussiness_id`
	),
	KEY `FK_masterfixassetcategory_masteraccount_8` (
		`masterfixassetcategory_accountkeluaran`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_masterfixassetcategory_masteraccount` FOREIGN KEY (
		`masterfixassetcategory_accountasset`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masteraccount_2` FOREIGN KEY (
		`masterfixassetcategory_accountexpense`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masteraccount_3` FOREIGN KEY (
		`masterfixassetcategory_accountaccumulation`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masteraccount_4` FOREIGN KEY (
		`masterfixassetcategory_accountkeuntungan`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masteraccount_5` FOREIGN KEY (
		`masterfixassetcategory_accountkerugian`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masteraccount_6` FOREIGN KEY (
		`masterfixassetcategory_accountperawatan`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masteraccount_7` FOREIGN KEY (
		`masterfixassetcategory_accountmasukan`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masteraccount_8` FOREIGN KEY (
		`masterfixassetcategory_accountkeluaran`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetcategory_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterfixassetcategoryhistory
CREATE TABLE IF NOT EXISTS `masterfixassetcategoryhistory` (
	`masteritemcategoryhistory_id` char(36) NOT NULL,
	`masteritemcategoryhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterfixassetcategory_id` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountasset` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountexpense` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountaccumulation` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountkeuntungan` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountkerugian` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountperawatan` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountmasukan` char(36) DEFAULT NULL,
	`masterfixassetcategory_accountkeluaran` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masterfixassetcategory_description` varchar(255) DEFAULT NULL,
	`masterfixassetcategory_active` tinyint(1) unsigned DEFAULT NULL,
	`masterfixassetcategory_oleh` varchar(255) DEFAULT NULL,
	`masteritemcategoryhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteritemcategoryhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterfixassethistory
CREATE TABLE IF NOT EXISTS `masterfixassethistory` (
	`masterfixassethistory_id` char(36) NOT NULL,
	`masterfixassethistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterfixasset_id` char(36) DEFAULT NULL,
	`masterfixassetcategory_id` char(36) DEFAULT NULL,
	`masterpartner_id` char(36) DEFAULT NULL,
	`masterpartnerjual_id` char(36) DEFAULT NULL,
	`masterstore_id` char(36) DEFAULT NULL,
	`mastertax_id` char(36) DEFAULT NULL,
	`mastertaxjual_id` char(36) DEFAULT NULL,
	`mastercreditterm_id` char(36) DEFAULT NULL,
	`mastercredittermjual_id` char(36) DEFAULT NULL,
	`masteraccountbeli_id` char(36) DEFAULT NULL,
	`masteraccountjual_id` char(36) DEFAULT NULL,
	`trans_id` char(36) DEFAULT NULL,
	`transjual_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masterfixasset_description` varchar(255) DEFAULT NULL,
	`masterfixasset_modepenyusutan` tinyint(3) unsigned DEFAULT NULL COMMENT '0 tidak di susutkan\r\n1 SLINE\r\n2 DBAL\r\n3 Sum of The Year Digit Method\r\n4 Service Hours Method\r\n5 Productive Output Method',
	`masterfixasset_serialno` varchar(255) DEFAULT NULL,
	`masterfixasset_tanggalperolehan` bigint(20) unsigned DEFAULT NULL,
	`masterfixasset_tanggalmulaipenyusutan` bigint(20) unsigned DEFAULT NULL,
	`masterfixasset_tanggalterjual` bigint(20) unsigned DEFAULT NULL,
	`masterfixasset_taxrate` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_taxratejual` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_jangkawaktupenyusutan` tinyint(3) unsigned DEFAULT NULL,
	`masterfixasset_ratepenyusutan` float unsigned DEFAULT NULL,
	`masterfixasset_perolehanvalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_susutvalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_taxvalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_taxvaluejual` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_salvagevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterfixasset_active` tinyint(1) unsigned DEFAULT NULL,
	`masterfixasset_oleh` varchar(255) DEFAULT NULL,
	`masterfixassethistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterfixassethistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterfixassetsusut
CREATE TABLE IF NOT EXISTS `masterfixassetsusut` (
	`masterfixassetsusut_id` char(36) NOT NULL,
	`masterfixasset_id` char(36) NOT NULL,
	`trans_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterfixassetsusut_text` varchar(255) DEFAULT NULL,
	`masterfixassetsusut_type` tinyint(3) unsigned DEFAULT NULL,
	`masterfixassetsusut_depreciationdate` bigint(20) unsigned DEFAULT NULL,
	`masterfixassetsusut_depreciationvalue` decimal(33, 15) DEFAULT NULL,
	`masterfixassetsusut_active` tinyint(1) unsigned NOT NULL,
	`masterfixassetsusut_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masterfixassetsusut_id`, `masterbussiness_id`),
	KEY `FK_masterfixassetsusut_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masterfixassetsusut_masterfixasset` (`masterfixasset_id`, `masterbussiness_id`),
	CONSTRAINT `FK_masterfixassetsusut_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterfixassetsusut_masterfixasset` FOREIGN KEY (`masterfixasset_id`, `masterbussiness_id`) REFERENCES `masterfixasset` (`masterfixasset_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritem
CREATE TABLE IF NOT EXISTS `masteritem` (
	`masteritem_id` char(36) NOT NULL,
	`masteritemparent_id` char(36) DEFAULT NULL,
	`masteritemcategory_id` char(36) DEFAULT NULL,
	`mastertax_id` char(36) DEFAULT NULL,
	`masteruom_id` char(36) DEFAULT NULL,
	`masterbrand_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masteritem_description` varchar(255) NOT NULL,
	`masteritem_alias` varchar(255) DEFAULT NULL,
	`masteritem_catatan` varchar(255) DEFAULT NULL,
	`masteritem_barcode` varchar(255) DEFAULT NULL,
	`masteritem_variantparent` text,
	`masteritem_variantcontent` text,
	`masteritem_isserialbatch` enum('S', 'B', 'N') DEFAULT 'N',
	`masteritem_istara` tinyint(1) unsigned DEFAULT NULL,
	`masteritem_isvariant` enum('Y', 'N', 'C') DEFAULT 'N',
	`masteritem_stockmin` smallint(5) unsigned DEFAULT NULL,
	`masteritem_stockmax` smallint(5) unsigned DEFAULT NULL,
	`masteritem_qtysellmin` decimal(33, 15) unsigned DEFAULT NULL,
	`masteritem_qtysellmax` decimal(33, 15) unsigned DEFAULT NULL,
	`masteritem_priceinputdefault` decimal(33, 15) unsigned DEFAULT NULL,
	`masteritem_active` tinyint(1) unsigned NOT NULL,
	`masteritem_oleh` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`masteritem_id`, `masterbussiness_id`),
	UNIQUE KEY `masterbussiness_id_masteritem_description` (`masterbussiness_id`, `masteritem_description`),
	KEY `FK_masteritem_masterplatform` (`masterplatform_id`),
	KEY `FK_masteritem_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masteritem_masteritem` (`masteritemparent_id`, `masterbussiness_id`),
	KEY `FK_masteritem_masteritemcategory` (`masteritemcategory_id`, `masterbussiness_id`),
	KEY `FK_masteritem_masterother` (`mastertax_id`, `masterbussiness_id`),
	KEY `FK_masteritem_masterother_2` (`masteruom_id`, `masterbussiness_id`),
	KEY `FK_masteritem_masterother_3` (`masterbrand_id`, `masterbussiness_id`),
	CONSTRAINT `FK_masteritem_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritem_masteritem` FOREIGN KEY (`masteritemparent_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritem_masteritemcategory` FOREIGN KEY (`masteritemcategory_id`, `masterbussiness_id`) REFERENCES `masteritemcategory` (`masteritemcategory_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritem_masterother` FOREIGN KEY (`mastertax_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritem_masterother_2` FOREIGN KEY (`masteruom_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritem_masterother_3` FOREIGN KEY (`masterbrand_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritem_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritembilling
CREATE TABLE IF NOT EXISTS `masteritembilling` (
	`masteritembilling_id` char(36) NOT NULL,
	`masteritembilling_description` varchar(255) NOT NULL,
	`masteritembilling_alias` varchar(255) NOT NULL,
	`masteritembilling_freeuser` tinyint(3) unsigned DEFAULT '0',
	`masteritembilling_mode` tinyint(3) unsigned DEFAULT '1' COMMENT '0 addon (bisa choose many)\r\n1 menu utama (hanya bisa pilih 1)',
	`masteritembilling_qty` bigint(20) unsigned DEFAULT '0',
	`masteritembilling_valueinput` decimal(33, 15) unsigned DEFAULT '0.000000000000000',
	`masteritembilling_discinput` decimal(33, 15) DEFAULT '0.000000000000000',
	`masteritembilling_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteritembilling_id`),
	UNIQUE KEY `masteritembilling_description` (`masteritembilling_description`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritemcategory
CREATE TABLE IF NOT EXISTS `masteritemcategory` (
	`masteritemcategory_id` char(36) NOT NULL,
	`masteritemtype_id` char(36) NOT NULL,
	`masteritemcategory_accountpersediaan` char(36) DEFAULT NULL,
	`masteritemcategory_accounthpp` char(36) DEFAULT NULL,
	`masteritemcategory_accountsales` char(36) DEFAULT NULL,
	`masteritemcategory_accountsalesretur` char(36) DEFAULT NULL,
	`masteritemcategory_accountsalesdisc` char(36) DEFAULT NULL,
	`masteritemcategory_accountvatmasuk` char(36) DEFAULT NULL,
	`masteritemcategory_accountvatkeluar` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masteritemcategory_description` varchar(255) NOT NULL,
	`masteritemcategory_active` tinyint(1) unsigned NOT NULL,
	`masteritemcategory_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masteritemcategory_id`, `masterbussiness_id`),
	UNIQUE KEY `masterbussiness_id_masteritemcategory_description` (
		`masterbussiness_id`,
		`masteritemcategory_description`
	),
	KEY `FK_masteritemcategory_masteritemtype` (`masteritemtype_id`, `masterbussiness_id`),
	KEY `FK_masteritemcategory_masterplatform` (`masterplatform_id`),
	KEY `FK_masteritemcategory_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masteritemcategory_masteraccount` (
		`masteritemcategory_accountpersediaan`,
		`masterbussiness_id`
	),
	KEY `FK_masteritemcategory_masteraccount_2` (
		`masteritemcategory_accounthpp`,
		`masterbussiness_id`
	),
	KEY `FK_masteritemcategory_masteraccount_3` (
		`masteritemcategory_accountsales`,
		`masterbussiness_id`
	),
	KEY `FK_masteritemcategory_masteraccount_4` (
		`masteritemcategory_accountsalesretur`,
		`masterbussiness_id`
	),
	KEY `FK_masteritemcategory_masteraccount_5` (
		`masteritemcategory_accountsalesdisc`,
		`masterbussiness_id`
	),
	KEY `FK_masteritemcategory_masteraccount_6` (
		`masteritemcategory_accountvatmasuk`,
		`masterbussiness_id`
	),
	KEY `FK_masteritemcategory_masteraccount_7` (
		`masteritemcategory_accountvatkeluar`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_masteritemcategory_masteraccount` FOREIGN KEY (
		`masteritemcategory_accountpersediaan`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masteraccount_2` FOREIGN KEY (
		`masteritemcategory_accounthpp`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masteraccount_3` FOREIGN KEY (
		`masteritemcategory_accountsales`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masteraccount_4` FOREIGN KEY (
		`masteritemcategory_accountsalesretur`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masteraccount_5` FOREIGN KEY (
		`masteritemcategory_accountsalesdisc`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masteraccount_6` FOREIGN KEY (
		`masteritemcategory_accountvatmasuk`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masteraccount_7` FOREIGN KEY (
		`masteritemcategory_accountvatkeluar`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masteritemtype` FOREIGN KEY (`masteritemtype_id`, `masterbussiness_id`) REFERENCES `masteritemtype` (`masteritemtype_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemcategory_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritemcategoryhistory
CREATE TABLE IF NOT EXISTS `masteritemcategoryhistory` (
	`masteritemcategoryhistory_id` char(36) NOT NULL,
	`masteritemcategoryhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masteritemcategory_id` char(36) DEFAULT NULL,
	`masteritemtype_id` char(36) DEFAULT NULL,
	`masteritemcategory_accountpersediaan` char(36) DEFAULT NULL,
	`masteritemcategory_accounthpp` char(36) DEFAULT NULL,
	`masteritemcategory_accountsales` char(36) DEFAULT NULL,
	`masteritemcategory_accountsalesretur` char(36) DEFAULT NULL,
	`masteritemcategory_accountsalesdisc` char(36) DEFAULT NULL,
	`masteritemcategory_accountvatmasuk` char(36) DEFAULT NULL,
	`masteritemcategory_accountvatkeluar` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masteritemcategory_description` varchar(255) DEFAULT NULL,
	`masteritemcategory_active` tinyint(1) unsigned DEFAULT NULL,
	`masteritemcategory_oleh` varchar(255) DEFAULT NULL,
	`masteritemcategoryhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteritemcategoryhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritemhistory
CREATE TABLE IF NOT EXISTS `masteritemhistory` (
	`masteritemhistory_id` char(36) NOT NULL,
	`masteritemhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masteritem_id` char(36) DEFAULT NULL,
	`masteritemparent_id` char(36) DEFAULT NULL,
	`masteritemcategory_id` char(36) DEFAULT NULL,
	`mastertax_id` char(36) DEFAULT NULL,
	`masteruom_id` char(36) DEFAULT NULL,
	`masterbrand_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masteritem_description` varchar(255) DEFAULT NULL,
	`masteritem_alias` varchar(255) DEFAULT NULL,
	`masteritem_catatan` varchar(255) DEFAULT NULL,
	`masteritem_barcode` varchar(255) DEFAULT NULL,
	`masteritem_variantparent` text,
	`masteritem_variantcontent` text,
	`masteritem_isserialbatch` enum('S', 'B', 'N') DEFAULT 'N',
	`masteritem_istara` tinyint(1) unsigned DEFAULT NULL,
	`masteritem_isvariant` enum('Y', 'N', 'C') DEFAULT 'N',
	`masteritem_stockmin` smallint(5) unsigned DEFAULT NULL,
	`masteritem_stockmax` smallint(5) unsigned DEFAULT NULL,
	`masteritem_qtysellmin` decimal(33, 15) unsigned DEFAULT NULL,
	`masteritem_qtysellmax` decimal(33, 15) unsigned DEFAULT NULL,
	`masteritem_priceinputdefault` decimal(33, 15) unsigned DEFAULT NULL,
	`masteritem_active` tinyint(1) unsigned DEFAULT NULL,
	`masteritem_oleh` varchar(255) DEFAULT NULL,
	`masteritemhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteritemhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritemproperty
CREATE TABLE IF NOT EXISTS `masteritemproperty` (
	`masteritemproperty_id` char(36) NOT NULL,
	`masteritem_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masteritemproperty_refractiveindex_bawah` decimal(20, 6) DEFAULT NULL,
	`masteritemproperty_refractiveindex_atas` decimal(20, 6) DEFAULT NULL,
	`masteritemproperty_specifiggravity_bawah` decimal(20, 6) DEFAULT NULL,
	`masteritemproperty_specifiggravity_atas` decimal(20, 6) DEFAULT NULL,
	`masteritemproperty_odour` varchar(255) DEFAULT NULL,
	`masteritemproperty_matter` varchar(255) DEFAULT NULL,
	`masteritemproperty_colour` varchar(255) DEFAULT NULL,
	`masteritemproperty_solubility` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`masteritemproperty_id`, `masterbussiness_id`),
	UNIQUE KEY `masteritem_id` (`masteritem_id`),
	KEY `FK_masteritemproperty_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_masteritemproperty_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masteritemproperty_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemproperty_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritemtype
CREATE TABLE IF NOT EXISTS `masteritemtype` (
	`masteritemtype_id` char(36) NOT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masteritemtype_description` varchar(255) NOT NULL,
	`masteritemtype_isstock` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_issold` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_ispurchase` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isassembly` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isdissassembly` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_istransfer` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isbeginbalance` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isadjustment` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isformula` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_iscomponent` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_seconduom` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isautoassembly` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_ismodifier` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_active` tinyint(1) unsigned NOT NULL,
	`masteritemtype_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masteritemtype_id`, `masterbussiness_id`),
	UNIQUE KEY `masterbussiness_id_masteritemtype_description` (
		`masterbussiness_id`,
		`masteritemtype_description`
	),
	KEY `FK_masteritemtype_masterplatform` (`masterplatform_id`),
	KEY `FK_masteritemtype_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masteritemtype_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemtype_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritemtypehistory
CREATE TABLE IF NOT EXISTS `masteritemtypehistory` (
	`masteritemtypehistory_id` char(36) NOT NULL,
	`masteritemtypehistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masteritemtype_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masteritemtype_description` varchar(255) DEFAULT NULL,
	`masteritemtype_isstock` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_issold` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_ispurchase` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isassembly` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isdissassembly` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_istransfer` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isbeginbalance` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isadjustment` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isformula` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_iscomponent` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_seconduom` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_isautoassembly` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_ismodifier` tinyint(1) unsigned DEFAULT '1',
	`masteritemtype_active` tinyint(1) unsigned DEFAULT NULL,
	`masteritemtype_oleh` varchar(255) DEFAULT NULL,
	`masteritemtypehistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteritemtypehistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteritemuom
CREATE TABLE IF NOT EXISTS `masteritemuom` (
	`masteritemuom_id` char(36) NOT NULL,
	`masteritem_id` char(36) NOT NULL,
	`masteruom_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masteritemuom_barcode` varchar(255) DEFAULT NULL,
	`masteritemuom_convertionqty` decimal(33, 15) unsigned NOT NULL DEFAULT '0.000000000000000',
	`masteritemuom_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masteritemuom_id`, `masterbussiness_id`),
	UNIQUE KEY `masteritem_id_masteritemuom_convertionqty` (`masteritem_id`, `masteritemuom_convertionqty`),
	KEY `FK_masteritemuom_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_masteritemuom_masterother` (`masteruom_id`, `masterbussiness_id`),
	KEY `FK_masteritemuom_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masteritemuom_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemuom_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteritemuom_masterother` FOREIGN KEY (`masteruom_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterother
CREATE TABLE IF NOT EXISTS `masterother` (
	`masterother_id` char(36) NOT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterother_description` varchar(255) NOT NULL,
	`masterother_alias` varchar(255) DEFAULT NULL,
	`masterother_type` enum(
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9',
		'10',
		'11',
		'12'
	) DEFAULT NULL COMMENT '1 brand\r\n2 kemasan\r\n3 expedisi\r\n4 reason\r\n5 jabatan\r\n6 credit termin\r\n7 uom\r\n8 tax\r\n9 exchange\r\n10 store\r\n11 masterusercategory\r\n12 mode timbangan',
	`masterother_tunjanganjabatan` decimal(33, 15) unsigned DEFAULT NULL,
	`masterother_iscbd` tinyint(1) unsigned DEFAULT NULL,
	`masterother_creditperiod` smallint(5) unsigned DEFAULT NULL,
	`masterother_ispecahan` tinyint(1) unsigned DEFAULT NULL,
	`masterother_taxrate` decimal(33, 15) unsigned DEFAULT NULL,
	`masterother_tara` decimal(33, 15) unsigned DEFAULT NULL,
	`masterother_exchangevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterother_issuperadmin` tinyint(1) unsigned DEFAULT NULL,
	`masterother_isallowhpp` tinyint(1) unsigned DEFAULT NULL,
	`masterother_isallowsalesprice` tinyint(1) unsigned DEFAULT NULL,
	`masterother_modemelihatinputan` tinyint(1) unsigned DEFAULT NULL COMMENT '0 hanya melihat dirinya sendiri\r\n1 boleh melihat siapa saja yang input',
	`masterother_startstring` varchar(50) DEFAULT NULL COMMENT 'startstring timbangan',
	`masterother_endstring` varchar(50) DEFAULT NULL COMMENT 'endstring timbangan',
	`masterother_active` tinyint(1) unsigned NOT NULL,
	`masterother_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masterother_id`, `masterbussiness_id`),
	KEY `FK_masterother_masterplatform` (`masterplatform_id`),
	KEY `FK_masterother_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterother_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterother_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterotherdurasi
CREATE TABLE IF NOT EXISTS `masterotherdurasi` (
	`masterotherdurasi_id` char(36) NOT NULL,
	`masterother_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterotherdurasi_sellquoteubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_sellorderdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_selldeliveryubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_sellubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_sellreturubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_sellpelunasanpiutangubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_purchquoteubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_purchorderdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_purchdeliveryubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_purchubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_purchreturubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_purchpelunasanpiutangubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_assemblyquoteubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_assemblyorderdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_assemblyubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_disassemblyquoteubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_disassemblyorderdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_disassemblyubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_transfergudangquoteubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_transfergudangorderdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_transfergudangubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_jurnalumumubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_aruskeluarubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_arusmasukubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	`masterotherdurasi_setoranubahdurasimenit` decimal(20, 2) unsigned DEFAULT '60.00',
	PRIMARY KEY (`masterotherdurasi_id`, `masterbussiness_id`),
	KEY `FK_masterotherdurasi_masterother` (`masterother_id`, `masterbussiness_id`),
	KEY `FK_masterotherdurasi_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterotherdurasi_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterotherdurasi_masterother` FOREIGN KEY (`masterother_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1 COMMENT = '0 tidak di cek\r\n>0 baru di cek durasi';
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterotherhistory
CREATE TABLE IF NOT EXISTS `masterotherhistory` (
	`masterotherhistory_id` char(36) NOT NULL,
	`masterotherhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterother_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masterother_description` varchar(255) DEFAULT NULL,
	`masterother_alias` varchar(255) DEFAULT NULL,
	`masterother_type` enum(
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9',
		'10',
		'11',
		'12'
	) DEFAULT NULL COMMENT '1 brand\r\n2 kemasan\r\n3 expedisi\r\n4 reason\r\n5 jabatan\r\n6 credit termin\r\n7 uom\r\n8 tax\r\n9 exchange\r\n10 store\r\n11 masterusercategory\r\n12 mode timbangan',
	`masterother_tunjanganjabatan` decimal(33, 15) unsigned DEFAULT NULL,
	`masterother_iscbd` tinyint(1) unsigned DEFAULT NULL,
	`masterother_creditperiod` smallint(5) unsigned DEFAULT NULL,
	`masterother_ispecahan` tinyint(1) unsigned DEFAULT NULL,
	`masterother_taxrate` decimal(33, 15) unsigned DEFAULT NULL,
	`masterother_tara` decimal(33, 15) unsigned DEFAULT NULL,
	`masterother_exchangevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`masterother_issuperuser` tinyint(1) unsigned DEFAULT NULL,
	`masterother_isallowhpp` tinyint(1) unsigned DEFAULT NULL,
	`masterother_isallowsalesprice` tinyint(1) unsigned DEFAULT NULL,
	`masterother_modemelihatinputan` tinyint(1) unsigned DEFAULT NULL COMMENT '0 hanya melihat dirinya sendiri\r\n1 boleh melihat siapa saja yang input',
	`masterother_startstring` varchar(50) DEFAULT NULL COMMENT 'startstring timbangan',
	`masterother_endstring` varchar(50) DEFAULT NULL COMMENT 'endstring timbangan',
	`masterother_active` tinyint(1) unsigned DEFAULT NULL,
	`masterother_oleh` varchar(255) DEFAULT NULL,
	`masterotherhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterotherhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterotherjabatan
CREATE TABLE IF NOT EXISTS `masterotherjabatan` (
	`masterotherjabatan_id` char(36) NOT NULL,
	`masterother_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterotherjabatan_issales` tinyint(1) unsigned DEFAULT '0',
	`masterotherjabatan_isgrader` tinyint(1) unsigned DEFAULT '0',
	PRIMARY KEY (`masterotherjabatan_id`, `masterbussiness_id`),
	KEY `FK_masterotherjabatan_masterother` (`masterother_id`, `masterbussiness_id`),
	KEY `FK_masterotherjabatan_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterotherjabatan_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterotherjabatan_masterother` FOREIGN KEY (`masterother_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpartner
CREATE TABLE IF NOT EXISTS `masterpartner` (
	`masterpartner_id` char(36) NOT NULL,
	`masterpartnercategory_id` char(36) DEFAULT NULL,
	`mastercreditterm_id` char(36) DEFAULT NULL,
	`masterexchange_id` char(36) DEFAULT NULL,
	`masterpartner_staff` char(36) DEFAULT NULL COMMENT 'dalam 1 konsumen ada 1 default seles',
	`masterstore_id` char(36) DEFAULT NULL COMMENT 'kolom sebagai karyawan di store mana',
	`masterfinger_id` char(36) DEFAULT NULL,
	`masterareakota_id` char(36) DEFAULT NULL,
	`masteruser_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterpartner_description` varchar(255) NOT NULL,
	`masterpartner_alias` varchar(255) DEFAULT NULL,
	`masterpartner_email` varchar(255) DEFAULT NULL,
	`masterpartner_limittransaksi` bigint(20) unsigned DEFAULT NULL,
	`masterpartner_limitqtynotaunpaid` tinyint(3) unsigned DEFAULT NULL,
	`masterpartner_limitmaxhari` tinyint(3) unsigned DEFAULT NULL,
	`masterpartner_includeppn` tinyint(1) unsigned DEFAULT NULL,
	`masterpartner_active` tinyint(1) unsigned NOT NULL,
	`masterpartner_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masterpartner_id`, `masterbussiness_id`),
	UNIQUE KEY `masteruser_id_masterbussiness_id` (`masteruser_id`, `masterbussiness_id`),
	KEY `FK_masterpartner_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masterpartner_masterpartnercategory` (`masterpartnercategory_id`, `masterbussiness_id`),
	KEY `FK_masterpartner_masterplatform` (`masterplatform_id`),
	KEY `FK_masterpartner_masterother` (`mastercreditterm_id`, `masterbussiness_id`),
	KEY `FK_masterpartner_masterother_2` (`masterexchange_id`, `masterbussiness_id`),
	KEY `FK_masterpartner_masterpartner` (`masterpartner_staff`, `masterbussiness_id`),
	KEY `FK_masterpartner_masterother_3` (`masterstore_id`, `masterbussiness_id`),
	KEY `FK_masterpartner_masterareakota` (`masterareakota_id`),
	CONSTRAINT `FK_masterpartner_masterareakota` FOREIGN KEY (`masterareakota_id`) REFERENCES `masterareakota` (`masterareakota_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartner_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartner_masterother` FOREIGN KEY (`mastercreditterm_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartner_masterother_2` FOREIGN KEY (`masterexchange_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartner_masterother_3` FOREIGN KEY (`masterstore_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartner_masterpartner` FOREIGN KEY (`masterpartner_staff`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartner_masterpartnercategory` FOREIGN KEY (`masterpartnercategory_id`, `masterbussiness_id`) REFERENCES `masterpartnercategory` (`masterpartnercategory_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartner_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartner_masteruser` FOREIGN KEY (`masteruser_id`) REFERENCES `masteruser` (`masteruser_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpartnercategory
CREATE TABLE IF NOT EXISTS `masterpartnercategory` (
	`masterpartnercategory_id` char(36) NOT NULL,
	`masterjabatan_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterpartnercategory_description` varchar(255) NOT NULL,
	`masterpartnercategory_supplier` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnercategory_customer` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnercategory_karyawan` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnercategory_active` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnercategory_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masterpartnercategory_id`, `masterbussiness_id`),
	KEY `FK_masterpartnercategory_masterplatform` (`masterplatform_id`),
	KEY `FK_masterpartnercategory_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masterpartnercategory_masterother` (`masterjabatan_id`, `masterbussiness_id`),
	CONSTRAINT `FK_masterpartnercategory_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartnercategory_masterother` FOREIGN KEY (`masterjabatan_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartnercategory_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpartnercategoryhistory
CREATE TABLE IF NOT EXISTS `masterpartnercategoryhistory` (
	`masterpartnercategoryhistory_id` char(36) NOT NULL,
	`masterpartnercategoryhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterpartnercategory_id` char(36) DEFAULT NULL,
	`masterjabatan_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masterpartnercategory_description` varchar(255) DEFAULT NULL,
	`masterpartnercategory_supplier` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnercategory_customer` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnercategory_karyawan` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnercategory_active` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnercategory_oleh` varchar(255) DEFAULT NULL,
	`masterpartnercategoryhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterpartnercategoryhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpartneremployee
CREATE TABLE IF NOT EXISTS `masterpartneremployee` (
	`masterpartneremployee_id` char(36) NOT NULL,
	`masterpartner_id` char(36) DEFAULT NULL,
	`masterjabatan_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterpartneremployee_statusptkp` varchar(255) DEFAULT NULL COMMENT 'contoh: tk0 tk1 tk2 k1 k2 dst',
	`masterpartneremployee_sex` varchar(255) DEFAULT NULL,
	`masterpartneremployee_birthday` date DEFAULT NULL,
	`masterpartneremployee_hiredate` bigint(20) unsigned DEFAULT NULL,
	`masterpartneremployee_unhiredate` bigint(20) unsigned DEFAULT NULL,
	`masterpartneremployee_posisi` varchar(255) DEFAULT NULL COMMENT 'pegawai_tetap,out_source,buruh_harian',
	`masterpartneremployee_durasikerja` decimal(33, 15) unsigned DEFAULT NULL,
	`masterpartneremployee_benefit1` decimal(33, 15) unsigned DEFAULT NULL COMMENT 'rajin',
	`masterpartneremployee_benefit2` decimal(33, 15) unsigned DEFAULT NULL COMMENT 'makan',
	`masterpartneremployee_benefit3` decimal(33, 15) unsigned DEFAULT NULL COMMENT 'transport',
	`masterpartneremployee_benefit4` decimal(33, 15) unsigned DEFAULT NULL COMMENT 'kesehatan',
	`masterpartneremployee_benefit5` decimal(33, 15) unsigned DEFAULT NULL,
	`masterpartneremployee_deduction1` decimal(33, 15) unsigned DEFAULT NULL COMMENT 'penalty',
	`masterpartneremployee_deduction2` decimal(33, 15) unsigned DEFAULT NULL,
	`masterpartneremployee_deduction3` decimal(33, 15) unsigned DEFAULT NULL,
	`masterpartneremployee_deduction4` decimal(33, 15) unsigned DEFAULT NULL,
	`masterpartneremployee_deduction5` decimal(33, 15) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterpartneremployee_id`, `masterbussiness_id`),
	UNIQUE KEY `masterpartner_id` (`masterpartner_id`),
	KEY `FK_masterpartneremployee_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masterpartneremployee_masterpartner` (`masterpartner_id`, `masterbussiness_id`),
	KEY `FK_masterpartneremployee_masterother` (`masterjabatan_id`, `masterbussiness_id`),
	CONSTRAINT `FK_masterpartneremployee_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartneremployee_masterother` FOREIGN KEY (`masterjabatan_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartneremployee_masterpartner` FOREIGN KEY (`masterpartner_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpartnerhistory
CREATE TABLE IF NOT EXISTS `masterpartnerhistory` (
	`masterpartnerhistory_id` char(36) NOT NULL,
	`masterpartnerhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterpartner_id` char(36) DEFAULT NULL,
	`masterpartnercategory_id` char(36) DEFAULT NULL,
	`mastercreditterm_id` char(36) DEFAULT NULL,
	`masterexchange_id` char(36) DEFAULT NULL,
	`masterpartner_staff` char(36) DEFAULT NULL COMMENT 'dalam 1 konsumen ada 1 default seles',
	`masterstore_id` char(36) DEFAULT NULL COMMENT 'kolom sebagai karyawan di store mana',
	`masterfinger_id` char(36) DEFAULT NULL,
	`masterareakota_id` char(36) DEFAULT NULL,
	`masteruser_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masterpartner_description` varchar(255) DEFAULT NULL,
	`masterpartner_alias` varchar(255) DEFAULT NULL,
	`masterpartner_email` varchar(255) DEFAULT NULL,
	`masterpartner_limittransaksi` bigint(20) unsigned DEFAULT NULL,
	`masterpartner_limitqtynotaunpaid` tinyint(3) unsigned DEFAULT NULL,
	`masterpartner_limitmaxhari` tinyint(3) unsigned DEFAULT NULL,
	`masterpartner_includeppn` tinyint(1) unsigned DEFAULT NULL,
	`masterpartner_active` tinyint(1) unsigned DEFAULT NULL,
	`masterpartner_oleh` varchar(255) DEFAULT NULL,
	`masterpartnerhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterpartnerhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpartnerpajak
CREATE TABLE IF NOT EXISTS `masterpartnerpajak` (
	`masterpartnerpajak_id` char(36) NOT NULL,
	`masterpartner_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterpartnerpajak_nomornpwp` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_namanpwp` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_alamatnpwp` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_blok` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_nomor` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_rt` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_rw` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_kecamatan` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_kelurahan` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_kabupaten` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_provinsi` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_kodepos` varchar(255) DEFAULT NULL,
	`masterpartnerpajak_opsifaktur` enum('KTP', 'NPWP', 'BELUM DI ATUR') DEFAULT 'BELUM DI ATUR',
	PRIMARY KEY (`masterpartnerpajak_id`, `masterbussiness_id`) USING BTREE,
	UNIQUE KEY `masterpartner_id` (`masterpartner_id`),
	KEY `FK__masterpartner` (`masterpartner_id`, `masterbussiness_id`),
	KEY `FK__masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK__masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK__masterpartner` FOREIGN KEY (`masterpartner_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpartnersupport
CREATE TABLE IF NOT EXISTS `masterpartnersupport` (
	`masterpartnersupport_id` char(36) NOT NULL,
	`masterpartner_id` char(36) NOT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterpartnersupport_type` enum('1', '2', '3', '4', '5') DEFAULT NULL COMMENT '1 alamat\r\n2 telp,email,fax\r\n3 kontak person\r\n4 rekening\r\n5 catatan',
	`masterpartnersupport_description` text,
	`masterpartnersupport_blok` varchar(255) DEFAULT NULL,
	`masterpartnersupport_nomor` varchar(255) DEFAULT NULL,
	`masterpartnersupport_rt` varchar(255) DEFAULT NULL,
	`masterpartnersupport_rw` varchar(255) DEFAULT NULL,
	`masterpartnersupport_kecamatan` varchar(255) DEFAULT NULL,
	`masterpartnersupport_kelurahan` varchar(255) DEFAULT NULL,
	`masterpartnersupport_kabupaten` varchar(255) DEFAULT NULL,
	`masterpartnersupport_provinsi` varchar(255) DEFAULT NULL,
	`masterpartnersupport_kodepos` varchar(255) DEFAULT NULL,
	`masterpartnersupport_active` tinyint(1) unsigned NOT NULL,
	`masterpartnersupport_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masterpartnersupport_id`, `masterbussiness_id`),
	KEY `FK_masterpartnersupport_masterpartner` (`masterpartner_id`, `masterbussiness_id`),
	KEY `FK_masterpartnersupport_masterplatform` (`masterplatform_id`),
	KEY `FK_masterpartnersupport_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterpartnersupport_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartnersupport_masterpartner` FOREIGN KEY (`masterpartner_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpartnersupport_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpartnersupporthistory
CREATE TABLE IF NOT EXISTS `masterpartnersupporthistory` (
	`masterpartnersupporthistory_id` char(36) NOT NULL,
	`masterpartnersupporthistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterpartnersupport_id` char(36) DEFAULT NULL,
	`masterpartner_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masterpartnersupport_type` enum('1', '2', '3', '4', '5') DEFAULT NULL COMMENT '1 alamat\r\n2 telp,email,fax\r\n3 kontak person\r\n4 rekening\r\n5 catatan',
	`masterpartnersupport_description` text,
	`masterpartnersupport_blok` varchar(255) DEFAULT NULL,
	`masterpartnersupport_nomor` varchar(255) DEFAULT NULL,
	`masterpartnersupport_rt` varchar(255) DEFAULT NULL,
	`masterpartnersupport_rw` varchar(255) DEFAULT NULL,
	`masterpartnersupport_kecamatan` varchar(255) DEFAULT NULL,
	`masterpartnersupport_kelurahan` varchar(255) DEFAULT NULL,
	`masterpartnersupport_kabupaten` varchar(255) DEFAULT NULL,
	`masterpartnersupport_provinsi` varchar(255) DEFAULT NULL,
	`masterpartnersupport_kodepos` varchar(255) DEFAULT NULL,
	`masterpartnersupport_active` tinyint(1) unsigned DEFAULT NULL,
	`masterpartnersupport_oleh` varchar(255) DEFAULT NULL,
	`masterpartnersupporthistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterpartnersupporthistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterpayment
CREATE TABLE IF NOT EXISTS `masterpayment` (
	`masterpayment_id` char(36) NOT NULL,
	`masteraccount_id` char(36) NOT NULL,
	`masterstore_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterpayment_description` text,
	`masterpayment_cardcharges` decimal(20, 6) DEFAULT '0.000000',
	`masterpayment_active` tinyint(3) unsigned DEFAULT NULL,
	`masterpayment_oleh` text,
	PRIMARY KEY (`masterpayment_id`, `masterbussiness_id`),
	KEY `FK_masterpayment_masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	KEY `FK_masterpayment_masterother` (`masterstore_id`, `masterbussiness_id`),
	KEY `FK_masterpayment_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterpayment_masteraccount` FOREIGN KEY (`masteraccount_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpayment_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterpayment_masterother` FOREIGN KEY (`masterstore_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterplatform
CREATE TABLE IF NOT EXISTS `masterplatform` (
	`masterplatform_id` char(36) NOT NULL,
	`masterplatform_description` varchar(255) DEFAULT NULL,
	`masterplatform_active` tinyint(1) unsigned NOT NULL,
	`masterplatform_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`masterplatform_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterplatformhistory
CREATE TABLE IF NOT EXISTS `masterplatformhistory` (
	`masterplatformhistory_id` char(36) NOT NULL,
	`masterplatformhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterplatform_description` varchar(255) DEFAULT NULL,
	`masterplatform_active` tinyint(1) unsigned DEFAULT NULL,
	`masterplatform_oleh` varchar(255) DEFAULT NULL,
	`masterplatformhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterplatformhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterprefix
CREATE TABLE IF NOT EXISTS `masterprefix` (
	`masterprefix_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterprefix_prefix` varchar(10) NOT NULL,
	`masterprefix_digit` tinyint(4) DEFAULT '8',
	`masterprefix_type` tinyint(4) NOT NULL,
	`masterprefix_kelompok` enum(
		'PEMBELIAN',
		'SALDO AWAL',
		'PENJUALAN',
		'INVENTORY',
		'PRODUCTION',
		'AKTIVA TETAP',
		'JURNAL'
	) NOT NULL,
	`masterprefix_description` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`masterprefix_id`, `masterbussiness_id`),
	UNIQUE KEY `masterbussiness_id_masterprefix_type` (`masterbussiness_id`, `masterprefix_type`),
	UNIQUE KEY `masterbussiness_id_masterprefix_prefix` (`masterbussiness_id`, `masterprefix_prefix`),
	KEY `FK_masterprefix_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterprefix_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterrole
CREATE TABLE IF NOT EXISTS `masterrole` (
	`masterrole_id` char(36) NOT NULL,
	`masterrole_parent_id` char(36) DEFAULT NULL,
	`masterrole_description` varchar(255) DEFAULT NULL,
	`masterrole_descriptioneng` varchar(255) DEFAULT NULL,
	`masterrole_alias` varchar(255) DEFAULT NULL,
	`masterrole_url` text,
	`masterrole_favourite` tinyint(1) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterrole_id`),
	KEY `FK_masterrole_masterrole` (`masterrole_parent_id`),
	CONSTRAINT `FK_masterrole_masterrole` FOREIGN KEY (`masterrole_parent_id`) REFERENCES `masterrole` (`masterrole_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterrolefahrur
CREATE TABLE IF NOT EXISTS `masterrolefahrur` (
	`masterrole_id` char(36) NOT NULL,
	`masterrole_parent_id` char(36) DEFAULT NULL,
	`masterrole_description` varchar(255) DEFAULT NULL,
	`masterrole_descriptioneng` varchar(255) DEFAULT NULL,
	`masterrole_alias` varchar(255) DEFAULT NULL,
	`masterrole_url` text,
	`masterrole_favourite` tinyint(1) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterrole_id`),
	KEY `FK_masterrolefahrur_masterrolefahrur` (`masterrole_parent_id`),
	CONSTRAINT `FK_masterrolefahrur_masterrolefahrur` FOREIGN KEY (`masterrole_parent_id`) REFERENCES `masterrolefahrur` (`masterrole_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1 ROW_FORMAT = DYNAMIC;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterroleother
CREATE TABLE IF NOT EXISTS `masterroleother` (
	`masterroleother_id` char(36) NOT NULL,
	`masterroleotherparent_id` char(36) DEFAULT NULL,
	`masterroleother_bagian` enum(
		'RENCANA',
		'TRANS',
		'MASTER',
		'LAPORAN',
		'VISIBLE',
		'ENABLE',
		'AKSES'
	) DEFAULT NULL,
	`masterroleother_description` varchar(255) DEFAULT NULL,
	`masterroleother_visible` tinyint(1) unsigned DEFAULT '1',
	PRIMARY KEY (`masterroleother_id`),
	KEY `FK_masterroleother_masterroleother` (`masterroleotherparent_id`),
	CONSTRAINT `FK_masterroleother_masterroleother` FOREIGN KEY (`masterroleotherparent_id`) REFERENCES `masterroleother` (`masterroleother_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.mastersetup
CREATE TABLE IF NOT EXISTS `mastersetup` (
	`mastersetup_id` char(36) NOT NULL,
	`mastersetup_type` enum('1', '2', '3', '4', '5') NOT NULL COMMENT '1	tipe bisnis\r\n2	tipe industri\r\n3	jumlah karyawan',
	`mastersetup_description` varchar(255) DEFAULT NULL,
	`mastersetup_nilai` varchar(255) DEFAULT NULL,
	PRIMARY KEY (`mastersetup_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteruser
CREATE TABLE IF NOT EXISTS `masteruser` (
	`masteruser_id` char(36) NOT NULL,
	`masteruser_email` varchar(255) NOT NULL,
	`masteruser_username` varchar(255) DEFAULT NULL,
	`masteruser_password` text,
	`masteruser_otherpassword` text,
	`masteruser_nama` text NOT NULL,
	`masteruser_telp` text,
	`masteruser_isverifikasi` tinyint(1) unsigned DEFAULT '0',
	`masteruser_referal` varchar(255) DEFAULT NULL,
	`masteruser_superuser` tinyint(1) unsigned DEFAULT '0' COMMENT 'jika 1 then bisa buat bisnis baru dan bisa invite',
	`masteruser_kodeotp` varchar(50) DEFAULT NULL,
	`masteruser_expiredotp` bigint(20) unsigned DEFAULT NULL,
	`masteruser_active` tinyint(1) unsigned NOT NULL,
	`masteruser_createdate` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masteruser_id`),
	UNIQUE KEY `masteruser_email` (`masteruser_email`),
	UNIQUE KEY `masteruser_username` (`masteruser_username`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteruserbussiness
CREATE TABLE IF NOT EXISTS `masteruserbussiness` (
	`masteruserbussiness_id` char(36) NOT NULL,
	`masteruser_id` char(36) NOT NULL,
	`masterusercategory_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masteruserbussiness_active` tinyint(1) unsigned NOT NULL,
	PRIMARY KEY (`masteruserbussiness_id`, `masterbussiness_id`),
	KEY `FK_masteruserbussiness_masteruser` (`masteruser_id`),
	KEY `FK_masteruserbussiness_masterother` (`masterusercategory_id`, `masterbussiness_id`),
	KEY `FK_masteruserbussiness_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masteruserbussiness_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteruserbussiness_masterother` FOREIGN KEY (`masterusercategory_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteruserbussiness_masteruser` FOREIGN KEY (`masteruser_id`) REFERENCES `masteruser` (`masteruser_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteruserbussinessline
CREATE TABLE IF NOT EXISTS `masteruserbussinessline` (
	`masteruserbussinessline_id` char(36) NOT NULL,
	`masteruserbussiness_id` char(36) NOT NULL,
	`masterwarehouse_id` char(36) NOT NULL,
	`masterstore_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masteruserbussinessline_default` tinyint(1) unsigned NOT NULL,
	PRIMARY KEY (
		`masteruserbussinessline_id`,
		`masterbussiness_id`
	),
	KEY `FK_masteruserbussinessline_masteruserbussiness` (`masteruserbussiness_id`, `masterbussiness_id`),
	KEY `FK_masteruserbussinessline_masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	),
	KEY `FK_masteruserbussinessline_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masteruserbussinessline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteruserbussinessline_masteruserbussiness` FOREIGN KEY (`masteruserbussiness_id`, `masterbussiness_id`) REFERENCES `masteruserbussiness` (`masteruserbussiness_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteruserbussinessline_masterwarehouse` FOREIGN KEY (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	) REFERENCES `masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masteruserbussinessrole
CREATE TABLE IF NOT EXISTS `masteruserbussinessrole` (
	`masteruserbussinessrole_id` char(36) NOT NULL,
	`masterrole_id` char(36) DEFAULT NULL,
	`masterroleother_id` char(36) DEFAULT NULL,
	`masterusercategory_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (
		`masteruserbussinessrole_id`,
		`masterbussiness_id`
	),
	KEY `FK_masteruserbussinessrole_masterbussiness` (`masterbussiness_id`),
	KEY `FK_masteruserbussinessrole_masterother` (`masterusercategory_id`, `masterbussiness_id`),
	KEY `FK_masteruserbussinessrole_masterrole` (`masterrole_id`),
	CONSTRAINT `FK_masteruserbussinessrole_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteruserbussinessrole_masterother` FOREIGN KEY (`masterusercategory_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masteruserbussinessrole_masterrole` FOREIGN KEY (`masterrole_id`) REFERENCES `masterrole` (`masterrole_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterusercategoryrule
CREATE TABLE IF NOT EXISTS `masterusercategoryrule` (
	`masterusercategoryrule_id` char(36) NOT NULL,
	`masterusercategory_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterusercategoryrule_typeakun` enum('Semua', 'Tertentu', 'Kecuali') DEFAULT 'Semua',
	PRIMARY KEY (`masterusercategoryrule_id`, `masterbussiness_id`),
	KEY `FK_masterusercategoryrule_masterother` (`masterusercategory_id`, `masterbussiness_id`),
	KEY `FK_masterusercategoryrule_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterusercategoryrule_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterusercategoryrule_masterother` FOREIGN KEY (`masterusercategory_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterusercategoryruleline
CREATE TABLE IF NOT EXISTS `masterusercategoryruleline` (
	`masterusercategoryruleline_id` char(36) NOT NULL,
	`masterusercategoryrule_id` char(36) NOT NULL,
	`masteraccount_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (
		`masterusercategoryruleline_id`,
		`masterbussiness_id`
	),
	KEY `FK_masterusercategoryruleline_masterusercategoryrule` (`masterusercategoryrule_id`, `masterbussiness_id`),
	KEY `FK_masterusercategoryruleline_masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	KEY `FK_masterusercategoryruleline_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterusercategoryruleline_masteraccount` FOREIGN KEY (`masteraccount_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterusercategoryruleline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterusercategoryruleline_masterusercategoryrule` FOREIGN KEY (
		`masterusercategoryrule_id`,
		`masterbussiness_id`
	) REFERENCES `masterusercategoryrule` (
		`masterusercategoryrule_id`,
		`masterbussiness_id`
	) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterwarehouse
CREATE TABLE IF NOT EXISTS `masterwarehouse` (
	`masterwarehouse_id` char(36) NOT NULL,
	`masterstore_id` char(36) NOT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`masterwarehouse_description` varchar(255) NOT NULL,
	`masterwarehouse_active` tinyint(1) unsigned NOT NULL,
	`masterwarehouse_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	),
	KEY `FK_masterwarehouse_masterother` (`masterstore_id`, `masterbussiness_id`),
	KEY `FK_masterwarehouse_masterplatform` (`masterplatform_id`),
	KEY `FK_masterwarehouse_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_masterwarehouse_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterwarehouse_masterother` FOREIGN KEY (`masterstore_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_masterwarehouse_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.masterwarehousehistory
CREATE TABLE IF NOT EXISTS `masterwarehousehistory` (
	`masterwarehousehistory_id` char(36) NOT NULL,
	`masterwarehousehistory_mode` enum('I', 'U', 'D') NOT NULL,
	`masterwarehouse_id` char(36) DEFAULT NULL,
	`masterstore_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`masterwarehouse_description` varchar(255) DEFAULT NULL,
	`masterwarehouse_active` tinyint(1) unsigned DEFAULT NULL,
	`masterwarehouse_oleh` varchar(255) DEFAULT NULL,
	`masterwarehousehistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`masterwarehousehistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.price
CREATE TABLE IF NOT EXISTS `price` (
	`price_id` char(36) NOT NULL,
	`masterexchange_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`price_description` varchar(255) NOT NULL,
	`price_mode` enum('1', '2', '3', '4', '5', '6', '7') DEFAULT '1' COMMENT '1	harga tetap\r\n2	diskon dari harga standard dari mode 1\r\n3	naikkan dari harga beli akhir\r\n4	naikkan dari hpp\r\n5	margin dari beli akhir\r\n6	margin dari hpp\r\n7	bebas (terdapat pricemin dan pricemax)',
	`price_ispersen` tinyint(1) unsigned DEFAULT '0' COMMENT 'bisa disc ataupun harga (baik persen ataupun nilai langsung)',
	`price_start` bigint(20) unsigned DEFAULT NULL,
	`price_end` bigint(20) unsigned DEFAULT NULL,
	`price_default` tinyint(1) unsigned DEFAULT NULL,
	`price_issemuastore` tinyint(1) unsigned DEFAULT '1',
	`price_issemuapartnercategory` tinyint(1) unsigned DEFAULT '1',
	`price_oleh` varchar(255) NOT NULL,
	`price_active` tinyint(1) unsigned NOT NULL,
	PRIMARY KEY (`price_id`, `masterbussiness_id`),
	KEY `FK_price_masterbussiness` (`masterbussiness_id`),
	KEY `FK_price_masterother` (`masterexchange_id`, `masterbussiness_id`),
	CONSTRAINT `FK_price_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_price_masterother` FOREIGN KEY (`masterexchange_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.pricehistory
CREATE TABLE IF NOT EXISTS `pricehistory` (
	`pricehistory_id` char(36) NOT NULL,
	`pricehistory_mode` enum('I', 'U', 'D') NOT NULL,
	`price_id` char(36) NOT NULL,
	`masterexchange_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`price_description` varchar(255) NOT NULL,
	`price_mode` enum('1', '2', '3', '4', '5', '6', '7') DEFAULT '1' COMMENT '1	harga tetap\r\n2	diskon dari harga standard dari mode 1\r\n3	naikkan dari harga beli akhir\r\n4	naikkan dari hpp\r\n5	margin dari beli akhir\r\n6	margin dari hpp\r\n7	bebas (terdapat pricemin dan pricemax)',
	`price_ispersen` tinyint(1) unsigned DEFAULT '0' COMMENT 'bisa disc ataupun harga (baik persen ataupun nilai langsung)',
	`price_start` bigint(20) unsigned DEFAULT NULL,
	`price_end` bigint(20) unsigned DEFAULT NULL,
	`price_default` tinyint(1) unsigned DEFAULT NULL,
	`price_issemuastore` tinyint(1) unsigned DEFAULT '1',
	`price_issemuapartnercategory` tinyint(1) unsigned DEFAULT '1',
	`price_oleh` varchar(255) NOT NULL,
	`price_active` tinyint(1) unsigned NOT NULL,
	`pricehistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`pricehistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.priceline
CREATE TABLE IF NOT EXISTS `priceline` (
	`priceline_id` char(36) NOT NULL,
	`price_id` char(36) NOT NULL,
	`masteritemuom_id` char(36) NOT NULL,
	`masteraccountincomecashback_id` char(36) DEFAULT NULL,
	`masteraccountpiutangcashback_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`priceline_description` varchar(255) DEFAULT NULL,
	`priceline_mode` enum('1', '2', '3', '4', '5', '6', '7') DEFAULT '1' COMMENT '1	harga tetap\r\n2	diskon dari harga standard dari mode 1\r\n3	naikkan dari harga beli akhir\r\n4	naikkan dari hpp\r\n5	margin dari beli akhir\r\n6	margin dari hpp\r\n7	bebas (terdapat pricemin dan pricemax)',
	`priceline_qtyinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_convertionqty` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_qty` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_valueinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_valuemininput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_valuemaxinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_price` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_discinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_disc` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_maxdiscinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_maxdisc` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_active` tinyint(1) unsigned NOT NULL,
	`priceline_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`priceline_id`, `masterbussiness_id`),
	KEY `FK_priceline_price` (`price_id`, `masterbussiness_id`),
	KEY `FK_priceline_masteritemuom` (`masteritemuom_id`, `masterbussiness_id`),
	KEY `FK_priceline_masterbussiness` (`masterbussiness_id`),
	KEY `FK_priceline_masteraccount` (
		`masteraccountincomecashback_id`,
		`masterbussiness_id`
	),
	KEY `FK_priceline_masteraccount_2` (
		`masteraccountpiutangcashback_id`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_priceline_masteraccount` FOREIGN KEY (
		`masteraccountincomecashback_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_priceline_masteraccount_2` FOREIGN KEY (
		`masteraccountpiutangcashback_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_priceline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_priceline_masteritemuom` FOREIGN KEY (`masteritemuom_id`, `masterbussiness_id`) REFERENCES `masteritemuom` (`masteritemuom_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_priceline_price` FOREIGN KEY (`price_id`, `masterbussiness_id`) REFERENCES `price` (`price_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.pricelinehistory
CREATE TABLE IF NOT EXISTS `pricelinehistory` (
	`pricelinehistory_id` char(36) NOT NULL,
	`pricehistory_id` char(36) DEFAULT NULL,
	`pricelinehistory_mode` enum('I', 'U', 'D') NOT NULL,
	`priceline_id` char(36) NOT NULL,
	`price_id` char(36) NOT NULL,
	`masteritemuom_id` char(36) NOT NULL,
	`masteraccountincomecashback_id` char(36) DEFAULT NULL,
	`masteraccountpiutangcashback_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`priceline_description` varchar(255) DEFAULT NULL,
	`priceline_mode` enum('1', '2', '3', '4', '5', '6', '7') DEFAULT '1' COMMENT '1	harga tetap\r\n2	diskon dari harga standard dari mode 1\r\n3	naikkan dari harga beli akhir\r\n4	naikkan dari hpp\r\n5	margin dari beli akhir\r\n6	margin dari hpp\r\n7	bebas (terdapat pricemin dan pricemax)',
	`priceline_qtyinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_convertionqty` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_qty` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_valueinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_valuemininput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_valuemaxinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_price` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_discinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_disc` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_maxdiscinput` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_maxdisc` decimal(33, 15) unsigned DEFAULT NULL,
	`priceline_active` tinyint(1) unsigned NOT NULL,
	`priceline_oleh` varchar(255) NOT NULL,
	`pricelinehistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`pricelinehistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.pricepartnercategory
CREATE TABLE IF NOT EXISTS `pricepartnercategory` (
	`pricepartnercategory_id` char(36) NOT NULL,
	`price_id` char(36) NOT NULL,
	`masterpartnercategory_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (`pricepartnercategory_id`, `masterbussiness_id`),
	KEY `FK_pricepartnercategory_masterbussiness` (`masterbussiness_id`),
	KEY `FK_pricepartnercategory_price` (`price_id`, `masterbussiness_id`),
	KEY `FK_pricepartnercategory_masterpartnercategory` (`masterpartnercategory_id`, `masterbussiness_id`),
	CONSTRAINT `FK_pricepartnercategory_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_pricepartnercategory_masterpartnercategory` FOREIGN KEY (`masterpartnercategory_id`, `masterbussiness_id`) REFERENCES `masterpartnercategory` (`masterpartnercategory_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_pricepartnercategory_price` FOREIGN KEY (`price_id`, `masterbussiness_id`) REFERENCES `price` (`price_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.pricestore
CREATE TABLE IF NOT EXISTS `pricestore` (
	`pricestore_id` char(36) NOT NULL,
	`price_id` char(36) NOT NULL,
	`masterstore_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	PRIMARY KEY (`pricestore_id`, `masterbussiness_id`),
	KEY `FK_pricestore_price` (`price_id`, `masterbussiness_id`),
	KEY `FK_pricestore_masterother` (`masterstore_id`, `masterbussiness_id`),
	KEY `FK_pricestore_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_pricestore_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_pricestore_masterother` FOREIGN KEY (`masterstore_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_pricestore_price` FOREIGN KEY (`price_id`, `masterbussiness_id`) REFERENCES `price` (`price_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.prod
CREATE TABLE IF NOT EXISTS `prod` (
	`prod_id` char(36) NOT NULL,
	`masteritem_id` char(36) NOT NULL,
	`masteritemuom_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`prod_qtyinput` decimal(33, 15) unsigned NOT NULL DEFAULT '0.000000000000000',
	`prod_isallowadditem` tinyint(1) unsigned DEFAULT '1',
	`prod_isjumlahkan` tinyint(1) unsigned DEFAULT '1',
	`prod_active` tinyint(1) unsigned NOT NULL,
	`prod_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`prod_id`, `masterbussiness_id`),
	KEY `FK_prod_masterplatform` (`masterplatform_id`),
	KEY `FK_prod_masterbussiness` (`masterbussiness_id`),
	KEY `FK_prod_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_prod_masteritemuom` (`masteritemuom_id`, `masterbussiness_id`),
	CONSTRAINT `FK_prod_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_prod_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_prod_masteritemuom` FOREIGN KEY (`masteritemuom_id`, `masterbussiness_id`) REFERENCES `masteritemuom` (`masteritemuom_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_prod_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.prodhistory
CREATE TABLE IF NOT EXISTS `prodhistory` (
	`prodhistory_id` char(36) NOT NULL,
	`prodhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`prod_id` char(36) DEFAULT NULL,
	`masteritem_id` char(36) DEFAULT NULL,
	`masteritemuom_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`prod_qtyinput` decimal(33, 15) unsigned DEFAULT '0.000000000000000',
	`prod_isallowadditem` tinyint(1) unsigned DEFAULT '1',
	`prod_isjumlahkan` tinyint(1) unsigned DEFAULT '1',
	`prod_active` tinyint(1) unsigned DEFAULT NULL,
	`prod_oleh` varchar(255) DEFAULT NULL,
	`prodhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`prodhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.prodline
CREATE TABLE IF NOT EXISTS `prodline` (
	`prodline_id` char(36) NOT NULL,
	`prod_id` char(36) NOT NULL,
	`masteritemuom_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`prodline_qtyused` decimal(33, 15) unsigned DEFAULT NULL,
	`prodline_maxqtyused` decimal(33, 15) unsigned DEFAULT NULL,
	`prodline_distribusidisassembly` decimal(33, 15) unsigned DEFAULT NULL,
	`prodline_uncertainty` tinyint(2) unsigned DEFAULT NULL COMMENT '1	fix, tidak boleh dirubah-ubah\r\n2	min max\r\n3	free, bebas ngisi qty berapapun',
	PRIMARY KEY (`prodline_id`, `masterbussiness_id`),
	UNIQUE KEY `prod_id_masteritemuom_id_masterbussiness_id` (
		`prod_id`,
		`masteritemuom_id`,
		`masterbussiness_id`
	),
	KEY `FK_prodline_prod` (`prod_id`, `masterbussiness_id`),
	KEY `FK_prodline_masteritemuom` (`masteritemuom_id`, `masterbussiness_id`),
	KEY `FK_prodline_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_prodline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_prodline_masteritemuom` FOREIGN KEY (`masteritemuom_id`, `masterbussiness_id`) REFERENCES `masteritemuom` (`masteritemuom_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_prodline_prod` FOREIGN KEY (`prod_id`, `masterbussiness_id`) REFERENCES `prod` (`prod_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.prodlinehistory
CREATE TABLE IF NOT EXISTS `prodlinehistory` (
	`prodlinehistory_id` char(36) NOT NULL,
	`prodlinehistory_mode` enum('I', 'U', 'D') NOT NULL,
	`prodhistory_id` char(36) DEFAULT NULL,
	`prodline_id` char(36) DEFAULT NULL,
	`prod_id` char(36) DEFAULT NULL,
	`masteritemuom_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`prodline_qtyused` decimal(33, 15) unsigned DEFAULT NULL,
	`prodline_maxqtyused` decimal(33, 15) unsigned DEFAULT NULL,
	`prodline_distribusidisassembly` decimal(33, 15) unsigned DEFAULT NULL,
	`prodline_uncertainty` tinyint(1) unsigned DEFAULT NULL COMMENT '1	fix, tidak boleh dirubah-ubah\r\n2	min max\r\n3	free, bebas ngisi qty berapapun',
	`prodlinehistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`prodlinehistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.promo
CREATE TABLE IF NOT EXISTS `promo` (
	`promo_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`promo_description` varchar(255) DEFAULT NULL,
	`promo_start` bigint(20) unsigned DEFAULT NULL,
	`promo_end` bigint(20) unsigned DEFAULT NULL,
	`promo_type` tinyint(1) DEFAULT NULL,
	`promo_shownotif` tinyint(1) DEFAULT NULL,
	`promo_target` tinyint(1) DEFAULT NULL,
	`promo_limited` tinyint(1) DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.promoline
CREATE TABLE IF NOT EXISTS `promoline` (
	`promoline_id` char(36) NOT NULL,
	`promo_id` char(36) NOT NULL,
	`masteritemuom_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`promoline_mode` tinyint(1) NOT NULL,
	`promoline_type` tinyint(4) NOT NULL,
	`promoline_modeldiscinput` tinyint(1) DEFAULT NULL,
	`promoline_qty` decimal(33, 15) unsigned DEFAULT NULL,
	`promoline_priceinput` decimal(33, 15) unsigned DEFAULT NULL,
	`promoline_discinput` decimal(33, 15) unsigned DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.stockcard
CREATE TABLE IF NOT EXISTS `stockcard` (
	`stockcard_id` char(36) NOT NULL,
	`masteritem_id` char(36) NOT NULL,
	`masterwarehouse_id` char(36) NOT NULL,
	`masterstore_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`stockcard_onhand` decimal(20, 6) DEFAULT NULL,
	`stockcard_onpurchase` decimal(20, 6) DEFAULT NULL,
	`stockcard_inassembly` decimal(20, 6) DEFAULT NULL,
	`stockcard_onassembly` decimal(20, 6) DEFAULT NULL,
	`stockcard_onorder` decimal(20, 6) DEFAULT NULL,
	`stockcard_ontransfer` decimal(20, 6) DEFAULT NULL,
	`stockcard_onquote` decimal(20, 6) DEFAULT NULL,
	PRIMARY KEY (`stockcard_id`, `masterbussiness_id`),
	UNIQUE KEY `masteritem_id_masterwarehouse_id_masterstore_id` (
		`masteritem_id`,
		`masterwarehouse_id`,
		`masterstore_id`
	),
	KEY `FK_stockcard_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_stockcard_masterbussiness` (`masterbussiness_id`),
	KEY `FK_stockcard_masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_stockcard_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_stockcard_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_stockcard_masterwarehouse` FOREIGN KEY (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	) REFERENCES `masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.templisttagihan
CREATE TABLE IF NOT EXISTS `templisttagihan` (
	`trans_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`trans_entrydate` varchar(255) DEFAULT NULL,
	`trans_text` varchar(255) DEFAULT NULL,
	`masterpartner_description` varchar(255) DEFAULT NULL,
	`masterpartnerstaff_description` varchar(255) DEFAULT NULL,
	`trans_description` varchar(255) DEFAULT NULL,
	`finance_currentvalue` decimal(33, 8) DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.trans
CREATE TABLE IF NOT EXISTS `trans` (
	`trans_id` char(36) NOT NULL,
	`transparent_id` char(36) DEFAULT NULL,
	`masterwarehouse_id` char(36) DEFAULT NULL,
	`masterstore_id` char(36) DEFAULT NULL,
	`masteraccount_id` char(36) DEFAULT NULL,
	`masterpartner_id` char(36) DEFAULT NULL,
	`masterpartnerstaff_id` char(36) DEFAULT NULL,
	`mastercreditterm_id` char(36) DEFAULT NULL,
	`masterexpedisi_id` char(36) DEFAULT NULL,
	`masterreason_id` char(36) DEFAULT NULL,
	`masterwarehousetujuan_id` char(36) DEFAULT NULL,
	`masterstoretujuan_id` char(36) DEFAULT NULL,
	`masterexchange_id` char(36) DEFAULT NULL,
	`masterfixasset_id` char(36) DEFAULT NULL,
	`masterfixassetsusut_id` char(36) DEFAULT NULL,
	`masterpartnersupport_id` char(36) DEFAULT NULL,
	`transfakturline_id` char(36) DEFAULT NULL,
	`masterpinjaman_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`trans_text` varchar(255) NOT NULL,
	`trans_type` tinyint(3) unsigned NOT NULL,
	`trans_status` enum('P', 'O', 'C', 'H', 'OD', 'CT') NOT NULL DEFAULT 'P',
	`trans_entrydate` bigint(20) unsigned DEFAULT NULL,
	`trans_tanggalnotapembelian` bigint(20) unsigned DEFAULT NULL,
	`trans_nomorgiro` varchar(255) DEFAULT NULL,
	`trans_girojatem` bigint(20) DEFAULT NULL,
	`trans_girocair` bigint(20) DEFAULT NULL,
	`trans_identitas` varchar(255) DEFAULT NULL,
	`trans_nama` varchar(255) DEFAULT NULL,
	`trans_telp` varchar(255) DEFAULT NULL,
	`trans_email` varchar(255) DEFAULT NULL,
	`trans_alamat` varchar(500) DEFAULT NULL,
	`trans_description` varchar(500) DEFAULT NULL,
	`trans_nomornota` varchar(500) DEFAULT NULL,
	`trans_exchangevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_creditperiod` smallint(5) unsigned DEFAULT NULL,
	`trans_discgroup` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_administrasi` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_provisi` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_lainnya` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_isincludevat` tinyint(1) unsigned DEFAULT NULL,
	`trans_isdiscpersen` tinyint(1) unsigned DEFAULT NULL,
	`trans_isdiscpersendiscgroup` tinyint(1) unsigned DEFAULT NULL,
	`trans_isallocation` tinyint(1) unsigned DEFAULT NULL,
	`trans_syncstatus` tinyint(3) unsigned DEFAULT '100',
	`trans_pemberidisc` varchar(255) DEFAULT NULL,
	`trans_noresi` varchar(255) DEFAULT NULL,
	`trans_mintafaktur` tinyint(1) unsigned DEFAULT '0',
	`trans_isallowadditem` tinyint(1) unsigned DEFAULT '1',
	`trans_isjumlahkan` tinyint(1) unsigned DEFAULT '0',
	`trans_priceperpiece` tinyint(1) unsigned DEFAULT '0',
	`trans_terupload` tinyint(1) unsigned DEFAULT '0',
	`trans_oleh` varchar(255) NOT NULL,
	`trans_waktu` bigint(20) unsigned DEFAULT NULL,
	`trans_olehubah` varchar(255) DEFAULT NULL,
	`trans_waktuubah` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`trans_id`, `masterbussiness_id`),
	UNIQUE KEY `masterbussiness_id_trans_text` (`masterbussiness_id`, `trans_text`),
	KEY `FK_trans_masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	),
	KEY `FK_trans_masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	KEY `FK_trans_masterpartner` (`masterpartner_id`, `masterbussiness_id`),
	KEY `FK_trans_masterpartner_2` (`masterpartnerstaff_id`, `masterbussiness_id`),
	KEY `FK_trans_masterother` (`mastercreditterm_id`, `masterbussiness_id`),
	KEY `FK_trans_masterother_2` (`masterexpedisi_id`, `masterbussiness_id`),
	KEY `FK_trans_masterother_3` (`masterreason_id`, `masterbussiness_id`),
	KEY `FK_trans_masterwarehouse_2` (
		`masterwarehousetujuan_id`,
		`masterstoretujuan_id`,
		`masterbussiness_id`
	),
	KEY `FK_trans_masterother_4` (`masterexchange_id`, `masterbussiness_id`),
	KEY `FK_trans_masterpartner_3` (`masterpartnersupport_id`, `masterbussiness_id`),
	KEY `FK_trans_masterplatform` (`masterplatform_id`),
	KEY `FK_trans_trans` (`transparent_id`, `masterbussiness_id`),
	KEY `FK_trans_masterfixasset` (`masterfixasset_id`, `masterbussiness_id`),
	KEY `FK_trans_masterfixassetsusut` (`masterfixassetsusut_id`, `masterbussiness_id`),
	KEY `FK_trans_transfakturline` (`transfakturline_id`, `masterbussiness_id`),
	KEY `FK_trans_masterother_5` (`masterpinjaman_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masteraccount` FOREIGN KEY (`masteraccount_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_trans_masterbussiness_2` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_trans_masterfixasset` FOREIGN KEY (`masterfixasset_id`, `masterbussiness_id`) REFERENCES `masterfixasset` (`masterfixasset_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterfixassetsusut` FOREIGN KEY (`masterfixassetsusut_id`, `masterbussiness_id`) REFERENCES `masterfixassetsusut` (`masterfixassetsusut_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterother` FOREIGN KEY (`mastercreditterm_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterother_2` FOREIGN KEY (`masterexpedisi_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterother_3` FOREIGN KEY (`masterreason_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterother_4` FOREIGN KEY (`masterexchange_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterother_5` FOREIGN KEY (`masterpinjaman_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterpartner` FOREIGN KEY (`masterpartner_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterpartner_2` FOREIGN KEY (`masterpartnerstaff_id`, `masterbussiness_id`) REFERENCES `masterpartner` (`masterpartner_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterpartnersupport` FOREIGN KEY (`masterpartnersupport_id`, `masterbussiness_id`) REFERENCES `masterpartnersupport` (`masterpartnersupport_id`, `masterbussiness_id`),
	CONSTRAINT `FK_trans_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`),
	CONSTRAINT `FK_trans_masterwarehouse` FOREIGN KEY (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	) REFERENCES `masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_trans_masterwarehouse_2` FOREIGN KEY (
		`masterwarehousetujuan_id`,
		`masterstoretujuan_id`,
		`masterbussiness_id`
	) REFERENCES `masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_trans_trans` FOREIGN KEY (`transparent_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_trans_transfakturline` FOREIGN KEY (`transfakturline_id`, `masterbussiness_id`) REFERENCES `transfakturline` (`transfakturline_id`, `masterbussiness_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transapprove
CREATE TABLE IF NOT EXISTS `transapprove` (
	`transapprove_id` char(36) NOT NULL,
	`trans_id` char(36) NOT NULL,
	`masteruserbussiness_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transapprove_description` varchar(255) DEFAULT NULL,
	`transapprove_status` tinyint(1) unsigned DEFAULT '0',
	`transapprove_iscancel` tinyint(1) unsigned DEFAULT '0',
	`transapprove_waktu` bigint(20) unsigned DEFAULT NULL,
	`transapprove_waktuubah` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`transapprove_id`, `masterbussiness_id`),
	KEY `FK_transapprove_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_transapprove_masteruserbussiness` (`masteruserbussiness_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transapprove_masteruserbussiness` FOREIGN KEY (`masteruserbussiness_id`, `masterbussiness_id`) REFERENCES `masteruserbussiness` (`masteruserbussiness_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transapprove_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transattribut
CREATE TABLE IF NOT EXISTS `transattribut` (
	`transattribut_id` char(36) NOT NULL,
	`trans_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transattribut_totalnetvalue` decimal(20, 6) DEFAULT NULL,
	`transattribut_totaltaxvalue` decimal(20, 6) DEFAULT NULL,
	`transattribut_totaluangmuka` decimal(20, 6) DEFAULT NULL,
	PRIMARY KEY (`transattribut_id`, `masterbussiness_id`),
	UNIQUE KEY `trans_id` (`trans_id`),
	KEY `FK_transattribut_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_transattribut_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transattribut_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transattribut_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transbilling
CREATE TABLE IF NOT EXISTS `transbilling` (
	`transbilling_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transbilling_text` varchar(255) NOT NULL,
	`transbilling_urlpayment` text,
	`transbilling_midtrans_id` varchar(255) DEFAULT NULL,
	`transbilling_status` varchar(255) DEFAULT NULL,
	`transbilling_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`transbilling_id`),
	UNIQUE KEY `transbilling_text` (`transbilling_text`),
	KEY `FK_transbilling_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transbilling_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transbs
CREATE TABLE IF NOT EXISTS `transbs` (
	`transbs_id` char(36) NOT NULL,
	`masteraccount_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transbs_bank` enum('BCA', 'BRI', 'BNI', 'MANDIRI') DEFAULT NULL,
	`transbs_type` enum('PERSONAL', 'CORPORATE') DEFAULT NULL,
	`transbs_nomorrekening` varchar(255) DEFAULT NULL,
	`transbs_nilai` decimal(33, 15) DEFAULT NULL,
	`transbs_entrydate` bigint(20) unsigned DEFAULT NULL,
	`transbs_mode` varchar(255) DEFAULT NULL,
	`transbs_oleh` varchar(255) NOT NULL,
	`transbs_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`transbs_id`, `masterbussiness_id`),
	KEY `FK_transbs_masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	KEY `FK_transbs_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transbs_masteraccount` FOREIGN KEY (`masteraccount_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transbs_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transbsline
CREATE TABLE IF NOT EXISTS `transbsline` (
	`transbsline_id` char(36) NOT NULL,
	`transbs_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transbsline_status` enum('P', 'C') NOT NULL DEFAULT 'P',
	`transbsline_entrydate` bigint(20) unsigned DEFAULT NULL,
	`transbsline_vector` tinyint(4) DEFAULT NULL,
	`transbsline_value` decimal(33, 15) unsigned DEFAULT NULL,
	`transbsline_saldo` decimal(33, 15) DEFAULT NULL,
	`transbsline_description` varchar(255) DEFAULT NULL,
	`transbsline_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`transbsline_id`, `masterbussiness_id`),
	KEY `FK_transbsline_transbs` (`transbs_id`, `masterbussiness_id`),
	KEY `FK_transbsline_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transbsline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transbsline_transbs` FOREIGN KEY (`transbs_id`, `masterbussiness_id`) REFERENCES `transbs` (`transbs_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transdocument
CREATE TABLE IF NOT EXISTS `transdocument` (
	`transdocument_id` char(36) NOT NULL,
	`trans_id` char(36) DEFAULT NULL,
	`masteritem_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transdocument_pathobject` text,
	PRIMARY KEY (`transdocument_id`, `masterbussiness_id`),
	KEY `FK_transdocument_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_transdocument_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_transdocument_masterplatform` (`masterplatform_id`),
	KEY `FK_transdocument_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transdocument_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transdocument_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transdocument_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transdocument_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transfaktur
CREATE TABLE IF NOT EXISTS `transfaktur` (
	`transfaktur_id` char(36) NOT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transfaktur_entrydatestart` bigint(20) unsigned NOT NULL,
	`transfaktur_entrydateend` bigint(20) unsigned NOT NULL,
	`transfaktur_awal` varchar(255) DEFAULT NULL,
	`transfaktur_akhir` varchar(255) DEFAULT NULL,
	`transfaktur_nomorawal` varchar(255) DEFAULT NULL,
	`transfaktur_oleh` varchar(255) NOT NULL,
	`transfaktur_event` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`transfaktur_id`, `masterbussiness_id`),
	KEY `FK_transfaktur_masterplatform` (`masterplatform_id`),
	KEY `FK_transfaktur_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transfaktur_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transfaktur_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transfakturline
CREATE TABLE IF NOT EXISTS `transfakturline` (
	`transfakturline_id` char(36) NOT NULL,
	`transfaktur_id` char(36) NOT NULL,
	`masterbussiness_id` char(50) NOT NULL,
	`transfakturline_ubah` tinyint(3) unsigned DEFAULT '0',
	`transfakturline_nomor` varchar(50) DEFAULT NULL,
	PRIMARY KEY (`transfakturline_id`, `masterbussiness_id`),
	KEY `FK_transfakturline_masterbussiness` (`masterbussiness_id`),
	KEY `FK_transfakturline_transfaktur` (`transfaktur_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transfakturline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transfakturline_transfaktur` FOREIGN KEY (`transfaktur_id`, `masterbussiness_id`) REFERENCES `transfaktur` (`transfaktur_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transhistory
CREATE TABLE IF NOT EXISTS `transhistory` (
	`transhistory_id` char(36) NOT NULL,
	`transhistory_mode` enum('I', 'U', 'D') NOT NULL,
	`trans_id` char(36) DEFAULT NULL,
	`transparent_id` char(36) DEFAULT NULL,
	`masterwarehouse_id` char(36) DEFAULT NULL,
	`masterstore_id` char(36) DEFAULT NULL,
	`masteraccount_id` char(36) DEFAULT NULL,
	`masterpartner_id` char(36) DEFAULT NULL,
	`masterpartnerstaff_id` char(36) DEFAULT NULL,
	`mastercreditterm_id` char(36) DEFAULT NULL,
	`masterexpedisi_id` char(36) DEFAULT NULL,
	`masterreason_id` char(36) DEFAULT NULL,
	`masterwarehousetujuan_id` char(36) DEFAULT NULL,
	`masterstoretujuan_id` char(36) DEFAULT NULL,
	`masterexchange_id` char(36) DEFAULT NULL,
	`masterfixasset_id` char(36) DEFAULT NULL,
	`masterfixassetsusut_id` char(36) DEFAULT NULL,
	`masterpartnersupport_id` char(36) DEFAULT NULL,
	`transfakturline_id` char(36) DEFAULT NULL,
	`masterpinjaman_id` char(36) DEFAULT NULL,
	`masterplatform_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`trans_text` varchar(255) DEFAULT NULL,
	`trans_type` tinyint(3) unsigned DEFAULT NULL,
	`trans_status` enum('P', 'O', 'C', 'H', 'OD', 'CT') DEFAULT 'P',
	`trans_entrydate` bigint(20) unsigned DEFAULT NULL,
	`trans_tanggalnotapembelian` bigint(20) unsigned DEFAULT NULL,
	`trans_nomorgiro` varchar(255) DEFAULT NULL,
	`trans_girojatem` bigint(20) DEFAULT NULL,
	`trans_girocair` bigint(20) DEFAULT NULL,
	`trans_identitas` varchar(255) DEFAULT NULL,
	`trans_nama` varchar(255) DEFAULT NULL,
	`trans_telp` varchar(255) DEFAULT NULL,
	`trans_email` varchar(255) DEFAULT NULL,
	`trans_alamat` varchar(500) DEFAULT NULL,
	`trans_description` varchar(500) DEFAULT NULL,
	`trans_nomornota` varchar(500) DEFAULT NULL,
	`trans_exchangevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_creditperiod` smallint(5) unsigned DEFAULT NULL,
	`trans_discgroup` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_administrasi` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_provisi` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_lainnya` decimal(33, 15) unsigned DEFAULT NULL,
	`trans_isincludevat` tinyint(1) unsigned DEFAULT NULL,
	`trans_isdiscpersen` tinyint(1) unsigned DEFAULT NULL,
	`trans_isdiscpersendiscgroup` tinyint(1) unsigned DEFAULT NULL,
	`trans_isallocation` tinyint(1) unsigned DEFAULT NULL,
	`trans_syncstatus` tinyint(3) unsigned DEFAULT '100',
	`trans_pemberidisc` varchar(255) DEFAULT NULL,
	`trans_noresi` varchar(255) DEFAULT NULL,
	`trans_mintafaktur` tinyint(1) unsigned DEFAULT '0',
	`trans_isallowadditem` tinyint(1) unsigned DEFAULT '1',
	`trans_isjumlahkan` tinyint(1) unsigned DEFAULT '0',
	`trans_priceperpiece` tinyint(1) unsigned DEFAULT '0',
	`trans_terupload` tinyint(1) unsigned DEFAULT '0',
	`trans_oleh` varchar(255) DEFAULT NULL,
	`transhistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`transhistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transline
CREATE TABLE IF NOT EXISTS `transline` (
	`transline_id` char(36) NOT NULL,
	`trans_id` char(36) NOT NULL,
	`transparentpayment_id` char(36) DEFAULT NULL,
	`translineparent_id` char(36) DEFAULT NULL,
	`translineparentcombine_id` char(36) DEFAULT NULL,
	`masteritem_id` char(36) DEFAULT NULL,
	`masteritemuom_id` char(36) DEFAULT NULL,
	`masterwarehouse_id` char(36) DEFAULT NULL,
	`masterstore_id` char(36) DEFAULT NULL,
	`mastertax_id` char(36) DEFAULT NULL,
	`masteraccount_id` char(36) DEFAULT NULL,
	`masteraccountincomecashback_id` char(36) DEFAULT NULL,
	`masteraccountpiutangcashback_id` char(36) DEFAULT NULL,
	`masterpayment_id` char(36) DEFAULT NULL,
	`masterkemasan_id` char(36) DEFAULT NULL,
	`transbsline_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transline_barcode` varchar(255) DEFAULT NULL,
	`transline_description` varchar(500) DEFAULT NULL,
	`transline_alias` varchar(500) DEFAULT NULL,
	`transline_nourut` smallint(5) unsigned DEFAULT NULL,
	`transline_nourutinduk` smallint(5) unsigned DEFAULT NULL,
	`transline_taxrate` decimal(33, 15) DEFAULT NULL,
	`transline_distribusipersen` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qtyinput` decimal(33, 15) unsigned NOT NULL DEFAULT '0.000000000000000',
	`transline_qtyinputfly` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qtyrealize` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qtysystem` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qtyadjust` decimal(33, 15) DEFAULT NULL,
	`transline_convertionqty` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_vector` tinyint(4) DEFAULT NULL,
	`transline_tara` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qty` decimal(33, 15) DEFAULT NULL,
	`transline_qtyfly` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_tarafly` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_defaultbahan` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_priceinput` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_price` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_pricefly` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discinput` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_disc` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discotherinput` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discother` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discgroupline` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discgrouplinevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_totaldiscvalue` decimal(33, 15) DEFAULT NULL,
	`transline_netraw` decimal(33, 15) DEFAULT NULL,
	`transline_net` decimal(33, 2) DEFAULT NULL,
	`transline_netvalue` decimal(33, 2) DEFAULT NULL,
	`transline_tax` decimal(33, 2) DEFAULT NULL,
	`transline_taxvalue` decimal(33, 2) DEFAULT NULL,
	`transline_komisi` decimal(33, 15) DEFAULT NULL,
	`transline_nettotalkomisi` decimal(33, 15) DEFAULT NULL,
	`transline_cardcharges` decimal(33, 15) DEFAULT NULL,
	`transline_cardchargesvalue` decimal(33, 15) DEFAULT NULL,
	`transline_pointperqty` decimal(33, 15) DEFAULT NULL,
	`transline_minqtyused` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_maxqtyused` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_uncertainty` tinyint(2) unsigned DEFAULT NULL COMMENT '1	fix, tidak boleh dirubah-ubah\r\n2	min max\r\n3	free, bebas ngisi qty berapapun',
	`transline_ishide` tinyint(1) unsigned DEFAULT '0',
	PRIMARY KEY (`transline_id`, `masterbussiness_id`),
	KEY `FK_transline_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_transline_trans_2` (`transparentpayment_id`, `masterbussiness_id`),
	KEY `FK_transline_transline` (`translineparent_id`, `masterbussiness_id`),
	KEY `FK_transline_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_transline_masteritemuom` (`masteritemuom_id`, `masterbussiness_id`),
	KEY `FK_transline_masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	),
	KEY `FK_transline_masterother` (`mastertax_id`, `masterbussiness_id`),
	KEY `FK_transline_masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	KEY `FK_transline_masteraccount_2` (
		`masteraccountincomecashback_id`,
		`masterbussiness_id`
	),
	KEY `FK_transline_masteraccount_3` (
		`masteraccountpiutangcashback_id`,
		`masterbussiness_id`
	),
	KEY `FK_transline_masterother_2` (`masterkemasan_id`, `masterbussiness_id`),
	KEY `FK_transline_transbsline` (`transbsline_id`, `masterbussiness_id`),
	KEY `FK_transline_masterbussiness` (`masterbussiness_id`),
	KEY `FK_transline_masterpayment` (`masterpayment_id`, `masterbussiness_id`),
	KEY `FK_transline_transline_2` (`translineparentcombine_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masteraccount` FOREIGN KEY (`masteraccount_id`, `masterbussiness_id`) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masteraccount_2` FOREIGN KEY (
		`masteraccountincomecashback_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masteraccount_3` FOREIGN KEY (
		`masteraccountpiutangcashback_id`,
		`masterbussiness_id`
	) REFERENCES `masteraccount` (`masteraccount_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transline_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masteritemuom` FOREIGN KEY (`masteritemuom_id`, `masterbussiness_id`) REFERENCES `masteritemuom` (`masteritemuom_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masterother` FOREIGN KEY (`mastertax_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masterother_2` FOREIGN KEY (`masterkemasan_id`, `masterbussiness_id`) REFERENCES `masterother` (`masterother_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masterpayment` FOREIGN KEY (`masterpayment_id`, `masterbussiness_id`) REFERENCES `masterpayment` (`masterpayment_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_masterwarehouse` FOREIGN KEY (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	) REFERENCES `masterwarehouse` (
		`masterwarehouse_id`,
		`masterstore_id`,
		`masterbussiness_id`
	),
	CONSTRAINT `FK_transline_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transline_trans_2` FOREIGN KEY (`transparentpayment_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transline_transbsline` FOREIGN KEY (`transbsline_id`, `masterbussiness_id`) REFERENCES `transbsline` (`transbsline_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_transline` FOREIGN KEY (`translineparent_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transline_transline_2` FOREIGN KEY (
		`translineparentcombine_id`,
		`masterbussiness_id`
	) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.translineattribute
CREATE TABLE IF NOT EXISTS `translineattribute` (
	`translineattribute_id` char(36) NOT NULL,
	`transline_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`translineattribute_totalqty` decimal(20, 6) DEFAULT NULL,
	`translineattribute_totalretur` decimal(20, 6) DEFAULT NULL,
	PRIMARY KEY (`translineattribute_id`, `masterbussiness_id`),
	UNIQUE KEY `transline_id` (`transline_id`),
	KEY `FK_translineattribute_transline` (`transline_id`, `masterbussiness_id`),
	KEY `FK_translineattribute_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_translineattribute_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_translineattribute_transline` FOREIGN KEY (`transline_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.translinebilling
CREATE TABLE IF NOT EXISTS `translinebilling` (
	`translinebilling_id` char(36) NOT NULL,
	`transbilling_id` char(36) NOT NULL,
	`masteritembilling_id` char(36) NOT NULL,
	`translinebilling_qtyinput` decimal(20, 6) unsigned DEFAULT NULL,
	`translinebilling_valueinput` decimal(20, 6) unsigned DEFAULT NULL,
	`translinebilling_discinput` decimal(20, 6) unsigned DEFAULT NULL,
	`translinebilling_netvalue` decimal(20, 6) unsigned DEFAULT NULL,
	PRIMARY KEY (`translinebilling_id`),
	KEY `FK_translinebilling_masteritembilling` (`masteritembilling_id`),
	KEY `FK_translinebilling_transbilling` (`transbilling_id`),
	CONSTRAINT `FK_translinebilling_masteritembilling` FOREIGN KEY (`masteritembilling_id`) REFERENCES `masteritembilling` (`masteritembilling_id`),
	CONSTRAINT `FK_translinebilling_transbilling` FOREIGN KEY (`transbilling_id`) REFERENCES `transbilling` (`transbilling_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.translinecontainer
CREATE TABLE IF NOT EXISTS `translinecontainer` (
	`translinecontainer_id` char(36) NOT NULL,
	`transline_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`translinecontainer_beratcontainer` decimal(20, 6) unsigned DEFAULT NULL,
	`translinecontainer_beratbersih` decimal(20, 6) unsigned DEFAULT NULL,
	`translinecontainer_description` varchar(500) DEFAULT NULL,
	PRIMARY KEY (`translinecontainer_id`, `masterbussiness_id`),
	KEY `FK_translinecontainer_transline` (`transline_id`, `masterbussiness_id`),
	KEY `FK_translinecontainer_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_translinecontainer_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_translinecontainer_transline` FOREIGN KEY (`transline_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.translinehistory
CREATE TABLE IF NOT EXISTS `translinehistory` (
	`translinehistory_id` char(36) NOT NULL,
	`transhistory_id` char(36) DEFAULT NULL,
	`translinehistory_mode` enum('I', 'U', 'D') NOT NULL,
	`transline_id` char(36) DEFAULT NULL,
	`trans_id` char(36) DEFAULT NULL,
	`transparentpayment_id` char(36) DEFAULT NULL,
	`translineparent_id` char(36) DEFAULT NULL,
	`translineparentcombine_id` char(36) DEFAULT NULL,
	`masteritem_id` char(36) DEFAULT NULL,
	`masteritemuom_id` char(36) DEFAULT NULL,
	`masterwarehouse_id` char(36) DEFAULT NULL,
	`masterstore_id` char(36) DEFAULT NULL,
	`mastertax_id` char(36) DEFAULT NULL,
	`masteraccount_id` char(36) DEFAULT NULL,
	`masteraccountincomecashback_id` char(36) DEFAULT NULL,
	`masteraccountpiutangcashback_id` char(36) DEFAULT NULL,
	`masterpayment_id` char(36) DEFAULT NULL,
	`masterkemasan_id` char(36) DEFAULT NULL,
	`transbsline_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) DEFAULT NULL,
	`transline_barcode` varchar(255) DEFAULT NULL,
	`transline_description` varchar(500) DEFAULT NULL,
	`transline_alias` varchar(500) DEFAULT NULL,
	`transline_nourut` smallint(5) unsigned DEFAULT NULL,
	`transline_nourutinduk` smallint(5) unsigned DEFAULT NULL,
	`transline_taxrate` decimal(33, 15) DEFAULT NULL,
	`transline_distribusipersen` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qtyinput` decimal(33, 15) unsigned DEFAULT '0.000000000000000',
	`transline_qtyinputfly` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qtyrealize` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qtysystem` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qtyadjust` decimal(33, 15) DEFAULT NULL,
	`transline_convertionqty` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_vector` tinyint(4) DEFAULT NULL,
	`transline_tara` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_qty` decimal(33, 15) DEFAULT NULL,
	`transline_qtyfly` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_tarafly` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_defaultbahan` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_priceinput` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_price` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_pricefly` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discinput` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_disc` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discotherinput` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discother` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discgroupline` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_discgrouplinevalue` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_totaldiscvalue` decimal(33, 15) DEFAULT NULL,
	`transline_netraw` decimal(33, 15) DEFAULT NULL,
	`transline_net` decimal(33, 2) DEFAULT NULL,
	`transline_netvalue` decimal(33, 2) DEFAULT NULL,
	`transline_tax` decimal(33, 2) DEFAULT NULL,
	`transline_taxvalue` decimal(33, 2) DEFAULT NULL,
	`transline_komisi` decimal(33, 15) DEFAULT NULL,
	`transline_nettotalkomisi` decimal(33, 15) DEFAULT NULL,
	`transline_cardcharges` decimal(33, 15) DEFAULT NULL,
	`transline_cardchargesvalue` decimal(33, 15) DEFAULT NULL,
	`transline_pointperqty` decimal(33, 15) DEFAULT NULL,
	`transline_minqtyused` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_maxqtyused` decimal(33, 15) unsigned DEFAULT NULL,
	`transline_uncertainty` tinyint(1) unsigned DEFAULT NULL COMMENT '1	fix, tidak boleh dirubah-ubah\r\n2	min max\r\n3	free, bebas ngisi qty berapapun',
	`transline_ishide` tinyint(1) unsigned DEFAULT '0',
	`translinehistory_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`translinehistory_id`)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.translinehpp
CREATE TABLE IF NOT EXISTS `translinehpp` (
	`translinehpp_id` char(36) NOT NULL,
	`transline_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`translinehpp_hpp` decimal(33, 15) DEFAULT NULL,
	`translinehpp_totalhpp` decimal(33, 15) DEFAULT NULL,
	PRIMARY KEY (`translinehpp_id`, `masterbussiness_id`),
	UNIQUE KEY `transline_id` (`transline_id`),
	KEY `FK__transline` (`transline_id`, `masterbussiness_id`),
	KEY `FK_translinehpp_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK__transline` FOREIGN KEY (`transline_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_translinehpp_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.translinescale
CREATE TABLE IF NOT EXISTS `translinescale` (
	`translinescale_id` char(36) NOT NULL,
	`transline_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`translinescale_qtybomrecipe` decimal(20, 6) unsigned DEFAULT NULL,
	`translinescale_qtybomawal` decimal(20, 6) unsigned DEFAULT NULL,
	`translinescale_qtyhasil` decimal(20, 6) unsigned DEFAULT NULL,
	`translinescale_qtybomakhir` decimal(20, 6) unsigned DEFAULT NULL,
	`translinescale_qtybomscrap` decimal(20, 6) DEFAULT NULL,
	`translinescale_isexpand` tinyint(3) unsigned DEFAULT NULL,
	`translinescale_chkbefore` tinyint(3) unsigned DEFAULT NULL,
	`translinescale_chkdone` tinyint(3) unsigned DEFAULT NULL,
	`translinescale_chkafter` tinyint(3) unsigned DEFAULT NULL,
	PRIMARY KEY (`translinescale_id`, `masterbussiness_id`),
	KEY `FK_translinescale_transline` (`transline_id`, `masterbussiness_id`),
	KEY `FK_translinescale_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_translinescale_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_translinescale_transline` FOREIGN KEY (`transline_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.translist
CREATE TABLE IF NOT EXISTS `translist` (
	`translist_id` char(36) NOT NULL,
	`trans_id` char(36) NOT NULL,
	`transbayar_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`translist_no` smallint(5) unsigned DEFAULT NULL,
	`translist_jatem` bigint(20) unsigned DEFAULT NULL,
	`translist_bunga` decimal(33, 15) unsigned DEFAULT NULL,
	`translist_pokok` decimal(33, 15) unsigned DEFAULT NULL,
	PRIMARY KEY (`translist_id`, `masterbussiness_id`),
	KEY `FK_translist_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_translist_trans_2` (`transbayar_id`, `masterbussiness_id`),
	CONSTRAINT `FK_translist_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_translist_trans_2` FOREIGN KEY (`transbayar_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transperiod
CREATE TABLE IF NOT EXISTS `transperiod` (
	`transperiod_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transperiod_entrydate` bigint(20) unsigned NOT NULL,
	`transperiod_status` enum('P', 'C') NOT NULL,
	`transperiod_oleh` varchar(255) NOT NULL,
	`transperiod_waktu` bigint(20) unsigned DEFAULT NULL,
	PRIMARY KEY (`transperiod_id`, `masterbussiness_id`),
	KEY `FK_transperiod_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transperiod_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transprint
CREATE TABLE IF NOT EXISTS `transprint` (
	`transprint_id` char(36) NOT NULL,
	`trans_id` char(36) NOT NULL,
	`masterplatform_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transprint_type` tinyint(3) unsigned NOT NULL,
	`transprint_waktu` bigint(20) unsigned DEFAULT NULL,
	`transprint_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`transprint_id`, `masterbussiness_id`),
	KEY `FK_transprint_masterbussiness` (`masterbussiness_id`),
	KEY `FK_transprint_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_transprint_masterplatform` (`masterplatform_id`),
	CONSTRAINT `FK_transprint_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transprint_masterplatform` FOREIGN KEY (`masterplatform_id`) REFERENCES `masterplatform` (`masterplatform_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transprint_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transserialbatch
CREATE TABLE IF NOT EXISTS `transserialbatch` (
	`transserialbatch_id` char(36) NOT NULL,
	`transline_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transserialbatch_mode` enum('S', 'B') NOT NULL,
	`transserialbatch_nourut` smallint(5) unsigned DEFAULT NULL,
	`transserialbatch_serialbatchtext` varchar(255) NOT NULL,
	`transserialbatch_proddate` bigint(20) unsigned DEFAULT NULL,
	`transserialbatch_expdate` bigint(20) unsigned DEFAULT NULL,
	`transserialbatch_vector` tinyint(4) NOT NULL,
	`transserialbatch_qtyinput` decimal(33, 15) unsigned NOT NULL DEFAULT '0.000000000000000',
	`transserialbatch_qty` decimal(33, 15) DEFAULT NULL,
	`transserialbatch_qtyfly` decimal(33, 15) DEFAULT NULL,
	`transserialbatch_beratcontainer` decimal(33, 15) DEFAULT NULL,
	`transserialbatch_oleh` varchar(255) NOT NULL,
	PRIMARY KEY (`transserialbatch_id`, `masterbussiness_id`),
	KEY `FK_transserialbatch_transline` (`transline_id`, `masterbussiness_id`),
	KEY `FK_transserialbatch_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transserialbatch_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transserialbatch_transline` FOREIGN KEY (`transline_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transserialbatchcoa
CREATE TABLE IF NOT EXISTS `transserialbatchcoa` (
	`transserialbatchcoa_id` char(36) NOT NULL,
	`transserialbatch_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transserialbatchcoa_matter` tinyint(1) unsigned DEFAULT NULL,
	`transserialbatchcoa_colour` tinyint(1) unsigned DEFAULT NULL,
	`transserialbatchcoa_odour` tinyint(1) unsigned DEFAULT NULL,
	`transserialbatchcoa_application` varchar(255) DEFAULT NULL,
	`transserialbatchcoa_description` varchar(255) DEFAULT NULL,
	`transserialbatchcoa_refractive` decimal(20, 6) DEFAULT NULL,
	`transserialbatchcoa_gravity` decimal(20, 6) DEFAULT NULL,
	PRIMARY KEY (`transserialbatchcoa_id`, `masterbussiness_id`),
	UNIQUE KEY `transserialbatch_id` (`transserialbatch_id`),
	KEY `FK_transserialbatchcoa_transserialbatch` (`transserialbatch_id`, `masterbussiness_id`),
	KEY `FK_transserialbatchcoa_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transserialbatchcoa_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transserialbatchcoa_transserialbatch` FOREIGN KEY (`transserialbatch_id`, `masterbussiness_id`) REFERENCES `transserialbatch` (`transserialbatch_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transsupervaluasi
CREATE TABLE IF NOT EXISTS `transsupervaluasi` (
	`transsupervaluasi_id` char(36) NOT NULL,
	`transline_id` char(36) NOT NULL,
	`trans_id` char(36) NOT NULL,
	`translineparent_id` char(36) DEFAULT NULL,
	`transparent_id` char(36) DEFAULT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transsupervaluasi_qty` decimal(20, 6) DEFAULT NULL,
	PRIMARY KEY (`transsupervaluasi_id`, `masterbussiness_id`),
	KEY `FK_transsupervaluasi_transline` (`transline_id`, `masterbussiness_id`),
	KEY `FK_transsupervaluasi_transline_2` (`translineparent_id`, `masterbussiness_id`),
	KEY `FK_transsupervaluasi_trans` (`trans_id`, `masterbussiness_id`),
	KEY `FK_transsupervaluasi_trans_2` (`transparent_id`, `masterbussiness_id`),
	CONSTRAINT `FK_transsupervaluasi_trans` FOREIGN KEY (`trans_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transsupervaluasi_trans_2` FOREIGN KEY (`transparent_id`, `masterbussiness_id`) REFERENCES `trans` (`trans_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transsupervaluasi_transline` FOREIGN KEY (`transline_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transsupervaluasi_transline_2` FOREIGN KEY (`translineparent_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for table gogabook.transvaluasi
CREATE TABLE IF NOT EXISTS `transvaluasi` (
	`transvaluasi_id` char(36) NOT NULL,
	`transline_id` char(36) NOT NULL,
	`masteritem_id` char(36) NOT NULL,
	`masterbussiness_id` char(36) NOT NULL,
	`transvaluasi_entrydate` bigint(20) unsigned NOT NULL,
	`transvaluasi_type` tinyint(3) unsigned NOT NULL,
	`transvaluasi_qtyoriginal` decimal(33, 15) unsigned DEFAULT NULL,
	`transvaluasi_qtycurrent` decimal(33, 15) unsigned DEFAULT NULL,
	`transvaluasi_hpp` decimal(33, 15) unsigned DEFAULT NULL,
	PRIMARY KEY (`transvaluasi_id`, `masterbussiness_id`),
	KEY `FK_transvaluasi_transline` (`transline_id`, `masterbussiness_id`),
	KEY `FK_transvaluasi_masteritem` (`masteritem_id`, `masterbussiness_id`),
	KEY `FK_transvaluasi_masterbussiness` (`masterbussiness_id`),
	CONSTRAINT `FK_transvaluasi_masterbussiness` FOREIGN KEY (`masterbussiness_id`) REFERENCES `masterbussiness` (`masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transvaluasi_masteritem` FOREIGN KEY (`masteritem_id`, `masterbussiness_id`) REFERENCES `masteritem` (`masteritem_id`, `masterbussiness_id`) ON DELETE CASCADE,
	CONSTRAINT `FK_transvaluasi_transline` FOREIGN KEY (`transline_id`, `masterbussiness_id`) REFERENCES `transline` (`transline_id`, `masterbussiness_id`) ON DELETE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;
-- Data exporting was unselected.
-- Dumping structure for view gogabook.v_approval
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_approval` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`trans_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`statusapproval` VARCHAR(16) NULL COLLATE 'utf8mb4_general_ci'
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_cetak
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_cetak` (
	`trans_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_qtycetak` BIGINT(21) NOT NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_estimasiproduksihpp
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_estimasiproduksihpp` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`prod_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masteritem_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`totalhpp` DECIMAL(65, 30) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_fakturpajak
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_fakturpajak` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`transfaktur_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`jumlah` BIGINT(21) NOT NULL,
	`jumterisi` BIGINT(21) NULL,
	`sisa` BIGINT(22) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_gethpp
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_gethpp` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`masteritem_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`hpp` DECIMAL(65, 19) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_getlastbeli
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_getlastbeli` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`masterpartner_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`trans_text` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_entrydate` BIGINT(20) UNSIGNED NULL,
	`masteritem_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`transline_qtyinput` DECIMAL(33, 15) UNSIGNED NOT NULL,
	`masteruom_description` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`transline_convertionqty` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_priceinput` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_price` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_discinput` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_disc` DECIMAL(33, 15) UNSIGNED NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_getlastjual
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_getlastjual` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`masterpartner_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`trans_text` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_entrydate` BIGINT(20) UNSIGNED NULL,
	`trans_exchangevalue` DECIMAL(33, 15) UNSIGNED NULL,
	`masteritem_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`transline_qtyinput` DECIMAL(33, 15) UNSIGNED NOT NULL,
	`masteruom_description` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`transline_convertionqty` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_priceinput` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_price` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_discinput` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_disc` DECIMAL(33, 15) UNSIGNED NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_gl
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_gl` (
	`gl_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`trans_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`gl_text` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`gl_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`gl_entrydate` DATE NULL,
	`masterother_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`glline_exchangevalue` DECIMAL(33, 15) UNSIGNED NULL,
	`d.glline_amountvalue*d.glline_vector` DECIMAL(36, 15) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_listakun
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_listakun` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`trans_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`gl_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`glline_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masteraccount_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterbussiness_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_text` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masteraccount_description` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`masteraccount_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masteritem_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masteritem_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`trans_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`glline_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`trans_type` TINYINT(3) UNSIGNED NOT NULL,
	`trans_oleh` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_entrydate` DATE NULL,
	`masuk` DECIMAL(33, 15) NULL,
	`keluar` DECIMAL(33, 15) NULL,
	`nilai` DECIMAL(36, 15) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_listavg
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_listavg` (
	`masteritem_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterbussiness_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`nilaiavg` DECIMAL(65, 19) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_listbarang
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_listbarang` (
	`trans_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masteritem_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterbussiness_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_text` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_type` TINYINT(3) UNSIGNED NOT NULL,
	`nmkurs` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masteritem_description` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`masteritem_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterwarehouse_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`trans_entrydateutc` BIGINT(20) UNSIGNED NULL,
	`trans_entrydate` DATE NULL,
	`trans_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`trans_nomornota` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`transline_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`transline_qtyinput` DECIMAL(33, 15) NOT NULL,
	`nmsatuan` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`transline_priceinput` DECIMAL(33, 15) NULL,
	`transline_discinput` DECIMAL(33, 15) NULL,
	`transline_net` DECIMAL(33, 2) NULL,
	`transline_netvalue` DECIMAL(33, 2) NULL,
	`trans_exchangevalue` DECIMAL(33, 15) NULL,
	`hpp` DECIMAL(33, 15) NULL,
	`totalhpp` DECIMAL(33, 15) NULL,
	`masuk` DECIMAL(33, 15) NULL,
	`keluar` DECIMAL(33, 15) NULL,
	`nilai` DECIMAL(33, 15) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_listhutangpiutang
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_listhutangpiutang` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`trans_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`financeline_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterbussiness_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`financeline_text` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`trans_entrydate` DATE NULL,
	`trans_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`financeline_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`trans_oleh` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`masuk` DECIMAL(22, 2) NULL,
	`keluar` DECIMAL(22, 2) NULL,
	`nilai` DECIMAL(25, 2) NULL,
	`masterpartnercategory_supplier` TINYINT(1) UNSIGNED NULL,
	`masterpartnercategory_customer` TINYINT(1) UNSIGNED NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_listtrans
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_listtrans` (
	`masterbussiness_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`transparent_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterpartnercategory_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`mastercreditterm_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterfixasset_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`trans_text` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_type` TINYINT(3) UNSIGNED NOT NULL,
	`trans_entrydateutc` BIGINT(20) UNSIGNED NULL,
	`trans_entrydate` VARCHAR(40) NULL COLLATE 'utf8mb4_general_ci',
	`trans_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`trans_nomornota` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`trans_exchangevalue` DECIMAL(33, 15) UNSIGNED NULL,
	`trans_discgroup` DECIMAL(33, 15) UNSIGNED NULL,
	`trans_syncstatus` TINYINT(3) UNSIGNED NULL,
	`trans_oleh` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterpartnercategory_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`finance_duedateutc` BIGINT(20) NULL,
	`finance_duedate` VARCHAR(40) NULL COLLATE 'utf8mb4_general_ci',
	`kode` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`produk` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterfixasset_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterfixasset_serialno` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterfixasset_tanggalperolehanutc` BIGINT(20) UNSIGNED NULL,
	`masterfixasset_tanggalperolehan` VARCHAR(40) NULL COLLATE 'utf8mb4_general_ci',
	`masterfixasset_perolehanvalue` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masteritem_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`mastertax_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masteraccount_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`transline_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`transline_alias` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`transline_nourut` SMALLINT(5) UNSIGNED NULL,
	`transline_taxrate` DECIMAL(33, 15) NULL,
	`transline_qtyinput` DECIMAL(33, 15) UNSIGNED NOT NULL,
	`transline_qtyrealize` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_convertionqty` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_vector` TINYINT(4) NULL,
	`transline_qty` DECIMAL(33, 15) NULL,
	`transline_priceinput` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_price` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_discinput` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_disc` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_netraw` DECIMAL(33, 15) NULL,
	`transline_net` DECIMAL(33, 2) NULL,
	`transline_netvalue` DECIMAL(33, 2) NULL,
	`transline_tax` DECIMAL(33, 2) NULL,
	`transline_taxvalue` DECIMAL(33, 2) NULL,
	`transline_ishide` TINYINT(1) UNSIGNED NULL
) ENGINE = MyISAM;
-- Dumping structure for procedure gogabook.v_rawquery
DELIMITER / / CREATE PROCEDURE `v_rawquery`() BEGIN
/*
 INSERT INTO translineattribute
 SELECT UUID(),d.transline_id,d.masterbussiness_id,d.transline_qty,(NULL)
 FROM trans h,transline d,masteritem i,masteritemcategory c,masteritemtype t
 WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND c.masteritemtype_id=t.masteritemtype_id
 AND h.trans_status="P" AND h.trans_type IN (4,16) AND t.masteritemtype_isstock=1
 AND h.trans_id=myid
 ON DUPLICATE KEY UPDATE translineattribute_totalqty=transline_qty;
 
 
 rekalkulasi efisien
 -------------------
 #pembelian
 #dari atas ke bawah
 DROP TEMPORARY TABLE IF EXISTS temprekur;
 CREATE TEMPORARY TABLE temprekur (
 noauto BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
 transline_id CHAR(36) NOT NULL COLLATE latin1_swedish_ci,
 trans_id CHAR(36) NOT NULL COLLATE latin1_swedish_ci,
 translineparent_id CHAR(36) NULL DEFAULT NULL COLLATE latin1_swedish_ci,
 transparent_id CHAR(36) NULL DEFAULT NULL COLLATE latin1_swedish_ci,
 masterbussiness_id CHAR(36) NOT NULL COLLATE latin1_swedish_ci,
 hpp DECIMAL(20,6) NULL DEFAULT NULL,	
 PRIMARY KEY (noauto) USING BTREE
 );
 INSERT INTO temprekur
 WITH RECURSIVE cte AS (
 SELECT (NULL),v.transline_id,v.trans_id,v.translineparent_id,v.transparent_id,v.masterbussiness_id,COALESCE(dh.translinehpp_hpp,0)
 FROM transsupervaluasi v LEFT OUTER JOIN transline d ON v.translineparent_id=d.transline_id LEFT OUTER JOIN translinehpp dh ON d.transline_id=dh.transline_id
 WHERE v.transparent_id='fce27796-59d7-11ee-a97b-f02f74dde3b0'
 UNION ALL
 SELECT (NULL),v.transline_id,v.trans_id,v.translineparent_id,v.transparent_id,v.masterbussiness_id,COALESCE(dh.translinehpp_hpp,0)
 FROM transsupervaluasi v LEFT OUTER JOIN transline d ON v.translineparent_id=d.transline_id LEFT OUTER JOIN translinehpp dh ON d.transline_id=dh.transline_id,cte e
 WHERE v.transparent_id=e.trans_id
 )
 SELECT *
 FROM cte;
 
 SELECT t.transline_id,t.trans_id,t.translineparent_id,t.transparent_id,h.trans_text,h.trans_type,t.hpp
 FROM temprekur t,trans h
 WHERE t.trans_id=h.trans_id
 ORDER BY t.noauto
 
 
 #penjualan
 #dari bawah ke atas
 DROP TEMPORARY TABLE IF EXISTS temprekur;
 CREATE TEMPORARY TABLE temprekur (
 noauto BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
 transline_id CHAR(36) NOT NULL COLLATE latin1_swedish_ci,
 trans_id CHAR(36) NOT NULL COLLATE latin1_swedish_ci,
 translineparent_id CHAR(36) NULL DEFAULT NULL COLLATE latin1_swedish_ci,
 transparent_id CHAR(36) NULL DEFAULT NULL COLLATE latin1_swedish_ci,
 masterbussiness_id CHAR(36) NOT NULL COLLATE latin1_swedish_ci,
 hpp DECIMAL(20,6) NULL DEFAULT NULL,	
 PRIMARY KEY (noauto) USING BTREE
 );
 
 INSERT INTO temprekur
 WITH RECURSIVE cte AS (
 SELECT (NULL),v.transline_id,v.trans_id,v.translineparent_id,v.transparent_id,v.masterbussiness_id,COALESCE(dh.translinehpp_hpp,0)
 FROM transsupervaluasi v LEFT OUTER JOIN transline d ON v.translineparent_id=d.transline_id LEFT OUTER JOIN translinehpp dh ON d.transline_id=dh.transline_id
 WHERE v.trans_id='f6455940-59d7-11ee-a97b-f02f74dde3b0'
 UNION ALL
 SELECT (NULL),v.transline_id,v.trans_id,v.translineparent_id,v.transparent_id,v.masterbussiness_id,COALESCE(dh.translinehpp_hpp,0)
 FROM transsupervaluasi v LEFT OUTER JOIN transline d ON v.translineparent_id=d.transline_id LEFT OUTER JOIN translinehpp dh ON d.transline_id=dh.transline_id,cte e
 WHERE v.trans_id=e.transparent_id
 )
 SELECT *
 FROM cte;
 
 SELECT t.transline_id,t.trans_id,t.translineparent_id,t.transparent_id,h.trans_text,h.trans_type,t.hpp
 FROM temprekur t,trans h
 WHERE t.trans_id=h.trans_id
 ORDER BY t.noauto;
 
 
 
 
 v_listavg
 SELECT d.masteritem_id,d.masterbussiness_id,COALESCE(SUM(dh.translinehpp_totalhpp)/SUM(d.transline_qty),0) AS nilaiavg
 FROM trans h,transline d LEFT OUTER JOIN translinehpp dh ON d.transline_id=dh.transline_id,masteritem i,masteritemcategory c,masteritemtype t
 WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND c.masteritemtype_id=t.masteritemtype_id 
 AND t.masteritemtype_isstock=1 AND h.trans_status IN ("P") AND h.trans_type IN (4,5,12,16,17,24,27,30)
 GROUP BY d.masteritem_id,d.masterbussiness_id
 ORDER BY d.masterbussiness_id,d.masteritem_id
 
 v_listtrans
 SELECT h.masterbussiness_id,h.trans_id,h.transparent_id,pc.masterpartnercategory_id,h.masterpartner_id,h.mastercreditterm_id,h.masterfixasset_id,h.trans_text,h.trans_type,h.trans_entrydate AS trans_entrydateutc,DATE_FORMAT(FROM_UNIXTIME(h.trans_entrydate DIV 1000 ),'%d-%b-%Y') AS trans_entrydate,h.trans_description,h.trans_nomornota,h.trans_exchangevalue,h.trans_discgroup,h.trans_syncstatus,h.trans_oleh,
 pc.masterpartnercategory_description,p.masterpartner_description,p.masterpartner_alias,fh.finance_duedate AS finance_duedateutc,DATE_FORMAT(FROM_UNIXTIME(fh.finance_duedate DIV 1000 ),'%d-%b-%Y') AS finance_duedate,
 COALESCE(i.masteritem_description,a.masteraccount_description) AS kode,COALESCE(i.masteritem_alias,a.masteraccount_alias) AS produk,akt.masterfixasset_description,akt.masterfixasset_serialno,akt.masterfixasset_tanggalperolehan AS masterfixasset_tanggalperolehanutc,DATE_FORMAT(FROM_UNIXTIME(akt.masterfixasset_tanggalperolehan DIV 1000 ),'%d-%b-%Y') AS masterfixasset_tanggalperolehan,akt.masterfixasset_perolehanvalue,
 d.transline_id,d.masteritem_id,d.mastertax_id,d.masteraccount_id,d.transline_description,d.transline_alias,d.transline_nourut,d.transline_taxrate,d.transline_qtyinput,d.transline_qtyrealize,d.transline_convertionqty,d.transline_vector,d.transline_qty,d.transline_priceinput,d.transline_price,d.transline_discinput,d.transline_disc,d.transline_netraw,d.transline_net,d.transline_netvalue,d.transline_tax,d.transline_taxvalue,d.transline_ishide
 FROM trans h LEFT OUTER JOIN masterpartner p ON h.masterpartner_id=p.masterpartner_id LEFT OUTER JOIN masterpartnercategory pc on p.masterpartnercategory_id=pc.masterpartnercategory_id LEFT OUTER JOIN masterother e ON h.masterexchange_id=e.masterother_id LEFT OUTER JOIN trans hh ON h.transparent_id=hh.trans_id LEFT OUTER JOIN finance fh ON h.trans_id=fh.trans_id LEFT OUTER JOIN masterfixasset akt ON h.masterfixasset_id=akt.masterfixasset_id LEFT OUTER JOIN masterother ct ON h.mastercreditterm_id=ct.masterother_id LEFT OUTER JOIN masterother ex ON h.masterexpedisi_id=ex.masterother_id,
 transline d LEFT OUTER JOIN masteritemuom iu ON d.masteritemuom_id=iu.masteritemuom_id LEFT OUTER JOIN masteritem i ON iu.masteritem_id=i.masteritem_id LEFT OUTER JOIN masterother u ON iu.masteruom_id=u.masterother_id LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id=c.masteritemcategory_id LEFT OUTER JOIN masterwarehouse w ON d.masterwarehouse_id=w.masterwarehouse_id LEFT OUTER JOIN masterother t ON d.mastertax_id=t.masterother_id LEFT OUTER JOIN masteraccount a ON a.masteraccount_id=d.masteraccount_id
 WHERE h.trans_id=d.trans_id AND h.trans_status IN ("P")
 ORDER BY h.masterbussiness_id,h.trans_entrydate,h.trans_id,d.transline_nourut,h.trans_waktu;
 
 v_listakun
 SELECT UUID() AS id,hq.trans_id,h.gl_id,d.glline_id,d.masteraccount_id,hq.masterpartner_id,hq.masterbussiness_id,hq.trans_text,p.masterpartner_description,p.masterpartner_alias,a.masteraccount_description,a.masteraccount_alias,i.masteritem_description,i.masteritem_alias,
 hq.trans_description,d.glline_description,hq.trans_type,hq.trans_oleh,DATE(FROM_UNIXTIME(hq.trans_entrydate DIV 1000)) AS trans_entrydate,
 CASE WHEN d.glline_vector=1 THEN d.glline_amountvalue ELSE 0 END AS masuk,CASE WHEN d.glline_vector=-1 THEN d.glline_amountvalue ELSE 0 END AS keluar,d.glline_amountvalue*d.glline_vector AS nilai
 FROM trans hq LEFT OUTER JOIN masterpartner p ON hq.masterpartner_id=p.masterpartner_id,gl h,glline d LEFT OUTER JOIN masteritem i ON d.masteritem_id=i.masteritem_id,masteraccount a
 WHERE hq.trans_id=h.trans_id AND h.gl_id=d.gl_id AND d.masteraccount_id=a.masteraccount_id AND hq.trans_status IN ("P")
 ORDER BY hq.masterbussiness_id,a.masteraccount_description,hq.trans_entrydate;
 
 
 v_listbarang
 SELECT h.trans_id,i.masteritem_id,h.masterpartner_id,h.masterbussiness_id,h.trans_text,h.trans_type,e.masterother_description AS nmkurs,i.masteritem_description,i.masteritem_alias,w.masterwarehouse_description,p.masterpartner_description,p.masterpartner_alias,h.trans_entrydate AS trans_entrydateutc,DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) AS trans_entrydate,
 h.trans_description,h.trans_nomornota,d.transline_description,COALESCE(d.transline_qtyinput,0) AS transline_qtyinput,u.masterother_description AS nmsatuan,COALESCE(d.transline_priceinput,0) AS transline_priceinput,COALESCE(d.transline_discinput,0) AS transline_discinput,COALESCE(d.transline_net,0) AS transline_net,COALESCE(d.transline_netvalue,0) AS transline_netvalue,COALESCE(h.trans_exchangevalue,0) AS trans_exchangevalue,
 COALESCE(hp.translinehpp_hpp,0) AS hpp,COALESCE(hp.translinehpp_totalhpp,0) AS totalhpp,CASE WHEN d.transline_vector=1 THEN d.transline_qty ELSE 0 END AS masuk,CASE WHEN d.transline_vector=-1 THEN -d.transline_qty ELSE 0 END AS keluar,d.transline_qty AS nilai
 FROM trans h LEFT OUTER JOIN masterpartner p ON h.masterpartner_id=p.masterpartner_id LEFT OUTER JOIN masterother e ON h.masterexchange_id=e.masterother_id,transline d LEFT OUTER JOIN masteritemuom iu ON d.masteritemuom_id=iu.masteritemuom_id LEFT OUTER JOIN masterother u ON iu.masteruom_id=u.masterother_id LEFT OUTER JOIN transserialbatch sb ON d.transline_id=sb.transline_id LEFT OUTER JOIN translinehpp hp ON hp.transline_id=d.transline_id LEFT OUTER JOIN masterwarehouse w ON d.masterwarehouse_id=w.masterwarehouse_id,masteritem i,masteritemcategory c,masteritemtype t
 WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND c.masteritemtype_id=t.masteritemtype_id
 AND t.masteritemtype_isstock=1 AND h.trans_status="P" AND h.trans_type IN (4,5,12,16,17,24,27,30) AND d.transline_qtyinput<>0
 ORDER BY i.masteritem_id,h.trans_entrydate;
 
 v_listhutangpiutang
 SELECT UUID() AS id,h.trans_id,h.masterpartner_id,fd.financeline_id,h.masterbussiness_id,fd.financeline_text,p.masterpartner_alias,DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) AS trans_entrydate,h.trans_description,fd.financeline_description,h.trans_oleh,
 CASE WHEN fd.financeline_vector=1 THEN fd.financeline_totalvalue ELSE 0 END AS masuk,CASE WHEN fd.financeline_vector=-1 THEN fd.financeline_totalvalue ELSE 0 END AS keluar,fd.financeline_totalvalue*fd.financeline_vector AS nilai,
 c.masterpartnercategory_supplier,c.masterpartnercategory_customer
 FROM trans h LEFT OUTER JOIN financeline fd ON h.trans_id=fd.trans_id,masterpartner p,masterpartnercategory c
 WHERE h.masterpartner_id=p.masterpartner_id AND p.masterpartnercategory_id=c.masterpartnercategory_id 
 AND h.trans_status="P" AND COALESCE(fd.financeline_totalvalue,0)<>0
 ORDER BY h.masterbussiness_id,h.masterpartner_id,h.trans_entrydate;
 
 */
/*
 #v_getlastjual
 SELECT UUID() AS id,h.masterpartner_id,h.trans_text,h.trans_entrydate,h.trans_exchangevalue,d.masteritem_id,d.transline_qtyinput,u.masterother_description as masteruom_description,d.transline_convertionqty,d.transline_priceinput,d.transline_price,d.transline_discinput,d.transline_disc
 FROM trans h,transline d,masteritem i,masteritemuom iu,masterother u,masterpartner p,
 (SELECT d.masteritem_id,MAX(h.trans_entrydate) AS trans_entrydate
 FROM trans h,transline d
 WHERE h.trans_id=d.trans_id
 AND h.trans_status="P" AND h.trans_type IN (16) AND d.masteritem_id IS NOT NULL
 GROUP BY d.masteritem_id) AS l
 WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND d.masteritemuom_id=iu.masteritemuom_id AND iu.masteruom_id=u.masterother_id AND h.masterpartner_id=p.masterpartner_id AND d.masteritem_id=l.masteritem_id AND h.trans_entrydate=l.trans_entrydate
 AND h.trans_status="P" AND h.trans_type IN (16)
 GROUP BY d.masteritem_id
 */
/*
 #v_totalhutangpiutang
 SELECT UUID() AS id,p.masterpartner_id,h.masterbussiness_id,p.masterpartner_description,p.masterpartner_alias,
 COALESCE(SUM(hf.finance_currentvalue),0) AS sisahutangpiutang, 
 COALESCE(COUNT(*),0) AS jumlahtrans,COALESCE(j.nilaijatem,0) AS nilaijatem,COALESCE(j.jatem,0) AS jatem
 FROM trans h,finance hf,masterpartner p LEFT OUTER JOIN (
 SELECT h.masterpartner_id,SUM(hf.finance_currentvalue) AS nilaijatem, COUNT(*) AS jatem
 FROM trans h,finance hf
 WHERE h.trans_id=hf.trans_id AND h.trans_status IN ("P") AND hf.finance_currentvalue<>0 AND DATE(FROM_UNIXTIME(hf.finance_duedate DIV 1000))<=NOW()
 GROUP BY h.masterpartner_id) AS j ON p.masterpartner_id=j.masterpartner_id
 WHERE h.trans_id=hf.trans_id AND h.masterpartner_id=p.masterpartner_id
 GROUP BY h.masterpartner_id
 */
/*
 #totalstockcard
 SELECT UUID() AS id,d.masteritem_id,
 COALESCE(SUM((CASE WHEN (h.trans_type in (4,5,12,16,17,24,27,30,33)) THEN d.transline_qty ELSE 0 END)),0) AS qtyonhand
 FROM trans h,transline d
 WHERE h.trans_id=d.trans_id AND h.trans_status<>'C' AND d.masteritem_id IS NOT NULL
 GROUP BY d.masteritem_id
 ORDER BY d.masteritem_id
 */
/*
 v_returan
 ---------
 SELECT UUID() AS id,d.transline_id,COALESCE(SUM(d.transline_qtyinput),0) AS terinput,COALESCE(r.telahretur,0) AS telahretur,COALESCE(SUM(d.transline_qtyinput),0)-COALESCE(r.telahretur,0) AS sisaretur
 FROM trans h,transline d LEFT OUTER JOIN (SELECT d.translineparent_id,SUM(d.transline_qtyinput) AS telahretur
 FROM trans h,transline d
 WHERE h.trans_id=d.trans_id AND h.trans_status IN ("P") AND h.trans_type IN (5)
 GROUP BY d.translineparent_id) AS r ON d.transline_id=r.translineparent_id
 WHERE h.trans_id=d.trans_id AND h.trans_status IN ("P") AND h.trans_type IN (4)
 GROUP BY d.transline_id
 UNION
 SELECT UUID() AS id,d.transline_id,COALESCE(SUM(d.transline_qtyinput),0) AS terinput,COALESCE(r.telahretur,0) AS telahretur,COALESCE(SUM(d.transline_qtyinput),0)-COALESCE(r.telahretur,0) AS sisaretur
 FROM trans h,transline d LEFT OUTER JOIN (SELECT d.translineparent_id,SUM(d.transline_qtyinput) AS telahretur
 FROM trans h,transline d
 WHERE h.trans_id=d.trans_id AND h.trans_status IN ("P") AND h.trans_type IN (17)
 GROUP BY d.translineparent_id) AS r ON d.transline_id=r.translineparent_id
 WHERE h.trans_id=d.trans_id AND h.trans_status IN ("P") AND h.trans_type IN (16)
 GROUP BY d.transline_id
 */
/*
 
 
 DROP TEMPORARY TABLE IF EXISTS `tempqtyhitung`;CREATE TEMPORARY TABLE tempqtyhitung(masteritem_id CHAR(36),qtydibuat DECIMAL(20,6));
 INSERT INTO tempqtyhitung VALUES('63200320-1275-11ee-ac39-cb385346047c',1000);
 INSERT INTO tempqtyhitung VALUES('6328dcc0-1275-11ee-ac39-cb385346047c',1000);
 INSERT INTO tempqtyhitung VALUES('7d29f780-1275-11ee-ac39-cb385346047c',1000);
 
 SELECT ii.masteritem_id,ii.masteritem_description AS kdbahan,ii.masteritem_alias AS nmbahan,COALESCE(SUM(d.prodline_qtyused/h.prod_qtyinput*tt.qtydibuat),0) AS qtyterpakai,uu.masterother_description AS nmsatuanbahan,
 COALESCE(sc.onhand,0),p.masterpartner_alias,COALESCE(glb.transline_priceinput/glb.transline_convertionqty,0)
 FROM prod h,masteritemuom iu,masteritem i,tempqtyhitung tt,masterother u,prodline d,masteritemuom iiu,masterother uu,masteritem ii LEFT OUTER JOIN v_gethpp hp ON ii.masteritem_id=hp.masteritem_id
 LEFT OUTER JOIN v_getlastbeli glb ON ii.masteritem_id=glb.masteritem_id LEFT OUTER JOIN masterpartner p ON glb.masterpartner_id=p.masterpartner_id LEFT OUTER JOIN
 (SELECT masteritem_id,SUM(qtyonhand) AS onhand,SUM(qtyavail) AS onavail
 FROM v_stockcard
 GROUP BY masteritem_id) AS sc ON ii.masteritem_id=sc.masteritem_id
 WHERE h.prod_id=d.prod_id AND h.masteritemuom_id=iu.masteritemuom_id AND iu.masteritem_id=i.masteritem_id
 AND d.masteritemuom_id=iiu.masteritemuom_id AND iiu.masteritem_id=ii.masteritem_id AND iu.masteruom_id=u.masterother_id AND i.masteritem_id=tt.masteritem_id AND iiu.masteruom_id=uu.masterother_id
 GROUP BY ii.masteritem_id;
 
 SELECT i.masteritem_id,i.masteritem_description,i.masteritem_alias,t.qtydibuat,u.masterother_description,
 COALESCE(sc.onhand,0),p.masterpartner_alias,COALESCE(glb.transline_priceinput/glb.transline_convertionqty,0)
 FROM tempqtyhitung t,masteritem i LEFT OUTER JOIN v_getlastbeli glb ON i.masteritem_id=glb.masteritem_id LEFT OUTER JOIN masterpartner p ON glb.masterpartner_id=p.masterpartner_id LEFT OUTER JOIN 
 (SELECT masteritem_id,SUM(qtyonhand) AS onhand,SUM(qtyavail) AS onavail
 FROM v_stockcard
 GROUP BY masteritem_id) AS sc ON i.masteritem_id=sc.masteritem_id,masterother u
 WHERE t.masteritem_id=i.masteritem_id AND i.masteruom_id=u.masterother_id AND t.masteritem_id NOT IN (SELECT masteritem_id FROM prod);
 
 
 */
/*
 prod
 
 
 SELECT h.prod_id,i.masteritem_id,i.masteritem_description AS kdjadi,i.masteritem_alias AS nmjadi,h.prod_qtyinput,u.masterother_description AS nmsatuanjadi,ii.masteritem_id,ii.masteritem_description AS kdbahan,ii.masteritem_alias AS nmbahan,d.prodline_qtyused,uu.masterother_description AS nmsatuanbahan,
 sc.onhand,sc.onavail,hp.hpp,glb.transline_priceinput,p.masterpartner_alias
 FROM prod h,masteritemuom iu,masteritem i,masterother u,prodline d,masteritemuom iiu,masterother uu,masteritem ii LEFT OUTER JOIN v_gethpp hp ON ii.masteritem_id=hp.masteritem_id 
 LEFT OUTER JOIN v_getlastbeli glb ON ii.masteritem_id=glb.masteritem_id LEFT OUTER JOIN masterpartner p ON glb.masterpartner_id=p.masterpartner_id LEFT OUTER JOIN
 (SELECT masteritem_id,SUM(qtyonhand) AS onhand,SUM(qtyavail) AS onavail
 FROM v_stockcard
 GROUP BY masteritem_id) AS sc ON ii.masteritem_id=sc.masteritem_id
 WHERE h.prod_id=d.prod_id AND h.masteritemuom_id=iu.masteritemuom_id AND iu.masteritem_id=i.masteritem_id AND d.masteritemuom_id=iiu.masteritemuom_id AND iiu.masteritem_id=ii.masteritem_id AND iu.masteruom_id=u.masterother_id AND iiu.masteruom_id=uu.masterother_id
 AND h.masterbussiness_id='44fd4330-8a62-11ed-b0c2-e59127f33fab'
 
 
 DROP TEMPORARY TABLE IF EXISTS `tempqtyhitung`;CREATE TEMPORARY TABLE tempqtyhitung(masteritem_id CHAR(36),qtydibuat DECIMAL(20,6));
 INSERT INTO tempqtyhitung VALUES('63200320-1275-11ee-ac39-cb385346047c',1000);
 INSERT INTO tempqtyhitung VALUES('6328dcc0-1275-11ee-ac39-cb385346047c',1000);
 
 SELECT h.prod_id,i.masteritem_id,i.masteritem_description AS kdjadi,i.masteritem_alias AS nmjadi,h.prod_qtyinput,tt.qtydibuat,u.masterother_description AS nmsatuanjadi,ii.masteritem_id,
 ii.masteritem_description AS kdbahan,ii.masteritem_alias AS nmbahan,d.prodline_qtyused,d.prodline_qtyused/h.prod_qtyinput*tt.qtydibuat AS qtyterpakai,uu.masterother_description AS nmsatuanbahan,
 sc.onhand,sc.onavail,hp.hpp,glb.transline_priceinput,p.masterpartner_alias
 FROM prod h,masteritemuom iu,masteritem i,tempqtyhitung tt,masterother u,prodline d,masteritemuom iiu,masterother uu,masteritem ii LEFT OUTER JOIN v_gethpp hp ON ii.masteritem_id=hp.masteritem_id 
 LEFT OUTER JOIN v_getlastbeli glb ON ii.masteritem_id=glb.masteritem_id LEFT OUTER JOIN masterpartner p ON glb.masterpartner_id=p.masterpartner_id LEFT OUTER JOIN
 (SELECT masteritem_id,SUM(qtyonhand) AS onhand,SUM(qtyavail) AS onavail
 FROM v_stockcard
 GROUP BY masteritem_id) AS sc ON ii.masteritem_id=sc.masteritem_id
 WHERE h.prod_id=d.prod_id AND h.masteritemuom_id=iu.masteritemuom_id AND iu.masteritem_id=i.masteritem_id AND i.masteritem_id=tt.masteritem_id AND d.masteritemuom_id=iiu.masteritemuom_id AND iiu.masteritem_id=ii.masteritem_id AND iu.masteruom_id=u.masterother_id AND iiu.masteruom_id=uu.masterother_id
 
 SELECT ii.masteritem_id,ii.masteritem_description AS kdbahan,ii.masteritem_alias AS nmbahan,SUM(d.prodline_qtyused/h.prod_qtyinput*tt.qtydibuat) AS qtyterpakai,uu.masterother_description AS nmsatuanbahan,
 sc.onhand,sc.onavail,hp.hpp,glb.transline_priceinput/glb.transline_convertionqty AS lasthbeli,p.masterpartner_alias AS lastpartner
 FROM prod h,masteritemuom iu,masteritem i,tempqtyhitung tt,masterother u,prodline d,masteritemuom iiu,masterother uu,masteritem ii LEFT OUTER JOIN v_gethpp hp ON ii.masteritem_id=hp.masteritem_id 
 LEFT OUTER JOIN v_getlastbeli glb ON ii.masteritem_id=glb.masteritem_id LEFT OUTER JOIN masterpartner p ON glb.masterpartner_id=p.masterpartner_id LEFT OUTER JOIN
 (SELECT masteritem_id,SUM(qtyonhand) AS onhand,SUM(qtyavail) AS onavail
 FROM v_stockcard
 GROUP BY masteritem_id) AS sc ON ii.masteritem_id=sc.masteritem_id
 WHERE h.prod_id=d.prod_id AND h.masteritemuom_id=iu.masteritemuom_id AND iu.masteritem_id=i.masteritem_id AND i.masteritem_id=tt.masteritem_id AND d.masteritemuom_id=iiu.masteritemuom_id AND iiu.masteritem_id=ii.masteritem_id AND iu.masteruom_id=u.masterother_id AND iiu.masteruom_id=uu.masterother_id
 GROUP BY ii.masteritem_id
 
 
 
 
 */
/*
 estimasi hpp untuk produksi
 ---------------------------
 SELECT UUID() AS id,h.prod_id,h.masteritem_id,SUM(d.prodline_qtyused*hp.hpp) AS totalhpp
 FROM prod h,prodline d,masteritem hi,masteritemuom iu,masteritem i LEFT OUTER JOIN v_gethpp hp ON i.masteritem_id=hp.masteritem_id
 WHERE h.prod_id=d.prod_id AND h.masteritem_id=hi.masteritem_id AND d.masteritemuom_id=iu.masteritemuom_id AND iu.masteritem_id=i.masteritem_id
 AND h.masterbussiness_id='44fd4330-8a62-11ed-b0c2-e59127f33fab'
 GROUP BY h.prod_id
 
 
 */
/*
 
 
 
 
 DROP TEMPORARY TABLE IF EXISTS `tempjumlah`;CREATE TEMPORARY TABLE tempjumlah(id BIGINT NOT NULL AUTO_INCREMENT,masteritem_id CHAR(36),masteritem_description VARCHAR(255),pemakaian DECIMAL(33,15),qtyonhand DECIMAL(33,15),hasil DECIMAL(33,15),PRIMARY KEY (id));
 
 INSERT INTO tempjumlah
 SELECT (NULL),i.masteritem_id,i.masteritem_description,d.transline_qtyinput,sc.qtyonhand,sc.qtyonhand-d.transline_qtyinput
 FROM trans h,transline d,masteritem i,
 (SELECT masteritem_id,SUM(qtyonhand) AS qtyonhand
 FROM v_stockcard
 WHERE masterbussiness_id='44fd4330-8a62-11ed-b0c2-e59127f33fab'
 GROUP BY masteritem_id
 ) AS sc
 WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND sc.masteritem_id=i.masteritem_id AND h.trans_id='e7071984-0e7a-11ee-89f1-6c3be5bcbf1b';
 
 INSERT INTO tempjumlah
 SELECT (NULL),i.masteritem_id,i.masteritem_description,SUM(d.transline_qtyinput*dd.prodline_qtyused),sc.qtyonhand,sc.qtyonhand-SUM(d.transline_qtyinput*dd.prodline_qtyused)
 FROM trans h,transline d LEFT OUTER JOIN prod hd ON d.masteritem_id=hd.masteritem_id LEFT OUTER JOIN prodline dd ON hd.prod_id=dd.prod_id 
 LEFT OUTER JOIN masteritemuom iu ON dd.masteritemuom_id=iu.masteritemuom_id LEFT OUTER JOIN masteritem i ON iu.masteritem_id=i.masteritem_id LEFT OUTER JOIN
 (SELECT masteritem_id,SUM(qtyonhand) AS qtyonhand
 FROM v_stockcard
 WHERE masterbussiness_id='44fd4330-8a62-11ed-b0c2-e59127f33fab'
 GROUP BY masteritem_id
 ) AS sc ON sc.masteritem_id=i.masteritem_id
 WHERE h.trans_id=d.trans_id AND iu.masteritem_id=sc.masteritem_id 
 AND h.trans_id='e7071984-0e7a-11ee-89f1-6c3be5bcbf1b'
 GROUP BY i.masteritem_id
 HAVING SUM(d.transline_qty*dd.prodline_qtyused)+sc.qtyonhand<0;
 
 
 SELECT *
 FROM tempjumlah
 ORDER BY id;
 
 
 
 */
/*
 #v_stockcard
 
 SELECT UUID() AS id,d.masteritem_id,d.masterwarehouse_id,d.masterstore_id,h.masterbussiness_id, 
 COALESCE(SUM((CASE WHEN (h.trans_type in (3,4,5,12,15,16,17,24,27,30,33)) THEN d.transline_qty ELSE 0 END)),0) AS qtyonhand,
 COALESCE(SUM((CASE WHEN ((h.trans_type in (2,3)) AND (h.trans_isallocation = 1)) THEN (((COALESCE(d.transline_qtyinput,0) - COALESCE(d.transline_qtyrealize,0)) - COALESCE(d.transline_qtyadjust,0)) * (d.transline_convertionqty * d.transline_vector)) ELSE 0 END)),0) AS onpurchase, 
 COALESCE(SUM((CASE WHEN ((h.trans_type in (26,29)) AND (h.trans_isallocation = 1) AND (d.transline_vector = -(1))) THEN (((COALESCE(d.transline_qtyinput,0) - COALESCE(d.transline_qtyrealize,0)) - COALESCE(d.transline_qtyadjust,0)) * (d.transline_convertionqty * d.transline_vector)) ELSE 0 END)),0) AS inassembly, 
 COALESCE(SUM((CASE WHEN ((h.trans_type in (26,29)) AND (h.trans_isallocation = 1) AND (d.transline_vector = 1)) THEN (((COALESCE(d.transline_qtyinput,0) - COALESCE(d.transline_qtyrealize,0)) - COALESCE(d.transline_qtyadjust,0)) * (d.transline_convertionqty * d.transline_vector)) ELSE 0 END)),0) AS onassembly, 
 COALESCE(SUM((CASE WHEN ((h.trans_type in (14,15)) AND (h.trans_isallocation = 1)) THEN (((COALESCE(d.transline_qtyinput,0) - COALESCE(d.transline_qtyrealize,0)) - COALESCE(d.transline_qtyadjust,0)) * (d.transline_convertionqty * -(d.transline_vector))) ELSE 0 END)),0) AS onorder, 
 COALESCE(SUM((CASE WHEN ((h.trans_type = 32) AND (h.trans_isallocation = 1)) THEN (((COALESCE(d.transline_qtyinput,0) - COALESCE(d.transline_qtyrealize,0)) - COALESCE(d.transline_qtyadjust,0)) * (d.transline_convertionqty * d.transline_vector)) ELSE 0 END)),0) AS ontransfer, 
 COALESCE(SUM((CASE WHEN ((h.trans_type in (1,13,25,28,31)) AND (h.trans_isallocation = 1)) THEN (((COALESCE(d.transline_qtyinput,0) - COALESCE(d.transline_qtyrealize,0)) - COALESCE(d.transline_qtyadjust,0)) * (d.transline_convertionqty * d.transline_vector)) ELSE 0 END)),0) AS onquote, 
 COALESCE(SUM((CASE WHEN ((h.trans_type in (4,5,12,14,15,16,17,24,25,26,27,29,30,32,33)) AND (h.trans_isallocation = 1)) THEN (((COALESCE(d.transline_qtyinput,0) - COALESCE(d.transline_qtyrealize,0)) - COALESCE(d.transline_qtyadjust,0)) * (d.transline_convertionqty * d.transline_vector)) ELSE 0 END)),0) AS qtyavail
 FROM trans h,transline d
 WHERE h.trans_id=d.trans_id AND h.trans_status<>'C' AND d.masteritem_id IS NOT NULL
 #AND h.masterbussiness_id='44fd4330-8a62-11ed-b0c2-e59127f33fab'
 GROUP BY d.masteritem_id,d.masterwarehouse_id,d.masterstore_id,d.masterbussiness_id
 ORDER BY h.masterbussiness_id,d.masteritem_id,d.masterwarehouse_id,d.masterstore_id
 
 
 */
/*
 v_totalhutangpiutng
 
 SELECT p.masterpartner_id,h.masterbussiness_id,p.masterpartner_description,p.masterpartner_alias,SUM(hf.finance_currentvalue) AS sisahutangpiutang,COUNT(*) AS jumlahtrans,j.nilaijatem,j.jatem
 FROM trans h,finance hf,masterpartner p,
 (SELECT h.masterpartner_id,SUM(hf.finance_currentvalue) AS nilaijatem,COUNT(*) AS jatem
 FROM trans h,finance hf
 WHERE h.trans_id=hf.trans_id AND DATE(FROM_UNIXTIME(hf.finance_duedate DIV 1000))<=NOW() AND h.trans_status="P" AND hf.finance_currentvalue<>0
 GROUP BY h.masterpartner_id) AS j
 WHERE h.trans_id=hf.trans_id AND h.masterpartner_id=p.masterpartner_id AND h.masterpartner_id=j.masterpartner_id AND h.trans_status="P" AND hf.finance_currentvalue<>0
 GROUP BY h.masterpartner_id
 */
#v_totalcrud
#-----------
/*
 SELECT UUID() AS id,h.trans_id ,h.masterbussiness_id,h.trans_text,h.trans_type,COALESCE(dd.transline_priceinput,0)+COALESCE(um.uangmuka,0) AS uangmuka, SUM(d.transline_netvalue) AS totaldpp, SUM(d.transline_taxvalue) AS totalppn, 
 CASE
 WHEN h.trans_type IN (6) THEN SUM(d.transline_priceinput*d.transline_vector) 
 WHEN h.trans_type IN (18) THEN SUM(d.transline_priceinput*-d.transline_vector)
 WHEN h.trans_type NOT IN (6,18) THEN SUM((d.transline_netvalue + d.transline_taxvalue))
 END AS totalnilai,
 CASE 
 WHEN (h.trans_type IN (4,16,11,23)) THEN COALESCE(fh.finance_currentvalue,0)
 ELSE (SUM((COALESCE(d.transline_netvalue,0) + COALESCE(d.transline_taxvalue,0))) ) - COALESCE(um.uangmuka,0) - COALESCE(dd.transline_priceinput,0)
 END AS finance_currentvalue,
 CASE
 WHEN (h.trans_type in (4,16,11,23)) THEN (CASE WHEN (fh.finance_currentvalue = 0) THEN 'Lunas' 
 WHEN ((fh.finance_originalvalue * fh.finance_exchangevalue) = fh.finance_currentvalue) THEN 'Belum Dibayar' 
 WHEN ((fh.finance_originalvalue * fh.finance_exchangevalue) <> fh.finance_currentvalue) THEN 'Dibayar Dibayar' 
 WHEN (fh.finance_currentvalue < 0) THEN 'Kelebihan Bayar' END) 
 ELSE (CASE 
 WHEN ((SUM((COALESCE(d.transline_netvalue,0) + COALESCE(d.transline_taxvalue,0))) - COALESCE(um.uangmuka,0)) = 0) THEN 'Lunas' 
 WHEN ((SUM((COALESCE(d.transline_netvalue,0) + COALESCE(d.transline_taxvalue,0))) - COALESCE(um.uangmuka,0)) <> SUM((COALESCE(d.transline_netvalue,0) + COALESCE(d.transline_taxvalue,0)))) THEN 'Dibayar Sebagian' 
 WHEN ((SUM((COALESCE(d.transline_netvalue,0) + COALESCE(d.transline_taxvalue,0))) - COALESCE(um.uangmuka,0)) = SUM((COALESCE(d.transline_netvalue,0) + COALESCE(d.transline_taxvalue,0)))) THEN 'Belum Dibayar' 
 WHEN ((SUM((COALESCE(d.transline_netvalue,0) + COALESCE(d.transline_taxvalue,0))) - COALESCE(um.uangmuka,0)) < 0) THEN 'Kelebihan Bayar' END)
 END AS statusbayar,
 CASE 
 WHEN (h.trans_status = 'P') THEN 'FINISH' 
 WHEN (h.trans_status = 'O') THEN 'OPEN' 
 WHEN (h.trans_status = 'C') THEN 'VOID' 
 WHEN (h.trans_status = 'H') THEN 'PARTIAL' 
 WHEN (h.trans_status = 'OD') THEN 'OVER' 
 WHEN (h.trans_status = 'CT') THEN 'CLOSED TRANS' 
 END AS statustrans
 FROM trans h
 LEFT OUTER JOIN transline dd ON h.trans_id=dd.trans_id AND dd.transline_ishide=1
 LEFT OUTER JOIN finance fh ON h.trans_id=fh.trans_id
 LEFT OUTER JOIN (
 SELECT h.transparent_id,SUM(d.transline_netvalue) AS uangmuka
 FROM trans h,transline d
 WHERE h.trans_id=d.trans_id AND h.trans_status<>"C" AND h.trans_type IN (2,7,14,19) AND d.transline_ishide=0
 GROUP BY h.transparent_id) AS um ON h.trans_id=um.transparent_id,transline d
 WHERE h.trans_id=d.trans_id AND h.trans_status<>"C" AND d.transline_ishide=0 AND h.trans_type IN (1,2,3,4,5,6,7,11,13,14,15,16,17,18,23,40,41,42,50,51)
 AND h.masterbussiness_id='44fd4330-8a62-11ed-b0c2-e59127f33fab'
 GROUP BY h.trans_id
 ORDER BY h.trans_entrydate,h.trans_waktu
 
 
 */
#v_approval
#----------
/*
 SELECT h.trans_id,
 CASE
 WHEN SUM(a.transapprove_status)=0 THEN 'BELUM DI APPROVE'
 WHEN SUM(a.transapprove_status)>=COUNT(*) THEN 'APPROVED'
 WHEN (b.generalsettingapprove_operator=0) AND SUM(a.transapprove_status)>0 THEN 'APPROVED'
 WHEN (b.generalsettingapprove_operator=1) AND SUM(a.transapprove_status)=COUNT(*) THEN 'APPROVED'
 WHEN (b.generalsettingapprove_operator=1) AND SUM(a.transapprove_status)>0 THEN 'APPROVED PARTIAL'
 END AS statusapproval
 FROM trans h,transapprove a,generalsettingapprove b,masterprefix f
 WHERE h.trans_id=a.trans_id AND h.masterbussiness_id=b.masterbussiness_id AND b.masterprefix_id=f.masterprefix_id AND h.trans_type=f.masterprefix_type AND h.masterbussiness_id=f.masterbussiness_id
 GROUP BY h.trans_id;
 
 
 #v_trans
 SELECT h.trans_id,h.trans_text,h.trans_type,DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) AS trans_entrydate,h.trans_description,p.masterpartner_id,h.trans_status,i.masteritem_description,i.masteritem_alias,a.masteraccount_description,a.masteraccount_alias,d.transline_qtyinput,d.transline_convertionqty,d.transline_vector,d.transline_qty,d.transline_priceinput,d.transline_discinput,d.transline_netvalue,d.transline_taxvalue,u.masterother_description AS nmsatuan,w.masterwarehouse_description,s.masterother_description AS nmstore,dh.translinehpp_hpp,dh.translinehpp_totalhpp
 FROM trans h LEFT OUTER JOIN masterpartner p ON h.masterpartner_id=p.masterpartner_id,transline d LEFT OUTER JOIN masteritem i ON d.masteritem_id=i.masteritem_id LEFT OUTER JOIN masteraccount a ON d.masteraccount_id=a.masteraccount_id 
 LEFT OUTER JOIN masteritemuom iu ON d.masteritemuom_id=iu.masteritemuom_id LEFT OUTER JOIN masterother u ON iu.masteruom_id=u.masterother_id LEFT OUTER JOIN masterwarehouse w ON d.masterwarehouse_id=w.masterwarehouse_id 
 LEFT OUTER JOIN masterother s ON d.masterstore_id=s.masterother_id LEFT OUTER JOIN translinehpp dh ON d.transline_id=dh.transline_id
 WHERE h.trans_id=d.trans_id AND h.trans_type IN (3,4,5,12,15,16,17,24,27,30) AND h.masterbussiness_id='44fd4330-8a62-11ed-b0c2-e59127f33fab'
 ORDER BY h.trans_waktu;
 
 
 #v_gl
 SELECT h.gl_id,h.trans_id,h.gl_text,gl_description,DATE(FROM_UNIXTIME(h.gl_entrydate DIV 1000)) AS gl_entrydate,e.masterother_description,d.glline_exchangevalue,d.glline_amountvalue*d.glline_vector
 FROM trans hh LEFT OUTER JOIN gl h ON hh.trans_id=h.trans_id LEFT OUTER JOIN glline d ON h.gl_id=d.gl_id LEFT OUTER JOIN masteraccount a ON d.masteraccount_id=a.masteraccount_id LEFT OUTER JOIN masteritem i ON d.masteritem_id=i.masteritem_id LEFT OUTER JOIN masterother e ON d.masterexchange_id=e.masterother_id
 WHERE h.gl_id=d.gl_id AND h.masterbussiness_id='44fd4330-8a62-11ed-b0c2-e59127f33fab'
 ORDER BY hh.trans_entrydate
 
 
 */
END / / DELIMITER;
-- Dumping structure for view gogabook.v_rekonsilestatus
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_rekonsilestatus` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`trans_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`status` VARCHAR(18) NULL COLLATE 'utf8mb4_general_ci'
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_stockcard
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_stockcard` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`masteritem_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterwarehouse_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterstore_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`masterbussiness_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`qtyonhand` DECIMAL(55, 15) NULL,
	`onpurchase` DECIMAL(65, 30) NULL,
	`inassembly` DECIMAL(65, 30) NULL,
	`onassembly` DECIMAL(65, 30) NULL,
	`onorder` DECIMAL(65, 30) NULL,
	`ontransfer` DECIMAL(65, 30) NULL,
	`onquote` DECIMAL(65, 30) NULL,
	`qtyavail` DECIMAL(65, 30) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_totalcrud
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_totalcrud` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`trans_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterbussiness_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_text` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_type` TINYINT(3) UNSIGNED NOT NULL,
	`uangmuka` DECIMAL(65, 15) NULL,
	`totaldpp` DECIMAL(55, 2) NULL,
	`totalppn` DECIMAL(55, 2) NULL,
	`totalnilai` DECIMAL(65, 15) NULL,
	`finance_currentvalue` DECIMAL(65, 15) NULL,
	`statusbayar` VARCHAR(16) NULL COLLATE 'utf8mb4_general_ci',
	`statustrans` VARCHAR(12) NULL COLLATE 'utf8mb4_general_ci'
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_totalhutangpiutang
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_totalhutangpiutang` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`masterpartner_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterbussiness_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_description` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`sisahutangpiutang` DECIMAL(42, 6) NULL,
	`jumlahtrans` BIGINT(21) NOT NULL,
	`nilaijatem` DECIMAL(42, 6) NULL,
	`jatem` BIGINT(21) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_totalstockcard
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_totalstockcard` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`masteritem_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`qtyonhand` DECIMAL(55, 15) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_trans
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_trans` (
	`trans_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_text` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`trans_type` TINYINT(3) UNSIGNED NOT NULL,
	`trans_entrydate` DATE NULL,
	`trans_description` VARCHAR(500) NULL COLLATE 'latin1_swedish_ci',
	`masterpartner_id` CHAR(36) NULL COLLATE 'latin1_swedish_ci',
	`trans_status` ENUM('P', 'O', 'C', 'H', 'OD', 'CT') NOT NULL COLLATE 'latin1_swedish_ci',
	`masteritem_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masteritem_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masteraccount_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masteraccount_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`transline_qtyinput` DECIMAL(33, 15) UNSIGNED NOT NULL,
	`transline_convertionqty` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_vector` TINYINT(4) NULL,
	`transline_qty` DECIMAL(33, 15) NULL,
	`transline_priceinput` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_discinput` DECIMAL(33, 15) UNSIGNED NULL,
	`transline_netvalue` DECIMAL(33, 2) NULL,
	`transline_taxvalue` DECIMAL(33, 2) NULL,
	`nmsatuan` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterwarehouse_description` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`nmstore` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`translinehpp_hpp` DECIMAL(33, 15) NULL,
	`translinehpp_totalhpp` DECIMAL(33, 15) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_transretur
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_transretur` (
	`id` VARCHAR(36) NOT NULL COLLATE 'utf8_general_ci',
	`transline_id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`terinput` DECIMAL(55, 15) NULL,
	`telahretur` DECIMAL(55, 15) NULL,
	`sisaretur` DECIMAL(56, 15) NULL
) ENGINE = MyISAM;
-- Dumping structure for view gogabook.v_uniontable
-- Creating temporary table to overcome VIEW dependency errors
CREATE TABLE `v_uniontable` (
	`id` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterentity_description` VARCHAR(255) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterentity_alias` VARCHAR(255) NULL COLLATE 'latin1_swedish_ci',
	`masterentity_bussiness` CHAR(36) NOT NULL COLLATE 'latin1_swedish_ci',
	`masterentity_tablename` VARCHAR(18) NOT NULL COLLATE 'utf8mb4_general_ci'
) ENGINE = MyISAM;
-- Dumping structure for procedure gogabook.X_CalcFIFO
DELIMITER / / CREATE PROCEDURE `X_CalcFIFO`(IN `myid` CHAR(36)) BEGIN
DECLARE translineid,
	masteritemid,
	transvaluasiid,
	masterbussinessid CHAR(36);
DECLARE translineqty,
	qtyloop,
	qtyvaluasi,
	totalhppfly,
	totalqtyfly DECIMAL(33, 15);
DECLARE transtype,
	translinevector SMALLINT;
DECLARE done INT DEFAULT 0;
DECLARE cursor_name CURSOR FOR
SELECT d.transline_id,
	h.masterbussiness_id,
	h.trans_type,
	d.masteritem_id,
	d.transline_qty,
	d.transline_vector
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = 1
	AND h.trans_id = myid
ORDER BY d.transline_nourut;
DECLARE CONTINUE HANDLER FOR NOT FOUND
SET done = 1;
OPEN cursor_name;
read_loop: LOOP FETCH cursor_name INTO translineid,
masterbussinessid,
transtype,
masteritemid,
translineqty,
translinevector;
IF done THEN LEAVE read_loop;
END IF;
IF transtype = 16 THEN
SET qtyloop = - translineqty;
SET transvaluasiid =(NULL);
SET totalhppfly = 0;
SET totalqtyfly = 0;
REPEAT
SET transvaluasiid =(
		SELECT transvaluasi_id
		FROM transvaluasi
		WHERE masteritem_id = masteritemid
			AND transvaluasi_qtycurrent > 0
		ORDER BY transvaluasi_entrydate
		LIMIT 1
	);
IF transvaluasiid IS NOT NULL THEN
SET qtyvaluasi =(
		SELECT transvaluasi_qtycurrent
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
IF qtyloop - qtyvaluasi > 0 THEN
SET totalhppfly = totalhppfly +(
		SELECT COALESCE(transvaluasi_qtycurrent, 0) * COALESCE(transvaluasi_hpp, 0)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
SET totalqtyfly = totalqtyfly +(
		SELECT COALESCE(transvaluasi_qtycurrent, 0)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
UPDATE transvaluasi
SET transvaluasi_qtycurrent = 0
WHERE transvaluasi_id = transvaluasiid;
SET qtyloop = qtyloop - qtyvaluasi;
ELSEIF (qtyloop - qtyvaluasi) < 0 THEN
SET totalhppfly = totalhppfly +(
		SELECT COALESCE(transvaluasi_hpp, 0) *(
				COALESCE(transvaluasi_qtycurrent, 0) -(
					COALESCE(transvaluasi_qtycurrent, 0) - COALESCE(qtyloop, 0)
				)
			)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
SET totalqtyfly = totalqtyfly +(
		SELECT COALESCE(transvaluasi_qtycurrent, 0) -(
				COALESCE(transvaluasi_qtycurrent, 0) - COALESCE(qtyloop, 0)
			)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
UPDATE transvaluasi
SET transvaluasi_qtycurrent = COALESCE(transvaluasi_qtycurrent, 0) - COALESCE(qtyloop, 0)
WHERE transvaluasi_id = transvaluasiid;
SET qtyloop = 0;
ELSEIF qtyloop - qtyvaluasi = 0 THEN
SET totalhppfly = totalhppfly +(
		SELECT COALESCE(transvaluasi_hpp, 0) * COALESCE(transvaluasi_qtycurrent, 0)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
SET totalqtyfly = totalqtyfly +(
		SELECT COALESCE(transvaluasi_qtycurrent, 0)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
UPDATE transvaluasi
SET transvaluasi_qtycurrent = 0
WHERE transvaluasi_id = transvaluasiid;
SET qtyloop = 0;
END IF;
ELSE
SET totalqtyfly = totalqtyfly + qtyloop;
SET totalhppfly = totalhppfly +(
		SELECT COALESCE(transvaluasi_hpp, 0) * qtyloop
		FROM transvaluasi
		WHERE masteritem_id = masteritemid
		ORDER BY transvaluasi_entrydate DESC
		LIMIT 1
	);
SET qtyloop = 0;
END IF;
UNTIL (qtyloop = 0)
END REPEAT;
INSERT INTO translinehpp
VALUES(
		UUID(),
		translineid,
		masterbussinessid,
		totalhppfly / totalqtyfly,
		totalhppfly
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = totalhppfly / totalqtyfly,
	translinehpp_totalhpp = - totalhppfly;
ELSEIF transtype = 27 THEN IF translinevector = -1 THEN
SET qtyloop = - translineqty;
SET transvaluasiid =(NULL);
SET totalhppfly = 0;
SET totalqtyfly = 0;
REPEAT
SET transvaluasiid =(
		SELECT transvaluasi_id
		FROM transvaluasi
		WHERE masteritem_id = masteritemid
			AND transvaluasi_qtycurrent > 0
		ORDER BY transvaluasi_entrydate
		LIMIT 1
	);
IF transvaluasiid IS NOT NULL THEN
SET qtyvaluasi =(
		SELECT transvaluasi_qtycurrent
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
IF qtyloop - qtyvaluasi > 0 THEN
SET totalhppfly = totalhppfly +(
		SELECT COALESCE(transvaluasi_qtycurrent, 0) * COALESCE(transvaluasi_hpp, 0)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
SET totalqtyfly = totalqtyfly +(
		SELECT COALESCE(transvaluasi_qtycurrent, 0)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
UPDATE transvaluasi
SET transvaluasi_qtycurrent = 0
WHERE transvaluasi_id = transvaluasiid;
SET qtyloop = qtyloop - qtyvaluasi;
ELSEIF (qtyloop - qtyvaluasi) < 0 THEN
SET totalhppfly = totalhppfly +(
		SELECT COALESCE(transvaluasi_hpp, 0) *(
				COALESCE(transvaluasi_qtycurrent, 0) -(
					COALESCE(transvaluasi_qtycurrent, 0) - COALESCE(qtyloop, 0)
				)
			)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
SET totalqtyfly = totalqtyfly +(
		SELECT COALESCE(transvaluasi_qtycurrent, 0) -(
				COALESCE(transvaluasi_qtycurrent, 0) - COALESCE(qtyloop, 0)
			)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
UPDATE transvaluasi
SET transvaluasi_qtycurrent = COALESCE(transvaluasi_qtycurrent, 0) - COALESCE(qtyloop, 0)
WHERE transvaluasi_id = transvaluasiid;
SET qtyloop = 0;
ELSEIF qtyloop - qtyvaluasi = 0 THEN
SET totalhppfly = totalhppfly +(
		SELECT COALESCE(transvaluasi_hpp, 0) * COALESCE(transvaluasi_qtycurrent, 0)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
SET totalqtyfly = totalqtyfly +(
		SELECT COALESCE(transvaluasi_qtycurrent, 0)
		FROM transvaluasi
		WHERE transvaluasi_id = transvaluasiid
	);
UPDATE transvaluasi
SET transvaluasi_qtycurrent = 0
WHERE transvaluasi_id = transvaluasiid;
SET qtyloop = 0;
END IF;
ELSE
SET totalqtyfly = totalqtyfly + qtyloop;
SET totalhppfly = totalhppfly +(
		SELECT COALESCE(transvaluasi_hpp, 0) * qtyloop
		FROM transvaluasi
		WHERE masteritem_id = masteritemid
		ORDER BY transvaluasi_entrydate DESC
		LIMIT 1
	);
SET qtyloop = 0;
END IF;
UNTIL (qtyloop = 0)
END REPEAT;
INSERT INTO translinehpp
VALUES(
		UUID(),
		translineid,
		masterbussinessid,
		totalhppfly / totalqtyfly,
		totalhppfly
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = totalhppfly / totalqtyfly,
	translinehpp_totalhpp = - totalhppfly;
END IF;
END IF;
END LOOP;
IF transtype = 27 THEN
SELECT 123;
INSERT INTO transvaluasi
SELECT UUID(),
	d.transline_id,
	d.masteritem_id,
	d.masterbussiness_id,
	h.trans_entrydate,
	h.trans_type,
	d.transline_qty,
	d.transline_qty,
	xx.jumhppassm
FROM trans h,
	transline d,
	masteritem i,
(
		SELECT d.trans_id,
			SUM(dh.translinehpp_totalhpp) AS jumhppassm
		FROM transline d
			LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id
		WHERE d.transline_vector = -1
			AND d.trans_id = myid
	) AS xx
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id = xx.trans_id
	AND d.transline_vector = 1
	AND d.trans_id = myid;
END IF;
CLOSE cursor_name;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_CalcSuperFIFO
DELIMITER / / CREATE PROCEDURE `X_CalcSuperFIFO`(IN `myid` CHAR(36)) BEGIN
DECLARE transid,
	translineid,
	masteritemid,
	transvaluasiid,
	transparentvaluasiid,
	translineparentvaluasiid,
	masterbussinessid CHAR(36);
DECLARE translineqty,
	qtyloop,
	qtyvaluasi DECIMAL(33, 15);
DECLARE transtype,
	translinevector SMALLINT;
DECLARE done INT DEFAULT 0;
DECLARE cursor_name CURSOR FOR
SELECT h.trans_id,
	d.transline_id,
	d.masteritem_id,
	h.masterbussiness_id,
	h.trans_type,
	d.masteritem_id,
	d.transline_qty,
	d.transline_vector
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = 1
	AND h.trans_id = myid
ORDER BY d.transline_vector,
	d.transline_nourut;
DECLARE CONTINUE HANDLER FOR NOT FOUND
SET done = 1;
OPEN cursor_name;
read_loop: LOOP FETCH cursor_name INTO transid,
translineid,
masteritemid,
masterbussinessid,
transtype,
masteritemid,
translineqty,
translinevector;
IF done THEN LEAVE read_loop;
END IF;
IF transtype = 4 THEN
SET qtyloop = translineqty;
SET transvaluasiid =(NULL);
REPEAT
SET transvaluasiid =(
		SELECT transsupervaluasi_id
		FROM transline d,
			transsupervaluasi v
		WHERE d.transline_id = v.transline_id
			AND d.masteritem_id = masteritemid
			AND v.translineparent_id IS NULL
			AND d.masterbussiness_id = masterbussinessid
		LIMIT 1
	);
IF transvaluasiid IS NOT NULL THEN
SET transparentvaluasiid =(
		SELECT d.trans_id
		FROM transline d,
			transsupervaluasi v
		WHERE d.transline_id = v.transline_id
			AND d.masteritem_id = masteritemid
			AND v.translineparent_id IS NULL
			AND d.masterbussiness_id = masterbussinessid
		LIMIT 1
	);
SET translineparentvaluasiid =(
		SELECT d.transline_id
		FROM transline d,
			transsupervaluasi v
		WHERE d.transline_id = v.transline_id
			AND d.masteritem_id = masteritemid
			AND v.translineparent_id IS NULL
			AND d.masterbussiness_id = masterbussinessid
		LIMIT 1
	);
SET qtyvaluasi =(
		SELECT transsupervaluasi_qty
		FROM transsupervaluasi
		WHERE transsupervaluasi_id = transvaluasiid
	);
IF qtyloop - qtyvaluasi > 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid,
	transparent_id = transid
WHERE transsupervaluasi_id = transvaluasiid;
SET qtyloop = qtyloop - qtyvaluasi;
ELSEIF (qtyloop - qtyvaluasi) < 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid,
	transparent_id = transid,
	transsupervaluasi_qty = qtyloop
WHERE transsupervaluasi_id = transvaluasiid;
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineparentvaluasiid,
		transparentvaluasiid,
(NULL),
(NULL),
		masterbussinessid,
		qtyvaluasi - qtyloop
	);
SET qtyloop = 0;
ELSEIF qtyloop - qtyvaluasi = 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid,
	transparent_id = transid
WHERE transsupervaluasi_id = transvaluasiid;
SET qtyloop = 0;
END IF;
ELSE
SET qtyloop = 0;
END IF;
UNTIL (qtyloop = 0)
END REPEAT;
ELSEIF transtype = 16 THEN
SET qtyloop = - translineqty;
SET transvaluasiid =(NULL);
REPEAT
SET transvaluasiid =(
		SELECT d.transline_id
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND h.trans_type IN (4, 12, 17, 24, 27, 30)
			AND d.transline_vector = 1
			AND (d.transline_qty - COALESCE(hp.qtypakai, 0)) > 0
			AND d.masteritem_id = masteritemid
		ORDER BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
			d.transline_nourut,
			h.trans_waktu
		LIMIT 1
	);
IF transvaluasiid IS NOT NULL THEN
SET transparentvaluasiid =(
		SELECT h.trans_id
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND h.trans_type IN (4, 12, 17, 24, 27, 30)
			AND d.transline_vector = 1
			AND (d.transline_qty - COALESCE(hp.qtypakai, 0)) > 0
			AND d.masteritem_id = masteritemid
		ORDER BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
			d.transline_nourut,
			h.trans_waktu
		LIMIT 1
	);
SET qtyvaluasi =(
		SELECT d.transline_qty - COALESCE(hp.qtypakai, 0)
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND d.transline_id = transvaluasiid
	);
IF qtyloop - qtyvaluasi > 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transid,
		transvaluasiid,
		transparentvaluasiid,
		masterbussinessid,
		qtyvaluasi
	);
SET qtyloop = qtyloop - qtyvaluasi;
ELSEIF (qtyloop - qtyvaluasi) < 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transid,
		transvaluasiid,
		transparentvaluasiid,
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
ELSEIF qtyloop - qtyvaluasi = 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transid,
		transvaluasiid,
		transparentvaluasiid,
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
END IF;
ELSE
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transid,
(NULL),
(NULL),
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
END IF;
UNTIL (qtyloop = 0)
END REPEAT;
ELSEIF transtype = 24 THEN IF translinevector = -1 THEN
SET qtyloop = - translineqty;
SET transvaluasiid =(NULL);
REPEAT
SET transvaluasiid =(
		SELECT d.transline_id
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND h.trans_type IN (4, 12, 17, 24, 27, 30)
			AND d.transline_vector = 1
			AND (d.transline_qty - COALESCE(hp.qtypakai, 0)) > 0
			AND d.masteritem_id = masteritemid
		ORDER BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
			d.transline_nourut,
			h.trans_waktu
		LIMIT 1
	);
IF transvaluasiid IS NOT NULL THEN
SET qtyvaluasi =(
		SELECT d.transline_qty - COALESCE(hp.qtypakai, 0)
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND d.transline_id = transvaluasiid
	);
IF qtyloop - qtyvaluasi > 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transvaluasiid,
		masterbussinessid,
		qtyvaluasi
	);
SET qtyloop = qtyloop - qtyvaluasi;
ELSEIF (qtyloop - qtyvaluasi) < 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transvaluasiid,
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
ELSEIF qtyloop - qtyvaluasi = 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transvaluasiid,
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
END IF;
ELSE
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
(NULL),
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
END IF;
UNTIL (qtyloop = 0)
END REPEAT;
ELSEIF translinevector = 1 THEN
SET qtyloop = translineqty;
SET transvaluasiid =(NULL);
REPEAT
SET transvaluasiid =(
		SELECT transsupervaluasi_id
		FROM transline d,
			transsupervaluasi v
		WHERE d.transline_id = v.transline_id
			AND d.masteritem_id = masteritemid
			AND v.translineparent_id IS NULL
			AND d.masterbussiness_id = masterbussinessid
		LIMIT 1
	);
IF transvaluasiid IS NOT NULL THEN
SET qtyvaluasi =(
		SELECT transsupervaluasi_qty
		FROM transsupervaluasi
		WHERE transsupervaluasi_id = transvaluasiid
	);
IF qtyloop - qtyvaluasi > 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid
WHERE transsupervaluasi_id = transvaluasiid;
SET qtyloop = qtyloop - qtyvaluasi;
ELSEIF (qtyloop - qtyvaluasi) < 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid,
	transsupervaluasi_qty = qtyloop
WHERE transsupervaluasi_id = transvaluasiid;
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
(NULL),
		masterbussinessid,
		qtyvaluasi - qtyloop
	);
SET qtyloop = 0;
ELSEIF qtyloop - qtyvaluasi = 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid
WHERE transsupervaluasi_id = transvaluasiid;
SET qtyloop = 0;
END IF;
ELSE
SET qtyloop = 0;
END IF;
UNTIL (qtyloop = 0)
END REPEAT;
END IF;
ELSEIF transtype = 27 THEN IF translinevector = -1 THEN
SET qtyloop = - translineqty;
SET transvaluasiid =(NULL);
REPEAT
SET transvaluasiid =(
		SELECT d.transline_id
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND h.trans_type IN (4, 12, 17, 24, 27, 30)
			AND d.transline_vector = 1
			AND (d.transline_qty - COALESCE(hp.qtypakai, 0)) > 0
			AND d.masteritem_id = masteritemid
		ORDER BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
			d.transline_nourut,
			h.trans_waktu
		LIMIT 1
	);
IF transvaluasiid IS NOT NULL THEN
SET transparentvaluasiid =(
		SELECT d.trans_id
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND h.trans_type IN (4, 12, 17, 24, 27, 30)
			AND d.transline_vector = 1
			AND (d.transline_qty - COALESCE(hp.qtypakai, 0)) > 0
			AND d.masteritem_id = masteritemid
		ORDER BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
			d.transline_nourut,
			h.trans_waktu
		LIMIT 1
	);
SET translineparentvaluasiid =(
		SELECT d.transline_id
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND h.trans_type IN (4, 12, 17, 24, 27, 30)
			AND d.transline_vector = 1
			AND (d.transline_qty - COALESCE(hp.qtypakai, 0)) > 0
			AND d.masteritem_id = masteritemid
		ORDER BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
			d.transline_nourut,
			h.trans_waktu
		LIMIT 1
	);
SET qtyvaluasi =(
		SELECT d.transline_qty - COALESCE(hp.qtypakai, 0)
		FROM trans h,
			transline d
			LEFT OUTER JOIN (
				SELECT translineparent_id,
					SUM(transsupervaluasi_qty) AS qtypakai
				FROM transsupervaluasi
				WHERE masterbussiness_id = masterbussinessid
				GROUP BY translineparent_id
			) AS hp ON d.transline_id = hp.translineparent_id,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status IN ("P")
			AND t.masteritemtype_isstock = 1
			AND d.transline_id = transvaluasiid
	);
IF qtyloop - qtyvaluasi > 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transid,
		transvaluasiid,
		transparentvaluasiid,
		masterbussinessid,
		qtyvaluasi
	);
SET qtyloop = qtyloop - qtyvaluasi;
ELSEIF (qtyloop - qtyvaluasi) < 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transid,
		transvaluasiid,
		transparentvaluasiid,
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
ELSEIF qtyloop - qtyvaluasi = 0 THEN
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transid,
		transvaluasiid,
		transparentvaluasiid,
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
END IF;
ELSE
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineid,
		transid,
(NULL),
(NULL),
		masterbussinessid,
		qtyloop
	);
SET qtyloop = 0;
END IF;
UNTIL (qtyloop = 0)
END REPEAT;
ELSEIF translinevector = 1 THEN
SET qtyloop = translineqty;
SET transvaluasiid =(NULL);
REPEAT
SET transvaluasiid =(
		SELECT transsupervaluasi_id
		FROM transline d,
			transsupervaluasi v
		WHERE d.transline_id = v.transline_id
			AND d.masteritem_id = masteritemid
			AND v.translineparent_id IS NULL
			AND d.masterbussiness_id = masterbussinessid
		LIMIT 1
	);
IF transvaluasiid IS NOT NULL THEN
SET transparentvaluasiid =(
		SELECT d.trans_id
		FROM transline d,
			transsupervaluasi v
		WHERE d.transline_id = v.transline_id
			AND d.masteritem_id = masteritemid
			AND v.translineparent_id IS NULL
			AND d.masterbussiness_id = masterbussinessid
		LIMIT 1
	);
SET translineparentvaluasiid =(
		SELECT d.transline_id
		FROM transline d,
			transsupervaluasi v
		WHERE d.transline_id = v.transline_id
			AND d.masteritem_id = masteritemid
			AND v.translineparent_id IS NULL
			AND d.masterbussiness_id = masterbussinessid
		LIMIT 1
	);
SET qtyvaluasi =(
		SELECT transsupervaluasi_qty
		FROM transsupervaluasi
		WHERE transsupervaluasi_id = transvaluasiid
	);
IF qtyloop - qtyvaluasi > 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid,
	transparent_id = transid
WHERE transsupervaluasi_id = transvaluasiid;
SET qtyloop = qtyloop - qtyvaluasi;
ELSEIF (qtyloop - qtyvaluasi) < 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid,
	transparent_id = transid,
	transsupervaluasi_qty = qtyloop
WHERE transsupervaluasi_id = transvaluasiid;
INSERT INTO transsupervaluasi
VALUES(
		UUID(),
		translineparentvaluasiid,
		transparentvaluasiid,
(NULL),
(NULL),
		masterbussinessid,
		qtyvaluasi - qtyloop
	);
SET qtyloop = 0;
ELSEIF qtyloop - qtyvaluasi = 0 THEN
UPDATE transsupervaluasi
SET translineparent_id = translineid,
	transparent_id = transid
WHERE transsupervaluasi_id = transvaluasiid;
SET qtyloop = 0;
END IF;
ELSE
SET qtyloop = 0;
END IF;
UNTIL (qtyloop = 0)
END REPEAT;
END IF;
END IF;
END LOOP;
CLOSE cursor_name;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_CommitData
DELIMITER / / CREATE PROCEDURE `X_CommitData`(
	IN `myid` CHAR(36),
	IN `mymode` ENUM('I', 'U', 'D')
) BEGIN
DECLARE ctr,
	mytype INT;
DECLARE mybussinesscode,
	qqidpartner CHAR(36);
DECLARE mytgl DATE;
DECLARE allow BOOLEAN;
DECLARE durasieditjual DECIMAL(33, 15);
DECLARE myMsg,
	myMsgOverStok,
	myMsgRetur,
	myMsgSerialPlus,
	myMsgSerialMinus,
	myMsgBatchMinus,
	myMsgLimitTrans,
	myMsgLimitNotaUnpaid,
	myMsgLimitMaxHari,
	myMsgSerialReturTidakDitemukan,
	myMsgBatchReturTidakDitemukan,
	myMsgOrderLebihDari,
	myMsgDepositOrder,
	myMsgSerialBatchMinus TEXT;
DECLARE specialty CONDITION FOR SQLSTATE '45000';
SET myMsgSerialBatchMinus = ' BATCH/SERIAL TIDAK BOLEH MINUS';
SET myMsgBatchReturTidakDitemukan = ' TIDAK DITEMUKAN BATCH PADA TRANSAKSI INDUK';
SET myMsgSerialReturTidakDitemukan = ' TIDAK DITEMUKAN SERIAL PADA TRANSAKSI INDUK';
SET myMsgRetur = ' MELEBIHI JUMLAH TRANSAKSI YANG DIRETUR';
SET myMsgOverStok = ' MELEBIHI PERSEDIAAN';
SET myMsgSerialPlus = ' SERIAL SUDAH TERDAFTAR';
SET myMsgSerialMinus = ' SERIAL TIDAK VALID';
SET myMsgBatchMinus = ' BATCH TIDAK VALID';
SET myMsgLimitTrans = ' MELEBIHI LIMIT TRANSAKSI YANG DITENTUKAN';
SET myMsgLimitNotaUnpaid = ' MELEBIHI JUMLAH NOTA BELUM TERBAYAR';
SET myMsgLimitMaxHari = ' MELEBIHI HARI TEMPO PIUTANG';
SET myMsgOrderLebihDari = ' MELEBIHI QTY ORDER';
SET myMsgDepositOrder = ' SUDAH TERDAPAT PENGIRIMAN/INVOICE';
SET myMsg = ' ';
SET ctr = 1;
SET allow = TRUE;
SET mytype =(
		SELECT trans_type
		FROM trans
		WHERE trans_id = myid
	);
SET mybussinesscode =(
		SELECT masterbussiness_id
		FROM trans
		WHERE trans_id = myid
	);
SET mytgl =(
		SELECT DATE(FROM_UNIXTIME(trans_entrydate DIV 1000))
		FROM trans
		WHERE trans_id = myid
	);
SET qqidpartner =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	);
SET SESSION group_concat_max_len = 9999000000;
IF mytype = 1 THEN #QUOTE PEMBELIAN
IF mymode = 'I' THEN IF (
	SELECT generalsettingpurch_cekplafonquote
	FROM generalsettingpurch
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK HUTANG QUOTE
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (1, 2, 3, 4, 11, 34, 36)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (7)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (1, 2)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingpurch_cekplafonquote
	FROM generalsettingpurch
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK HUTANG QUOTE
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (1, 2, 3, 4, 11, 34, 36)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (7)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (1, 2)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 2 THEN #CEK QTY AVAIL
DROP TEMPORARY TABLE IF EXISTS `tempqty`;
CREATE TEMPORARY TABLE tempqty(
	masteritem_id CHAR(36),
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) * d.transline_convertionqty * d.transline_vector
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_isallocation = True
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type NOT IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
IF EXISTS(
	SELECT masteritem_id
	FROM tempqty
	GROUP BY masteritem_id
	HAVING SUM(transline_qty) < 0
	ORDER BY masteritem_id
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT i.masteritem_description SEPARATOR ';')
			FROM tempqty t,
				masteritem i
			WHERE t.masteritem_id = i.masteritem_id
		),
		' JUMLAH KURANG QTYAVAIL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PENARIKAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'SUDAH TERDAPAT PENARIKAN ORDER',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
/*IF (SELECT YEAR((SELECT trans_entrydate FROM transhistory WHERE trans_id=myid AND transhistory_mode="I")))<>(YEAR((SELECT trans_entrydate FROM trans WHERE trans_id=myid))) THEN
 #CEK LINTAS TAHUN TIDAK
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ','TIDAK BOLEH MERUBAH DARI TAHUN ASAL',CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PENARIKAN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT PENARIKAN ORDER',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 2 THEN #CEK QTY AVAIL
DROP TEMPORARY TABLE IF EXISTS `tempqty`;
CREATE TEMPORARY TABLE tempqty(
	masteritem_id CHAR(36),
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) * d.transline_convertionqty * d.transline_vector
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_isallocation = True
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type NOT IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
IF EXISTS(
	SELECT masteritem_id
	FROM tempqty
	GROUP BY masteritem_id
	HAVING SUM(transline_qty) < 0
	ORDER BY masteritem_id
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT i.masteritem_description SEPARATOR ';')
			FROM tempqty t,
				masteritem i
			WHERE t.masteritem_id = i.masteritem_id
		),
		' JUMLAH KURANG QTYAVAIL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 2 THEN #ORDER PEMBELIAN
INSERT INTO stockcard(
		stockcard_id,
		masteritem_id,
		masterwarehouse_id,
		masterstore_id,
		masterbussiness_id,
		stockcard_onquote
	)
SELECT UUID(),
	d.masteritem_id,
	d.masterwarehouse_id,
	d.masterstore_id,
	d.masterbussiness_id,
	COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
FROM trans h,
	transline d,
(
		SELECT d.translineparent_id,
			SUM(d.transline_qtyinput) AS qtytelahproses
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (2, 14)
			AND h.trans_id = myid
		GROUP BY d.translineparent_id
	) AS o
WHERE h.trans_id = d.trans_id
	AND d.transline_id = o.translineparent_id ON DUPLICATE KEY
UPDATE stockcard_onquote =
VALUES(stockcard_onquote);
IF mymode = 'I' THEN IF (
	SELECT generalsettingpurch_cekplafonorder
	FROM generalsettingpurch
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK HUTANG QUOTE
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (1, 2, 3, 4, 11, 34, 36)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (7)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (1, 2)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_qtytarikquoteorderbeli
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id IN (
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	)
	AND COALESCE(d.transline_qtyrealize, 0) > COALESCE(d.transline_qtyinput, 0);
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingpurch_cekplafonorder
	FROM generalsettingpurch
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK HUTANG QUOTE
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (1, 2, 3, 4, 11, 34, 36)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (7)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (1, 2)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_qtytarikquoteorderbeli
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id IN (
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	)
	AND COALESCE(d.transline_qtyrealize, 0) > COALESCE(d.transline_qtyinput, 0);
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 2 THEN #CEK QTY AVAIL
DROP TEMPORARY TABLE IF EXISTS `tempqty`;
CREATE TEMPORARY TABLE tempqty(
	masteritem_id CHAR(36),
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) * d.transline_convertionqty * d.transline_vector
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_isallocation = True
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type NOT IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
IF EXISTS(
	SELECT masteritem_id
	FROM tempqty
	GROUP BY masteritem_id
	HAVING SUM(transline_qty) < 0
	ORDER BY masteritem_id
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT i.masteritem_description SEPARATOR ';')
			FROM tempqty t,
				masteritem i
			WHERE t.masteritem_id = i.masteritem_id
		),
		' JUMLAH KURANG QTYAVAIL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
/*IF (SELECT YEAR((SELECT trans_entrydate FROM transhistory WHERE trans_id=myid AND transhistory_mode="I")))<>(YEAR((SELECT trans_entrydate FROM trans WHERE trans_id=myid))) THEN
 #CEK LINTAS TAHUN TIDAK
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ','TIDAK BOLEH MERUBAH DARI TAHUN ASAL',CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 2 THEN #CEK QTY AVAIL
DROP TEMPORARY TABLE IF EXISTS `tempqty`;
CREATE TEMPORARY TABLE tempqty(
	masteritem_id CHAR(36),
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) * d.transline_convertionqty * d.transline_vector
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_isallocation = True
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type NOT IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
IF EXISTS(
	SELECT masteritem_id
	FROM tempqty
	GROUP BY masteritem_id
	HAVING SUM(transline_qty) < 0
	ORDER BY masteritem_id
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT i.masteritem_description SEPARATOR ';')
			FROM tempqty t,
				masteritem i
			WHERE t.masteritem_id = i.masteritem_id
		),
		' JUMLAH KURANG QTYAVAIL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 3)
or(mytype = 15) THEN #DELIV PEMBELIAN
IF mymode = 'I' THEN IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 4 THEN #INVOICE PEMBELIAN
INSERT INTO stockcard(
		stockcard_id,
		masteritem_id,
		masterwarehouse_id,
		masterstore_id,
		masterbussiness_id,
		stockcard_onpurchase
	)
SELECT UUID(),
	d.masteritem_id,
	d.masterwarehouse_id,
	d.masterstore_id,
	d.masterbussiness_id,
	COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
FROM trans h,
	transline d,
(
		SELECT d.translineparent_id,
			SUM(d.transline_qtyinput) AS qtytelahproses
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status NOT IN ("P")
			AND h.trans_type IN (4, 16)
			AND h.trans_id = myid
		GROUP BY d.translineparent_id
	) AS o
WHERE h.trans_id = d.trans_id
	AND d.transline_id = o.translineparent_id ON DUPLICATE KEY
UPDATE stockcard_onpurchase =
VALUES(stockcard_onpurchase);
IF mymode = 'I' THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty INT
);
INSERT INTO tempAja
SELECT sb.transserialbatch_serialbatchtext,
	SUM(sb.transserialbatch_qty)
FROM trans h,
	transline d,
	transserialbatch sb,
	(
		SELECT sb.masterbussiness_id,
			sb.transserialbatch_serialbatchtext
		FROM trans h,
			transline d,
			transserialbatch sb
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = sb.transline_id
			AND h.trans_id = myid
			AND sb.transserialbatch_mode = 'S'
	) AS qq
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.masterbussiness_id = qq.masterbussiness_id
	AND sb.transserialbatch_serialbatchtext = qq.transserialbatch_serialbatchtext
HAVING SUM(sb.transserialbatch_qty) > 1;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT transserialbatch_serialbatchtext
			FROM tempAja
		),
		myMsgSerialPlus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_qtytarikorderfakturrbeli
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id IN (
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	)
	AND COALESCE(d.transline_qtyrealize, 0) > COALESCE(d.transline_qtyinput, 0);
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT generalsettingpurch_cekplafon
	FROM generalsettingpurch
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #bayar hutang
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (1, 2, 3, 4, 11, 34, 36)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (7)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (1, 2)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		myMsgLimitTrans,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty INT
);
INSERT INTO tempAja
SELECT sb.transserialbatch_serialbatchtext,
	SUM(sb.transserialbatch_qty)
FROM trans h,
	transline d,
	transserialbatch sb,
	(
		SELECT sb.masterbussiness_id,
			sb.transserialbatch_serialbatchtext
		FROM trans h,
			transline d,
			transserialbatch sb
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = sb.transline_id
			AND h.trans_id = myid
			AND sb.transserialbatch_mode = 'S'
	) AS qq
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.masterbussiness_id = qq.masterbussiness_id
	AND sb.transserialbatch_serialbatchtext = qq.transserialbatch_serialbatchtext
HAVING SUM(sb.transserialbatch_qty) > 1;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT transserialbatch_serialbatchtext
			FROM tempAja
		),
		myMsgSerialPlus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT generalsettingpurch_cekplafon
	FROM generalsettingpurch
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #bayar hutang
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (1, 2, 3, 4, 11, 34, 36)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (7)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (1, 2)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		myMsgLimitTrans,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_qtytarikorderfakturrbeli
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id IN (
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	)
	AND COALESCE(d.transline_qtyrealize, 0) > COALESCE(d.transline_qtyinput, 0);
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT *
	FROM trans
	WHERE transparent_id = myid
		AND trans_type IN (5)
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'UPDATE DITOLAK, TERDAPAT RETUR',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
/*DROP TEMPORARY TABLE IF EXISTS `tempaja`; CREATE TEMPORARY TABLE tempaja(masteritem_description VARCHAR(255),transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty TINYINT(6)); 
 INSERT INTO tempaja(masteritem_description,transserialbatch_serialbatchtext,transserialbatch_qty) SELECT i.masteritem_description,s.transserialbatch_serialbatchtext,COALESCE(SUM(s.transserialbatch_qty),0) FROM trans h,transline d,transserialbatch s,masteritem i WHERE h.trans_id=d.trans_id AND d.transline_id=s.transline_id AND d.masteritem_id=i.masteritem_id AND h.trans_status='P' AND h.trans_type IN (3,4,5,12,15,16,17,23,24,27,30) AND h.masterbussiness_id=mybussinesscode GROUP BY d.masteritem_id,s.transserialbatch_serialbatchtext HAVING SUM(s.transserialbatch_qty)<0;
 IF EXISTS(SELECT * FROM tempaja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT GROUP_CONCAT(DISTINCT masteritem_description,' SN: ',transserialbatch_serialbatchtext SEPARATOR ';')  FROM tempaja),myMsgSerialBatchMinus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE trans_id = myid
		AND transfakturline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERKAIT FAKTUR PAJAK',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
/*IF (SELECT YEAR((SELECT trans_entrydate FROM transhistory WHERE trans_id=myid AND transhistory_mode="I")))<>(YEAR((SELECT trans_entrydate FROM trans WHERE trans_id=myid))) THEN
 #CEK LINTAS TAHUN TIDAK
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ','TIDAK BOLEH MERUBAH DARI TAHUN ASAL',CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT *
	FROM trans
	WHERE transparent_id = myid
		AND trans_type IN (5)
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'UPDATE DITOLAK, TERDAPAT RETUR',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
/*DROP TEMPORARY TABLE IF EXISTS `tempaja`; CREATE TEMPORARY TABLE tempaja(masteritem_description VARCHAR(255),transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty TINYINT(6)); 
 INSERT INTO tempaja(masteritem_description,transserialbatch_serialbatchtext,transserialbatch_qty) SELECT i.masteritem_description,s.transserialbatch_serialbatchtext,COALESCE(SUM(s.transserialbatch_qty),0) FROM trans h,transline d,transserialbatch s,masteritem i WHERE h.trans_id=d.trans_id AND d.transline_id=s.transline_id AND d.masteritem_id=i.masteritem_id AND h.trans_status='P' AND h.trans_type IN (3,4,5,12,15,16,17,23,24,27,30) AND h.masterbussiness_id=mybussinesscode GROUP BY d.masteritem_id,s.transserialbatch_serialbatchtext HAVING SUM(s.transserialbatch_qty)<0;
 IF EXISTS(SELECT * FROM tempaja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT GROUP_CONCAT(DISTINCT masteritem_description,' SN: ',transserialbatch_serialbatchtext SEPARATOR ';')  FROM tempaja),myMsgSerialBatchMinus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE trans_id = myid
		AND transfakturline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERKAIT FAKTUR PAJAK',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 5 THEN #RETUR PEMBELIAN
IF mymode = 'I' THEN DROP TEMPORARY TABLE IF EXISTS `tempasal`;
CREATE TEMPORARY TABLE tempasal(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempasal
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id IN (
		SELECT hx.transparent_id
		FROM trans hx,
			transline dx,
			transserialbatch sbx
		WHERE hx.trans_id = dx.trans_id
			AND dx.transline_id = sbx.transline_id
			AND dx.trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS `tempretur`;
CREATE TEMPORARY TABLE tempretur(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempretur
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id = myid;
IF EXISTS(
	SELECT r.transserialbatch_serialbatchtext,
		a.transserialbatch_serialbatchtext
	FROM tempretur r
		LEFT OUTER JOIN tempasal a ON a.transserialbatch_serialbatchtext = r.transserialbatch_serialbatchtext
	WHERE a.transserialbatch_serialbatchtext IS NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempretur
		),
		"TIDAK TERDAPAT PADA TRANSAKSI INDUK",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 23, 24, 27, 30)
	AND h.masterbussiness_id = mybussinesscode
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	transline_id CHAR(36),
	masteritem_description VARCHAR(255),
	transline_vector TINYINT,
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT d.transline_id,
	i.masteritem_description,
	1,
	d.transline_qty
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = "P"
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	);
INSERT INTO tempaja
SELECT d.translineparent_id,
	i.masteritem_description,
	-1,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = "P"
	AND d.translineparent_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.translineparent_id;
IF (
	SELECT COALESCE(SUM(transline_qty), 0)
	FROM tempaja
	HAVING SUM(transline_qty) < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT 'BARANG: ',
					masteritem_description SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgRetur,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty INT
);
INSERT INTO tempAja
SELECT sb.transserialbatch_serialbatchtext,
	SUM(sb.transserialbatch_qty)
FROM trans h,
	transline d,
	transserialbatch sb,
	(
		SELECT sb.masterbussiness_id,
			sb.transserialbatch_serialbatchtext
		FROM trans h,
			transline d,
			transserialbatch sb
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = sb.transline_id
			AND h.trans_id = myid
			AND sb.transserialbatch_mode = 'S'
	) AS qq
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.masterbussiness_id = qq.masterbussiness_id
	AND sb.transserialbatch_serialbatchtext = qq.transserialbatch_serialbatchtext
HAVING SUM(sb.transserialbatch_qty) > 1;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT transserialbatch_serialbatchtext
			FROM tempAja
		),
		myMsgSerialPlus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempasal`;
CREATE TEMPORARY TABLE tempasal(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempasal
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id IN (
		SELECT hx.transparent_id
		FROM trans hx,
			transline dx,
			transserialbatch sbx
		WHERE hx.trans_id = dx.trans_id
			AND dx.transline_id = sbx.transline_id
			AND dx.trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS `tempretur`;
CREATE TEMPORARY TABLE tempretur(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempretur
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id = myid;
IF EXISTS(
	SELECT r.transserialbatch_serialbatchtext,
		a.transserialbatch_serialbatchtext
	FROM tempretur r
		LEFT OUTER JOIN tempasal a ON a.transserialbatch_serialbatchtext = r.transserialbatch_serialbatchtext
	WHERE a.transserialbatch_serialbatchtext IS NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempretur
		),
		"TIDAK TERDAPAT PADA TRANSAKSI INDUK",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 23, 24, 27, 30)
	AND h.masterbussiness_id = mybussinesscode
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	transline_id CHAR(36),
	masteritem_description VARCHAR(255),
	transline_vector TINYINT,
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT d.transline_id,
	i.masteritem_description,
	1,
	d.transline_qty
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = "P"
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	);
INSERT INTO tempaja
SELECT d.translineparent_id,
	i.masteritem_description,
	-1,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = "P"
	AND d.translineparent_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.translineparent_id;
IF (
	SELECT COALESCE(SUM(transline_qty), 0)
	FROM tempaja
	HAVING SUM(transline_qty) < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT 'BARANG: ',
					masteritem_description SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgRetur,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE trans_id = myid
		AND transfakturline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERKAIT FAKTUR PAJAK',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
/*IF (SELECT YEAR((SELECT trans_entrydate FROM transhistory WHERE trans_id=myid AND transhistory_mode="I")))<>(YEAR((SELECT trans_entrydate FROM trans WHERE trans_id=myid))) THEN
 #CEK LINTAS TAHUN TIDAK
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ','TIDAK BOLEH MERUBAH DARI TAHUN ASAL',CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE trans_id = myid
		AND transfakturline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERKAIT FAKTUR PAJAK',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 6) THEN #bayar hutang
IF mymode = 'U' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERDAPAT TRANSAKSI GIRO',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERDAPAT TRANSAKSI GIRO',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 7)
OR(mytype = 19) THEN IF mymode = 'D' THEN IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 18) THEN #bayar piutang
IF mymode = 'U' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERDAPAT TRANSAKSI GIRO',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERDAPAT TRANSAKSI GIRO',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 12 THEN #saldo awal barang
IF mymode = 'I' THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty INT
);
INSERT INTO tempAja
SELECT sb.transserialbatch_serialbatchtext,
	SUM(sb.transserialbatch_qty)
FROM trans h,
	transline d,
	transserialbatch sb,
	(
		SELECT sb.masterbussiness_id,
			sb.transserialbatch_serialbatchtext
		FROM trans h,
			transline d,
			transserialbatch sb
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = sb.transline_id
			AND h.trans_id = myid
			AND sb.transserialbatch_mode = 'S'
	) AS qq
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.masterbussiness_id = qq.masterbussiness_id
	AND sb.transserialbatch_serialbatchtext = qq.transserialbatch_serialbatchtext
HAVING SUM(sb.transserialbatch_qty) > 1;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT transserialbatch_serialbatchtext
			FROM tempAja
		),
		myMsgSerialPlus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty INT
);
INSERT INTO tempAja
SELECT sb.transserialbatch_serialbatchtext,
	SUM(sb.transserialbatch_qty)
FROM trans h,
	transline d,
	transserialbatch sb,
	(
		SELECT sb.masterbussiness_id,
			sb.transserialbatch_serialbatchtext
		FROM trans h,
			transline d,
			transserialbatch sb
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = sb.transline_id
			AND h.trans_id = myid
			AND sb.transserialbatch_mode = 'S'
	) AS qq
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.masterbussiness_id = qq.masterbussiness_id
	AND sb.transserialbatch_serialbatchtext = qq.transserialbatch_serialbatchtext
HAVING SUM(sb.transserialbatch_qty) > 1;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT transserialbatch_serialbatchtext
			FROM tempAja
		),
		myMsgSerialPlus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
#ELSEIF mymode='D' THEN
END IF;
ELSEIF mytype = 13 THEN #QUOTE PENJUALAN
IF mymode = 'I' THEN IF (
	SELECT generalsettingsell_cekplafonquote
	FROM generalsettingsell
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK PIUTANG QUOTE
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (13, 14, 15, 16, 23)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (19, 47)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (13, 14)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 2 THEN #CEK QTY AVAIL
DROP TEMPORARY TABLE IF EXISTS `tempqty`;
CREATE TEMPORARY TABLE tempqty(
	masteritem_id CHAR(36),
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) * d.transline_convertionqty * d.transline_vector
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_isallocation = True
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type NOT IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
IF EXISTS(
	SELECT masteritem_id
	FROM tempqty
	GROUP BY masteritem_id
	HAVING SUM(transline_qty) < 0
	ORDER BY masteritem_id
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT i.masteritem_description SEPARATOR ';')
			FROM tempqty t,
				masteritem i
			WHERE t.masteritem_id = i.masteritem_id
		),
		' JUMLAH KURANG QTYAVAIL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingsell_cekplafonquote
	FROM generalsettingsell
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK PIUTANG QUOTE
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (13, 14, 15, 16, 23)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (19, 47)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (13, 14)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 2 THEN #CEK QTY AVAIL
DROP TEMPORARY TABLE IF EXISTS `tempqty`;
CREATE TEMPORARY TABLE tempqty(
	masteritem_id CHAR(36),
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) * d.transline_convertionqty * d.transline_vector
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_isallocation = True
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type NOT IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
IF EXISTS(
	SELECT masteritem_id
	FROM tempqty
	GROUP BY masteritem_id
	HAVING SUM(transline_qty) < 0
	ORDER BY masteritem_id
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT i.masteritem_description SEPARATOR ';')
			FROM tempqty t,
				masteritem i
			WHERE t.masteritem_id = i.masteritem_id
		),
		' JUMLAH KURANG QTYAVAIL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PENARIKAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'SUDAH TERDAPAT PENARIKAN ORDER',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
/*IF (SELECT YEAR((SELECT trans_entrydate FROM transhistory WHERE trans_id=myid AND transhistory_mode="I")))<>(YEAR((SELECT trans_entrydate FROM trans WHERE trans_id=myid))) THEN
 #CEK LINTAS TAHUN TIDAK
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ','TIDAK BOLEH MERUBAH DARI TAHUN ASAL',CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PENARIKAN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT PENARIKAN ORDER',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 14 THEN #ORDER PENJUALAN
IF mymode = 'I' THEN IF (
	SELECT generalsettingsell_cekplafonorder
	FROM generalsettingsell
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK PIUTANG ORDER
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (13, 14, 15, 16, 23)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (19, 47)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (13, 14)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_qtytarikquoteorderjual
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id IN (
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	)
	AND COALESCE(d.transline_qtyrealize, 0) > COALESCE(d.transline_qtyinput, 0);
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 2 THEN #CEK QTY AVAIL
DROP TEMPORARY TABLE IF EXISTS `tempqty`;
CREATE TEMPORARY TABLE tempqty(
	masteritem_id CHAR(36),
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) * d.transline_convertionqty * d.transline_vector
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_isallocation = True
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type NOT IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
IF EXISTS(
	SELECT masteritem_id
	FROM tempqty
	GROUP BY masteritem_id
	HAVING SUM(transline_qty) < 0
	ORDER BY masteritem_id
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT i.masteritem_description SEPARATOR ';')
			FROM tempqty t,
				masteritem i
			WHERE t.masteritem_id = i.masteritem_id
		),
		' JUMLAH KURANG QTYAVAIL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingsell_cekplafonorder
	FROM generalsettingsell
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK PIUTANG ORDER
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (13, 14, 15, 16, 23)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (19, 47)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (13, 14)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_qtytarikquoteorderjual
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id IN (
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	)
	AND COALESCE(d.transline_qtyrealize, 0) > COALESCE(d.transline_qtyinput, 0);
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 2 THEN #CEK QTY AVAIL
DROP TEMPORARY TABLE IF EXISTS `tempqty`;
CREATE TEMPORARY TABLE tempqty(
	masteritem_id CHAR(36),
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) * d.transline_convertionqty * d.transline_vector
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_isallocation = True
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
INSERT INTO tempqty
SELECT d.masteritem_id,
	SUM(d.transline_qty)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND t.masteritemtype_isstock = TRUE
	AND h.trans_status <> "C"
	AND h.trans_type NOT IN (1, 2, 13, 14, 25, 26, 28, 29, 31, 32)
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.masteritem_id
ORDER BY d.masteritem_id;
IF EXISTS(
	SELECT masteritem_id
	FROM tempqty
	GROUP BY masteritem_id
	HAVING SUM(transline_qty) < 0
	ORDER BY masteritem_id
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT i.masteritem_description SEPARATOR ';')
			FROM tempqty t,
				masteritem i
			WHERE t.masteritem_id = i.masteritem_id
		),
		' JUMLAH KURANG QTYAVAIL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
/*IF (SELECT YEAR((SELECT trans_entrydate FROM transhistory WHERE trans_id=myid AND transhistory_mode="I")))<>(YEAR((SELECT trans_entrydate FROM trans WHERE trans_id=myid))) THEN
 #CEK LINTAS TAHUN TIDAK
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ','TIDAK BOLEH MERUBAH DARI TAHUN ASAL',CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 16 THEN #INVOICE PENJUALAN
IF mymode = 'I' THEN IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = False;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT generalsettingcek_qtytarikorderfakturjual
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id IN (
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	)
	AND COALESCE(d.transline_qtyrealize, 0) > COALESCE(d.transline_qtyinput, 0);
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT generalsettingsell_cekplafon
	FROM generalsettingsell
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK PIUTANG
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (13, 14, 15, 16, 23)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (19, 47)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (13, 14)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
/*DROP TEMPORARY TABLE IF EXISTS `tempaja`; CREATE TEMPORARY TABLE tempaja(masteritem_description VARCHAR(255),transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty TINYINT(6)); 
 INSERT INTO tempaja(masteritem_description,transserialbatch_serialbatchtext,transserialbatch_qty) SELECT i.masteritem_description,s.transserialbatch_serialbatchtext,COALESCE(SUM(s.transserialbatch_qty),0) FROM trans h,transline d,transserialbatch s,masteritem i WHERE h.trans_id=d.trans_id AND d.transline_id=s.transline_id AND d.masteritem_id=i.masteritem_id AND h.trans_status='P' AND h.trans_type IN (3,4,5,12,15,16,17,23,24,27,30) AND h.masterbussiness_id=mybussinesscode GROUP BY d.masteritem_id,s.transserialbatch_serialbatchtext HAVING SUM(s.transserialbatch_qty)<0;
 IF EXISTS(SELECT * FROM tempaja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT GROUP_CONCAT(DISTINCT masteritem_description,' SN: ',transserialbatch_serialbatchtext SEPARATOR ';')  FROM tempaja),myMsgSerialBatchMinus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty INT
);
INSERT INTO tempAja
SELECT sb.transserialbatch_serialbatchtext,
	SUM(sb.transserialbatch_qty)
FROM trans h,
	transline d,
	transserialbatch sb,
	(
		SELECT sb.masterbussiness_id,
			sb.transserialbatch_serialbatchtext
		FROM trans h,
			transline d,
			transserialbatch sb
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = sb.transline_id
			AND h.trans_id = myid
			AND sb.transserialbatch_mode = 'S'
	) AS qq
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.masterbussiness_id = qq.masterbussiness_id
	AND sb.transserialbatch_serialbatchtext = qq.transserialbatch_serialbatchtext
HAVING SUM(sb.transserialbatch_qty) > 1;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT transserialbatch_serialbatchtext
			FROM tempAja
		),
		myMsgSerialPlus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT generalsettingsell_cekplafon
	FROM generalsettingsell
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN #CEK PIUTANG
IF (
	SELECT COALESCE(masterpartner_limittransaksi, 0)
	FROM masterpartner
	WHERE masterpartner_id = qqidpartner
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `temphutang`;
CREATE TEMPORARY TABLE temphutang(masterpartner_limittransaksi DECIMAL(33, 15));
INSERT INTO temphutang
SELECT masterpartner_limittransaksi
FROM masterpartner
WHERE masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (13, 14, 15, 16, 23)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT SUM(hf.finance_currentvalue)
FROM finance hf,
	trans h
WHERE hf.trans_id = h.trans_id
	AND hf.finance_type IN (19, 47)
	AND h.masterpartner_id = qqidpartner;
INSERT INTO temphutang
SELECT - SUM(
		(
			COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
		) *(
			COALESCE(d.transline_price, 0) - COALESCE(d.transline_disc, 0) - COALESCE(d.transline_discother, 0) - COALESCE(d.transline_discgrouplinevalue, 0)
		) *((100 + d.transline_taxrate) / 100)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (13, 14)
	AND h.masterpartner_id = qqidpartner
	AND h.trans_status NOT IN ("C", "P", "CT", "OD");
IF (
	SELECT SUM(masterpartner_limittransaksi)
	FROM temphutang
) < 0 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'MELEBIHI BATAS HUTANG',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
END IF;
IF (
	SELECT generalsettingcek_qtytarikorderfakturjual
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_id IN (
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	)
	AND COALESCE(d.transline_qtyrealize, 0) > COALESCE(d.transline_qtyinput, 0);
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT *
	FROM trans
	WHERE transparent_id = myid
		AND trans_type IN (5)
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'UPDATE DITOLAK, TERDAPAT RETUR',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
/*DROP TEMPORARY TABLE IF EXISTS `tempaja`; CREATE TEMPORARY TABLE tempaja(masteritem_description VARCHAR(255),transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty TINYINT(6)); 
 INSERT INTO tempaja(masteritem_description,transserialbatch_serialbatchtext,transserialbatch_qty) SELECT i.masteritem_description,s.transserialbatch_serialbatchtext,COALESCE(SUM(s.transserialbatch_qty),0) FROM trans h,transline d,transserialbatch s,masteritem i WHERE h.trans_id=d.trans_id AND d.transline_id=s.transline_id AND d.masteritem_id=i.masteritem_id AND h.trans_status='P' AND h.trans_type IN (4,5,12,16,17,23,24,27,30) AND h.masterbussiness_id=mybussinesscode GROUP BY d.masteritem_id,s.transserialbatch_serialbatchtext HAVING SUM(s.transserialbatch_qty)<0;
 IF EXISTS(SELECT * FROM tempaja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT GROUP_CONCAT(DISTINCT masteritem_description,' SN: ',transserialbatch_serialbatchtext SEPARATOR ';')  FROM tempaja),myMsgSerialBatchMinus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF (
	SELECT YEAR(
			(
				SELECT trans_entrydate
				FROM transhistory
				WHERE trans_id = myid
					AND transhistory_mode = "I"
				LIMIT 1
			)
		)
) <>(
	YEAR(
		(
			SELECT trans_entrydate
			FROM trans
			WHERE trans_id = myid
		)
	)
) THEN #CEK LINTAS TAHUN TIDAK
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TIDAK BOLEH MERUBAH DARI TAHUN ASAL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
/*IF EXISTS(SELECT trans_id FROM trans WHERE trans_id=myid AND transfakturline_id IS NOT NULL) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ','TERKAIT FAKTUR PAJAK',CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT *
	FROM trans
	WHERE transparent_id = myid
		AND trans_type IN (5)
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'UPDATE DITOLAK, TERDAPAT RETUR',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
/*DROP TEMPORARY TABLE IF EXISTS `tempaja`; CREATE TEMPORARY TABLE tempaja(masteritem_description VARCHAR(255),transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty TINYINT(6)); 
 INSERT INTO tempaja(masteritem_description,transserialbatch_serialbatchtext,transserialbatch_qty) SELECT i.masteritem_description,s.transserialbatch_serialbatchtext,COALESCE(SUM(s.transserialbatch_qty),0) FROM trans h,transline d,transserialbatch s,masteritem i WHERE h.trans_id=d.trans_id AND d.transline_id=s.transline_id AND d.masteritem_id=i.masteritem_id AND h.trans_status='P' AND h.trans_type IN (3,4,5,12,15,16,17,23,24,27,30) AND h.masterbussiness_id=mybussinesscode GROUP BY d.masteritem_id,s.transserialbatch_serialbatchtext HAVING SUM(s.transserialbatch_qty)<0;
 IF EXISTS(SELECT * FROM tempaja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT GROUP_CONCAT(DISTINCT masteritem_description,' SN: ',transserialbatch_serialbatchtext SEPARATOR ';')  FROM tempaja),myMsgSerialBatchMinus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE trans_id = myid
		AND transfakturline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERKAIT FAKTUR PAJAK',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 17 THEN #RETUR PENJUALAN
IF mymode = 'I' THEN DROP TEMPORARY TABLE IF EXISTS `tempasal`;
CREATE TEMPORARY TABLE tempasal(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempasal
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id IN (
		SELECT hx.transparent_id
		FROM trans hx,
			transline dx,
			transserialbatch sbx
		WHERE hx.trans_id = dx.trans_id
			AND dx.transline_id = sbx.transline_id
			AND dx.trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS `tempretur`;
CREATE TEMPORARY TABLE tempretur(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempretur
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id = myid;
IF EXISTS(
	SELECT r.transserialbatch_serialbatchtext,
		a.transserialbatch_serialbatchtext
	FROM tempretur r
		LEFT OUTER JOIN tempasal a ON a.transserialbatch_serialbatchtext = r.transserialbatch_serialbatchtext
	WHERE a.transserialbatch_serialbatchtext IS NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempretur
		),
		"TIDAK TERDAPAT PADA TRANSAKSI INDUK",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 23, 24, 27, 30)
	AND h.masterbussiness_id = mybussinesscode
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	transline_id CHAR(36),
	masteritem_description VARCHAR(255),
	transline_vector TINYINT,
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT d.transline_id,
	i.masteritem_description,
	1,
	d.transline_qty
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	);
INSERT INTO tempaja
SELECT d.translineparent_id,
	i.masteritem_description,
	-1,
	ABS(SUM(d.transline_qty))
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = "P"
	AND d.translineparent_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.translineparent_id;
IF (
	SELECT COALESCE(SUM(transline_qty), 0)
	FROM tempaja
	GROUP BY transline_id
	HAVING SUM(transline_qty) > 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT 'BARANG: ',
					masteritem_description SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgRetur,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty INT
);
INSERT INTO tempAja
SELECT sb.transserialbatch_serialbatchtext,
	SUM(sb.transserialbatch_qty)
FROM trans h,
	transline d,
	transserialbatch sb,
	(
		SELECT sb.masterbussiness_id,
			sb.transserialbatch_serialbatchtext
		FROM trans h,
			transline d,
			transserialbatch sb
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = sb.transline_id
			AND h.trans_id = myid
			AND sb.transserialbatch_mode = 'S'
	) AS qq
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.masterbussiness_id = qq.masterbussiness_id
	AND sb.transserialbatch_serialbatchtext = qq.transserialbatch_serialbatchtext
HAVING SUM(sb.transserialbatch_qty) > 1;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT transserialbatch_serialbatchtext
			FROM tempAja
		),
		myMsgSerialPlus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempasal`;
CREATE TEMPORARY TABLE tempasal(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempasal
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id IN (
		SELECT hx.transparent_id
		FROM trans hx,
			transline dx,
			transserialbatch sbx
		WHERE hx.trans_id = dx.trans_id
			AND dx.transline_id = sbx.transline_id
			AND dx.trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS `tempretur`;
CREATE TEMPORARY TABLE tempretur(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempretur
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id = myid;
IF EXISTS(
	SELECT r.transserialbatch_serialbatchtext,
		a.transserialbatch_serialbatchtext
	FROM tempretur r
		LEFT OUTER JOIN tempasal a ON a.transserialbatch_serialbatchtext = r.transserialbatch_serialbatchtext
	WHERE a.transserialbatch_serialbatchtext IS NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempretur
		),
		"TIDAK TERDAPAT PADA TRANSAKSI INDUK",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 23, 24, 27, 30)
	AND h.masterbussiness_id = mybussinesscode
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	transline_id CHAR(36),
	masteritem_description VARCHAR(255),
	transline_vector TINYINT,
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT d.transline_id,
	i.masteritem_description,
	1,
	d.transline_qty
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	);
INSERT INTO tempaja
SELECT d.translineparent_id,
	i.masteritem_description,
	-1,
	ABS(SUM(d.transline_qty))
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = "P"
	AND d.translineparent_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.translineparent_id;
IF (
	SELECT COALESCE(SUM(transline_qty), 0)
	FROM tempaja
	GROUP BY transline_id
	HAVING SUM(transline_qty) > 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT 'BARANG: ',
					masteritem_description SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgRetur,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE trans_id = myid
		AND transfakturline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERKAIT FAKTUR PAJAK',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
/*IF (SELECT YEAR((SELECT trans_entrydate FROM transhistory WHERE trans_id=myid AND transhistory_mode="I")))<>(YEAR((SELECT trans_entrydate FROM trans WHERE trans_id=myid))) THEN
 #CEK LINTAS TAHUN TIDAK
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ','TIDAK BOLEH MERUBAH DARI TAHUN ASAL',CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE trans_id = myid
		AND transfakturline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERKAIT FAKTUR PAJAK',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 31)
OR(mytype = 32) THEN #TRANSFER QUOTE DAN ORDER
IF mymode = 'I' THEN IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PENARIKAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'SUDAH TERDAPAT PENARIKAN',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PENARIKAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'SUDAH TERDAPAT PENARIKAN',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 33 THEN #TRANSFER ANTAR GUDANG
IF mymode = 'I' THEN
/*DROP TEMPORARY TABLE IF EXISTS `tempAja`; CREATE TEMPORARY TABLE tempAja(transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty INT);
 INSERT INTO tempAja
 SELECT sb.transserialbatch_serialbatchtext,SUM(sb.transserialbatch_qty)
 FROM trans h,transline d,transserialbatch sb,
 (SELECT sb.masterbussiness_id,sb.transserialbatch_serialbatchtext
 FROM trans h,transline d,transserialbatch sb 
 WHERE h.trans_id=d.trans_id AND d.transline_id=sb.transline_id
 AND h.trans_id=myid AND sb.transserialbatch_mode='S') AS qq
 WHERE h.trans_id=d.trans_id AND d.transline_id=sb.transline_id AND h.masterbussiness_id=qq.masterbussiness_id AND sb.transserialbatch_serialbatchtext=qq.transserialbatch_serialbatchtext
 HAVING SUM(sb.transserialbatch_qty)>1;
 IF EXISTS(SELECT * FROM tempAja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT transserialbatch_serialbatchtext FROM tempAja),myMsgSerialPlus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
/*IF (SELECT generalsettingcek_stok FROM generalsettingcek WHERE masterbussiness_id=mybussinesscode)=1 THEN
 DROP TEMPORARY TABLE IF EXISTS `tempAja`;CREATE TEMPORARY TABLE tempAja(masteritem_id INT,masterwarehouse_id SMALLINT,masteritem_description VARCHAR(255));
 INSERT tempAja 
 SELECT d.masteritem_id,d.masterwarehouse_id,i.masteritem_description 
 FROM trans h, transline d, masteritem i, masteritemcategory c, masteritemtype t 
 WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND c.masteritemtype_id=t.masteritemtype_id 
 AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=mytgl
 AND h.trans_type IN (3,4,5,12,15,16,17,24,27,30,33) AND t.masteritemtype_isstock=True AND h.trans_status="P" AND d.masteritem_id IN (SELECT masteritem_id FROM transline WHERE trans_id=myid) AND d.masterwarehouse_id IN (SELECT masterwarehouse_id FROM transline WHERE trans_id=myid AND transline_vector=-1)
 GROUP BY d.masteritem_id,d.masterwarehouse_id,d.masterbussiness_id 
 HAVING SUM(d.transline_qty)<0;
 IF EXISTS(SELECT * FROM tempAja) THEN			
 SET allow=FALSE;
 SET myMsg=CONCAT(ctr,'. ',(SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')  FROM tempAja),myMsgOverStok,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty INT
);
INSERT INTO tempAja
SELECT sb.transserialbatch_serialbatchtext,
	SUM(sb.transserialbatch_qty)
FROM trans h,
	transline d,
	transserialbatch sb,
	(
		SELECT sb.masterbussiness_id,
			sb.transserialbatch_serialbatchtext
		FROM trans h,
			transline d,
			transserialbatch sb
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = sb.transline_id
			AND h.trans_id = myid
			AND sb.transserialbatch_mode = 'S'
	) AS qq
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.masterbussiness_id = qq.masterbussiness_id
	AND sb.transserialbatch_serialbatchtext = qq.transserialbatch_serialbatchtext
HAVING SUM(sb.transserialbatch_qty) > 1;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT transserialbatch_serialbatchtext
			FROM tempAja
		),
		myMsgSerialPlus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND d.masterwarehouse_id IN (
		SELECT masterwarehouse_id
		FROM transline
		WHERE trans_id = myid
			AND transline_vector = -1
	)
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND d.masterwarehouse_id IN (
		SELECT masterwarehouse_id
		FROM transline
		WHERE trans_id = myid
			AND transline_vector = 1
	)
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 24)
OR(mytype = 30) THEN #STOK ADJUSTMENT #ASSEMBLY #DISASSEMBLY #TRANSFERGUDANG
IF (mymode = 'I')
OR(mymode = 'U')
OR(mymode = 'D') THEN
/*DROP TEMPORARY TABLE IF EXISTS `tempAja`; CREATE TEMPORARY TABLE tempAja(transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty INT);
 INSERT INTO tempAja
 SELECT sb.transserialbatch_serialbatchtext,SUM(sb.transserialbatch_qty)
 FROM trans h,transline d,transserialbatch sb,
 (SELECT sb.masterbussiness_id,sb.transserialbatch_serialbatchtext
 FROM trans h,transline d,transserialbatch sb 
 WHERE h.trans_id=d.trans_id AND d.transline_id=sb.transline_id
 AND h.trans_id=myid AND sb.transserialbatch_mode='S') AS qq
 WHERE h.trans_id=d.trans_id AND d.transline_id=sb.transline_id AND h.masterbussiness_id=qq.masterbussiness_id AND sb.transserialbatch_serialbatchtext=qq.transserialbatch_serialbatchtext
 HAVING SUM(sb.transserialbatch_qty)>1;
 IF EXISTS(SELECT * FROM tempAja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT transserialbatch_serialbatchtext FROM tempAja),myMsgSerialPlus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
/*DROP TEMPORARY TABLE IF EXISTS `tempaja`; CREATE TEMPORARY TABLE tempaja(masteritem_description VARCHAR(255),transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty TINYINT(6)); 
 INSERT INTO tempaja(masteritem_description,transserialbatch_serialbatchtext,transserialbatch_qty) SELECT i.masteritem_description,s.transserialbatch_serialbatchtext,COALESCE(SUM(s.transserialbatch_qty),0) FROM trans h,transline d,transserialbatch s,masteritem i WHERE h.trans_id=d.trans_id AND d.transline_id=s.transline_id AND d.masteritem_id=i.masteritem_id AND h.trans_status='P' AND h.trans_type IN (3,4,5,12,15,16,17,23,24,27,30) AND h.masterbussiness_id=mybussinesscode GROUP BY d.masteritem_id,s.transserialbatch_serialbatchtext HAVING SUM(s.transserialbatch_qty)<0;
 IF EXISTS(SELECT * FROM tempaja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT GROUP_CONCAT(DISTINCT masteritem_description,' SN: ',transserialbatch_serialbatchtext SEPARATOR ';')  FROM tempaja),myMsgSerialBatchMinus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 25)
OR(mytype = 26)
OR(mytype = 27) THEN IF (mymode = 'I') THEN
/*DROP TEMPORARY TABLE IF EXISTS `tempAja`; CREATE TEMPORARY TABLE tempAja(transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty INT);
 INSERT INTO tempAja
 SELECT sb.transserialbatch_serialbatchtext,SUM(sb.transserialbatch_qty)
 FROM trans h,transline d,transserialbatch sb,
 (SELECT sb.masterbussiness_id,sb.transserialbatch_serialbatchtext
 FROM trans h,transline d,transserialbatch sb 
 WHERE h.trans_id=d.trans_id AND d.transline_id=sb.transline_id
 AND h.trans_id=myid AND sb.transserialbatch_mode='S') AS qq
 WHERE h.trans_id=d.trans_id AND d.transline_id=sb.transline_id AND h.masterbussiness_id=qq.masterbussiness_id AND sb.transserialbatch_serialbatchtext=qq.transserialbatch_serialbatchtext
 HAVING SUM(sb.transserialbatch_qty)>1;
 IF EXISTS(SELECT * FROM tempAja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT transserialbatch_serialbatchtext FROM tempAja),myMsgSerialPlus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF (
	SELECT generalsettingcek_stok
	FROM generalsettingcek
	WHERE masterbussiness_id = mybussinesscode
) = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id CHAR(36),
	masterwarehouse_id CHAR(36),
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
/*DROP TEMPORARY TABLE IF EXISTS `tempaja`; CREATE TEMPORARY TABLE tempaja(masteritem_description VARCHAR(255),transserialbatch_serialbatchtext VARCHAR(255),transserialbatch_qty TINYINT(6)); 
 INSERT INTO tempaja(masteritem_description,transserialbatch_serialbatchtext,transserialbatch_qty) SELECT i.masteritem_description,s.transserialbatch_serialbatchtext,COALESCE(SUM(s.transserialbatch_qty),0) FROM trans h,transline d,transserialbatch s,masteritem i WHERE h.trans_id=d.trans_id AND d.transline_id=s.transline_id AND d.masteritem_id=i.masteritem_id AND h.trans_status='P' AND h.trans_type IN (3,4,5,12,15,16,17,23,24,27,30) AND h.masterbussiness_id=mybussinesscode GROUP BY d.masteritem_id,s.transserialbatch_serialbatchtext HAVING SUM(s.transserialbatch_qty)<0;
 IF EXISTS(SELECT * FROM tempaja) THEN
 SET allow=FALSE;
 SET myMsg=CONCAT(myMsg,ctr,'. ',(SELECT GROUP_CONCAT(DISTINCT masteritem_description,' SN: ',transserialbatch_serialbatchtext SEPARATOR ';')  FROM tempaja),myMsgSerialBatchMinus,CHAR(10 using utf8));
 SET ctr=ctr+1;
 END IF;*/
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF (mymode = 'U')
OR(mymode = 'D') THEN IF (
	SELECT SUM(transapprove_status)
	FROM transapprove
	WHERE trans_id = myid
	GROUP BY trans_id
) >= 1 THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'SUDAH TERDAPAT APPROVAL',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 38)
OR(mytype = 39)
OR(mytype = 40)
OR(mytype = 41)
OR(mytype = 42) THEN IF (mymode = 'U')
OR(mymode = 'D') THEN IF EXISTS(
	SELECT h.trans_id
	FROM trans h,
		transline d
	WHERE h.trans_id = d.trans_id
		AND h.trans_id = myid
		AND d.transbsline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		'SUDAH TERDAPAT REKONSILIASI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE trans_id = myid
		AND transfakturline_id IS NOT NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'TERKAIT FAKTUR PAJAK',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 23) THEN IF mymode = 'D' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PELUNASAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'SUDAH TERDAPAT PELUNASAN',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 55)
OR(mytype = 56) THEN IF mymode = 'I' THEN IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PENARIKAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'SUDAH TERDAPAT PENARIKAN',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
SET durasieditjual =(
		SELECT COALESCE(
				d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit,
				0
			)
		FROM trans h,
			masteruser u,
			masteruserbussiness ub,
			masterother c,
			masterotherdurasi d
		WHERE h.trans_olehubah = u.masteruser_username
			AND u.masteruser_id = ub.masteruser_id
			AND h.masterbussiness_id = ub.masterbussiness_id
			AND ub.masterusercategory_id = c.masterother_id
			AND c.masterother_id = d.masterother_id
			AND h.trans_id = myid
		ORDER BY d.masterotherdurasi_sellpelunasanpiutangubahdurasimenit DESC
		LIMIT 1
	);
IF COALESCE(durasieditjual, 0) > 0 THEN IF (
	SELECT DATE_ADD(
			FROM_UNIXTIME(h.trans_waktu DIV 1000),
			INTERVAL COALESCE(durasieditjual, 0) MINUTE
		)
	FROM trans h
	WHERE h.trans_id = myid
) <(
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP())
) THEN #CEK WAKTU DURASI EDIT PENJUALAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'WAKTU EDIT TELAH USAI',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparent_id = myid
		AND trans_status <> "C"
) THEN #CEK UDAH ADA PENARIKAN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'SUDAH TERDAPAT PENARIKAN',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
END IF;
SET SESSION group_concat_max_len = 1024;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_CommitDataNonFinal
DELIMITER / / CREATE PROCEDURE `X_CommitDataNonFinal`(
	IN `myid` CHAR(36),
	IN `mymode` ENUM('I', 'U', 'D')
) BEGIN
DECLARE ctr,
	qqNoParent,
	mytype,
	mybussinesscode,
	mymodecekstok,
	mymodecekplafon INT;
DECLARE mytgl DATE;
DECLARE myMsg,
	myMsgOverStok,
	myMsgRetur,
	myMsgSerialPlus,
	myMsgSerialMinus,
	myMsgBatchMinus,
	myMsgLimitTrans,
	myMsgLimitNotaUnpaid,
	myMsgLimitMaxHari,
	myMsgSerialReturTidakDitemukan,
	myMsgBatchReturTidakDitemukan,
	myMsgOrderLebihDari,
	myMsgDepositOrder,
	myMsgSerialBatchMinus TEXT;
DECLARE allow BOOLEAN;
DECLARE myDate DATE;
DECLARE specialty CONDITION FOR SQLSTATE '45000';
SET myMsgSerialBatchMinus = ' BATCH/SERIAL TIDAK BOLEH MINUS';
SET myMsgBatchReturTidakDitemukan = ' TIDAK DITEMUKAN BATCH PADA TRANSAKSI INDUK';
SET myMsgSerialReturTidakDitemukan = ' TIDAK DITEMUKAN SERIAL PADA TRANSAKSI INDUK';
SET myMsgRetur = ' MELEBIHI JUMLAH TRANSAKSI YANG DIRETUR';
SET myMsgOverStok = ' MELEBIHI PERSEDIAAN';
SET myMsgSerialPlus = ' SERIAL SUDAH TERDAFTAR';
SET myMsgSerialMinus = ' SERIAL TIDAK VALID';
SET myMsgBatchMinus = ' BATCH TIDAK VALID';
SET myMsgLimitTrans = ' MELEBIHI LIMIT TRANSAKSI YANG DITENTUKAN';
SET myMsgLimitNotaUnpaid = ' MELEBIHI JUMLAH NOTA BELUM TERBAYAR';
SET myMsgLimitMaxHari = ' MELEBIHI HARI TEMPO PIUTANG';
SET myMsgOrderLebihDari = ' MELEBIHI QTY ORDER';
SET myMsgDepositOrder = ' SUDAH TERDAPAT PENGIRIMAN/INVOICE';
SET myMsg = ' ';
SET ctr = 1;
SET allow = TRUE;
SET mytype =(
		SELECT trans_type
		FROM trans
		WHERE trans_id = myid
	);
SET mybussinesscode =(
		SELECT masterbussiness_id
		FROM trans
		WHERE trans_id = myid
	);
SET mymodecekstok =(
		SELECT generalsetting_cekstok
		FROM generalsetting
		WHERE masterbussiness_id = mybussinesscode
	);
SET mymodecekplafon =(
		SELECT generalsetting_purchcekplafon
		FROM generalsetting
		WHERE masterbussiness_id = mybussinesscode
	);
SET mytgl =(
		SELECT trans_entrydate
		FROM trans
		WHERE trans_id = myid
	);
IF mytype = 2 THEN #ORDER PEMBELIAN
IF mymode = 'I' THEN IF mymodecekplafon = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempaja(
	finance_id BIGINT,
	masterpartner_id SMALLINT,
	vector TINYINT,
	finance_currentvalue DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (4, 11);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	-1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (7, 9);
IF (
	SELECT COALESCE(p.masterpartner_limittransaksi, 0) -(SUM(t.finance_currentvalue * t.vector))
	FROM tempaja t,
		masterpartner p
	WHERE t.masterpartner_id = p.masterpartner_id < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		myMsgLimitTrans,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparentorder_id = myid
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparentorder_id = myid
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 4 THEN #INVOICE PEMBELIAN
IF mymode = 'I' THEN IF (
	SELECT COALESCE(trans_id, 0)
	FROM trans
	WHERE trans_id = myid
		AND masterbussiness_id = myBussinessCode
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
	AND d.transline_qtyrealize > d.transline_qtyinput;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF mymodecekplafon = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempaja(
	finance_id BIGINT,
	masterpartner_id SMALLINT,
	vector TINYINT,
	finance_currentvalue DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (4, 11);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	-1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (7, 9);
IF (
	SELECT COALESCE(p.masterpartner_limittransaksi, 0) -(SUM(t.finance_currentvalue * t.vector))
	FROM tempaja t,
		masterpartner p
	WHERE t.masterpartner_id = p.masterpartner_id < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		myMsgLimitTrans,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF mymodecekplafon = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempaja(
	finance_id BIGINT,
	masterpartner_id SMALLINT,
	vector TINYINT,
	finance_currentvalue DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (4, 11);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	-1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (7, 9);
IF (
	SELECT COALESCE(p.masterpartner_limittransaksi, 0) -(SUM(t.finance_currentvalue * t.vector))
	FROM tempaja t,
		masterpartner p
	WHERE t.masterpartner_id = p.masterpartner_id < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		myMsgLimitTrans,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT COALESCE(trans_id, 0)
	FROM trans
	WHERE trans_id = myid
		AND masterbussiness_id = myBussinessCode
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
	AND d.transline_qtyrealize > d.transline_qtyinput;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT *
	FROM trans
	WHERE transparentretur_id = myid
		AND trans_type IN (5)
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'UPDATE DITOLAK, TERDAPAT RETUR',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	transline_id BIGINT,
	masteritem_description VARCHAR(255),
	transline_vector TINYINT,
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT d.transline_id,
	i.masteritem_description,
	1,
	d.transline_qty
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	);
INSERT INTO tempaja
SELECT d.translineparent_id,
	i.masteritem_description,
	-1,
	ABS(SUM(d.transline_qty))
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = "P"
	AND d.translineparent_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.translineparent_id;
IF EXISTS(
	SELECT transline_id,
		SUM(transline_qty * transline_vector)
	FROM tempaja
	GROUP BY transline_id
	HAVING SUM(transline_qty * transline_vector) < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT 'BARANG: ',
					masteritem_description SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgRetur,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'V' THEN IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT *
	FROM trans
	WHERE transparentretur_id = myid
		AND trans_type IN (5)
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'UPDATE DITOLAK, TERDAPAT RETUR',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 5 THEN #RETUR PEMBELIAN
IF mymode = 'I' THEN DROP TEMPORARY TABLE IF EXISTS `tempasal`;
CREATE TEMPORARY TABLE tempasal(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempasal
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id IN (
		SELECT hx.transparentretur_id
		FROM trans hx,
			transline dx,
			transserialbatch sbx
		WHERE hx.trans_id = dx.trans_id
			AND dx.transline_id = sbx.transline_id
			AND dx.trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS `tempretur`;
CREATE TEMPORARY TABLE tempretur(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempretur
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id = myid;
IF EXISTS(
	SELECT r.transserialbatch_serialbatchtext,
		a.transserialbatch_serialbatchtext
	FROM tempretur r
		LEFT OUTER JOIN tempasal a ON a.transserialbatch_serialbatchtext = r.transserialbatch_serialbatchtext
	WHERE a.transserialbatch_serialbatchtext IS NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempretur
		),
		"TIDAK TERDAPAT PADA TRANSAKSI INDUK",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN DROP TEMPORARY TABLE IF EXISTS `tempasal`;
CREATE TEMPORARY TABLE tempasal(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempasal
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id IN (
		SELECT hx.transparentretur_id
		FROM trans hx,
			transline dx,
			transserialbatch sbx
		WHERE hx.trans_id = dx.trans_id
			AND dx.transline_id = sbx.transline_id
			AND dx.trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS `tempretur`;
CREATE TEMPORARY TABLE tempretur(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempretur
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id = myid;
IF EXISTS(
	SELECT r.transserialbatch_serialbatchtext,
		a.transserialbatch_serialbatchtext
	FROM tempretur r
		LEFT OUTER JOIN tempasal a ON a.transserialbatch_serialbatchtext = r.transserialbatch_serialbatchtext
	WHERE a.transserialbatch_serialbatchtext IS NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempretur
		),
		"TIDAK TERDAPAT PADA TRANSAKSI INDUK",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 14 THEN #ORDER PENJUALAN
IF mymode = 'I' THEN IF mymodecekplafon = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempaja(
	finance_id BIGINT,
	masterpartner_id SMALLINT,
	vector TINYINT,
	finance_currentvalue DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (16, 23);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	-1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (19, 21);
IF (
	SELECT COALESCE(p.masterpartner_limittransaksi, 0) -(SUM(t.finance_currentvalue * t.vector))
	FROM tempaja t,
		masterpartner p
	WHERE t.masterpartner_id = p.masterpartner_id < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		myMsgLimitTrans,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparentorder_id = myid
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF EXISTS(
	SELECT trans_id
	FROM trans
	WHERE transparentorder_id = myid
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
		"TELAH TERBIT TRANSAKSI INVOICE",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 16 THEN #INVOICE PENJUALAN
IF mymode = 'I' THEN IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = False;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT COALESCE(trans_id, 0)
	FROM trans
	WHERE trans_id = myid
		AND masterbussiness_id = myBussinessCode
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
	AND d.transline_qtyrealize > d.transline_qtyinput;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF mymodecekplafon = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempaja(
	finance_id BIGINT,
	masterpartner_id SMALLINT,
	vector TINYINT,
	finance_currentvalue DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (16, 23);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	-1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (19, 21);
IF (
	SELECT COALESCE(p.masterpartner_limittransaksi, 0) -(SUM(t.finance_currentvalue * t.vector))
	FROM tempaja t,
		masterpartner p
	WHERE t.masterpartner_id = p.masterpartner_id < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		myMsgLimitTrans,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF mymodecekplafon = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempaja(
	finance_id BIGINT,
	masterpartner_id SMALLINT,
	vector TINYINT,
	finance_currentvalue DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (16, 23);
INSERT INTO tempaja
SELECT h.finance_id,
	hl.masterpartner_id,
	-1,
	h.finance_currentvalue
FROM trans hl,
	finance h
WHERE hl.trans_id = h.trans_id
	AND hl.masterpartner_id =(
		SELECT masterpartner_id
		FROM trans
		WHERE trans_id = myid
	)
	AND h.finance_type IN (19, 21);
IF (
	SELECT COALESCE(p.masterpartner_limittransaksi, 0) -(SUM(t.finance_currentvalue * t.vector))
	FROM tempaja t,
		masterpartner p
	WHERE t.masterpartner_id = p.masterpartner_id < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		myMsgLimitTrans,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF (
	SELECT COALESCE(trans_id, 0)
	FROM trans
	WHERE trans_id = myid
		AND masterbussiness_id = myBussinessCode
) > 0 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(NAMAITEM VARCHAR(255));
INSERT INTO tempAja
SELECT i.masteritem_description
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
	AND d.transline_qtyrealize > d.transline_qtyinput;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOrderLebihDari,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT *
	FROM trans
	WHERE transparentretur_id = myid
		AND trans_type IN (5)
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'UPDATE DITOLAK, TERDAPAT RETUR',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	transline_id BIGINT,
	masteritem_description VARCHAR(255),
	transline_vector TINYINT,
	transline_qty DECIMAL(33, 15)
);
INSERT INTO tempaja
SELECT d.transline_id,
	i.masteritem_description,
	1,
	d.transline_qty
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND d.transline_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	);
INSERT INTO tempaja
SELECT d.translineparent_id,
	i.masteritem_description,
	-1,
	ABS(SUM(d.transline_qty))
FROM trans h,
	transline d,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = "P"
	AND d.translineparent_id IN (
		SELECT translineparent_id
		FROM transline
		WHERE trans_id = myid
	)
GROUP BY d.translineparent_id;
IF EXISTS(
	SELECT transline_id,
		SUM(transline_qty * transline_vector)
	FROM tempaja
	GROUP BY transline_id
	HAVING SUM(transline_qty * transline_vector) < 0
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT 'BARANG: ',
					masteritem_description SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgRetur,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'V' THEN IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT NAMAITEM SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
IF EXISTS(
	SELECT *
	FROM trans
	WHERE transparentretur_id = myid
		AND trans_type IN (5)
		AND trans_status = "P"
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
		'UPDATE DITOLAK, TERDAPAT RETUR',
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF mytype = 17 THEN #RETUR PENJUALAN
IF mymode = 'I' THEN DROP TEMPORARY TABLE IF EXISTS `tempasal`;
CREATE TEMPORARY TABLE tempasal(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempasal
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id IN (
		SELECT hx.transparentretur_id
		FROM trans hx,
			transline dx,
			transserialbatch sbx
		WHERE hx.trans_id = dx.trans_id
			AND dx.transline_id = sbx.transline_id
			AND dx.trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS `tempretur`;
CREATE TEMPORARY TABLE tempretur(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempretur
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id = myid;
IF EXISTS(
	SELECT r.transserialbatch_serialbatchtext,
		a.transserialbatch_serialbatchtext
	FROM tempretur r
		LEFT OUTER JOIN tempasal a ON a.transserialbatch_serialbatchtext = r.transserialbatch_serialbatchtext
	WHERE a.transserialbatch_serialbatchtext IS NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempretur
		),
		"TIDAK TERDAPAT PADA TRANSAKSI INDUK",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'U' THEN DROP TEMPORARY TABLE IF EXISTS `tempasal`;
CREATE TEMPORARY TABLE tempasal(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempasal
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id IN (
		SELECT hx.transparentretur_id
		FROM trans hx,
			transline dx,
			transserialbatch sbx
		WHERE hx.trans_id = dx.trans_id
			AND dx.transline_id = sbx.transline_id
			AND dx.trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS `tempretur`;
CREATE TEMPORARY TABLE tempretur(transserialbatch_serialbatchtext VARCHAR(255));
INSERT INTO tempretur
SELECT sb.transserialbatch_serialbatchtext
FROM trans h,
	transline d,
	transserialbatch sb
WHERE h.trans_id = d.trans_id
	AND d.transline_id = sb.transline_id
	AND h.trans_id = myid;
IF EXISTS(
	SELECT r.transserialbatch_serialbatchtext,
		a.transserialbatch_serialbatchtext
	FROM tempretur r
		LEFT OUTER JOIN tempasal a ON a.transserialbatch_serialbatchtext = r.transserialbatch_serialbatchtext
	WHERE a.transserialbatch_serialbatchtext IS NULL
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempretur
		),
		"TIDAK TERDAPAT PADA TRANSAKSI INDUK",
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSEIF mymode = 'D' THEN IF allow THEN COMMIT;
ELSE ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
ELSEIF (mytype = 24)
OR(mytype = 27)
OR(mytype = 30)
OR(mytype = 33) THEN #STOK ADJUSTMENT #ASSEMBLY #DISASSEMBLY #TRANSFERGUDANG
IF (mymode = 'I')
OR(mymode = 'U')
OR(mymode = 'D') THEN IF mymodecekstok = 1 THEN DROP TEMPORARY TABLE IF EXISTS `tempAja`;
CREATE TEMPORARY TABLE tempAja(
	masteritem_id INT,
	masterwarehouse_id SMALLINT,
	masteritem_description VARCHAR(255)
);
INSERT tempAja
SELECT d.masteritem_id,
	d.masterwarehouse_id,
	i.masteritem_description
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_entrydate <= mytgl
	AND h.trans_type IN (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
	AND t.masteritemtype_isstock = True
	AND h.trans_status = "P"
	AND d.masteritem_id IN (
		SELECT masteritem_id
		FROM transline
		WHERE trans_id = myid
	)
	AND h.masterbussiness_id = myBussinessCode
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterbussiness_id
HAVING SUM(d.transline_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempAja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(DISTINCT masteritem_description SEPARATOR ';')
			FROM tempAja
		),
		myMsgOverStok,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
END IF;
DROP TEMPORARY TABLE IF EXISTS `tempaja`;
CREATE TEMPORARY TABLE tempaja(
	masteritem_description VARCHAR(255),
	transserialbatch_serialbatchtext VARCHAR(255),
	transserialbatch_qty TINYINT(6)
);
INSERT INTO tempaja(
		masteritem_description,
		transserialbatch_serialbatchtext,
		transserialbatch_qty
	)
SELECT i.masteritem_description,
	s.transserialbatch_serialbatchtext,
	COALESCE(SUM(s.transserialbatch_qty), 0)
FROM trans h,
	transline d,
	transserialbatch s,
	masteritem i
WHERE h.trans_id = d.trans_id
	AND d.transline_id = s.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND h.trans_status = 'P'
	AND h.trans_id = myid
GROUP BY d.masteritem_id,
	s.transserialbatch_serialbatchtext
HAVING SUM(s.transserialbatch_qty) < 0;
IF EXISTS(
	SELECT *
	FROM tempaja
) THEN
SET allow = FALSE;
SET myMsg = CONCAT(
		myMsg,
		ctr,
		'. ',
(
			SELECT GROUP_CONCAT(
					DISTINCT masteritem_description,
					' SN: ',
					transserialbatch_serialbatchtext SEPARATOR ';'
				)
			FROM tempaja
		),
		myMsgSerialBatchMinus,
		CHAR(10 using utf8)
	);
SET ctr = ctr + 1;
END IF;
IF allow = False THEN ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END IF;
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_CreateAsset
DELIMITER / / CREATE PROCEDURE `X_CreateAsset`(
	IN `myBussinessCode` CHAR(36),
	IN `myTgl` BIGINT
) BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE qqFIXEDASSETCODE CHAR(36);
DECLARE qqNOAUTOFIXEDASSET,
	myLOGNO,
	myGLNO CHAR(36);
DECLARE qqSTORECODE,
	qqGLLINKASSET,
	qqGLLINKEXPENSE,
	qqGLLINKACCUMULATION,
	qqGLLINKSALES,
	qqGLLINKVATMASUKAN,
	qqGLLINKVATKELUARAN,
	qqEXCHANGECODE,
	myPlatformCode CHAR(36);
DECLARE qqDEPRECIATIONTRANSENTRYTEXT,
	qqCREATEBY,
	qqTRANSTYPECODE VARCHAR(255);
DECLARE qqDEPRECIATIONDATE BIGINT;
DECLARE qqDEPRECIATIONVALUE DECIMAL(33, 15);
DECLARE myCursor CURSOR FOR
SELECT s.masterfixassetsusut_id,
	s.masterfixasset_id,
	s.masterfixassetsusut_text,
	s.masterfixassetsusut_type,
	s.masterfixassetsusut_depreciationdate,
	s.masterfixassetsusut_depreciationvalue,
	s.masterfixassetsusut_oleh,
	c.masterfixassetcategory_accountasset,
	c.masterfixassetcategory_accountexpense,
	c.masterfixassetcategory_accountaccumulation,
	c.masterfixassetcategory_accountkeuntungan,
	c.masterfixassetcategory_accountmasukan,
	c.masterfixassetcategory_accountkeluaran,
	c.masterplatform_id,
	a.masterstore_id
FROM masterfixasset a,
	masterfixassetcategory c,
	masterfixassetsusut s
WHERE a.masterfixassetcategory_id = c.masterfixassetcategory_id
	AND a.masterfixasset_id = s.masterfixasset_id
	AND DATE(
		FROM_UNIXTIME(s.masterfixassetsusut_depreciationdate DIV 1000)
	) <= DATE(FROM_UNIXTIME(myTgl DIV 1000))
	AND NOT a.trans_id IS NULL
	AND s.trans_id IS NULL
	AND s.masterfixassetsusut_active = 1
	AND a.masterbussiness_id = myBussinessCode
	AND masterfixassetsusut_depreciationdate <> 0
ORDER BY s.masterfixassetsusut_depreciationdate,
	s.masterfixassetsusut_id;
DECLARE CONTINUE HANDLER FOR NOT FOUND
SET done = TRUE;
OPEN myCursor;
read_loop :LOOP FETCH myCursor INTO qqNOAUTOFIXEDASSET,
qqFIXEDASSETCODE,
qqDEPRECIATIONTRANSENTRYTEXT,
qqTRANSTYPECODE,
qqDEPRECIATIONDATE,
qqDEPRECIATIONVALUE,
qqCREATEBY,
qqGLLINKASSET,
qqGLLINKEXPENSE,
qqGLLINKACCUMULATION,
qqGLLINKSALES,
qqGLLINKVATMASUKAN,
qqGLLINKVATKELUARAN,
myPlatformCode,
qqSTORECODE;
IF done THEN LEAVE read_loop;
END IF;
IF qqTransTypeCode = 35 THEN #PENYUSUTAN AKTIVA TETAP
SET qqEXCHANGECODE =(
		SELECT generalsettingdefault_exchangecode_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = myBussinessCode
	);
SET myLOGNO =(
		SELECT Y_GetUUID()
	);
SET myGLNO =(
		SELECT Y_GetUUID()
	);
INSERT INTO trans(
		trans_id,
		masterstore_id,
		masterexchange_id,
		masterplatform_id,
		masterfixasset_id,
		masterfixassetsusut_id,
		masterbussiness_id,
		trans_text,
		trans_type,
		trans_entrydate,
		trans_status,
		trans_oleh
	)
VALUES(
		myLOGNO,
		qqSTORECODE,
		qqEXCHANGECODE,
		myPlatformCode,
		qqFIXEDASSETCODE,
		qqNOAUTOFIXEDASSET,
		myBussinessCode,
		qqDEPRECIATIONTRANSENTRYTEXT,
		qqTRANSTYPECODE,
		qqDEPRECIATIONDATE,
		"P",
		qqCREATEBY
	);
INSERT INTO transline(
		transline_id,
		trans_id,
		masteraccount_id,
		masterbussiness_id,
		transline_qtyinput,
		transline_priceinput,
		transline_vector
	)
VALUES(
		(
			SELECT UUID()
		),
		myLOGNO,
		qqGLLINKEXPENSE,
		myBussinessCode,
		1,
		qqDEPRECIATIONVALUE,
		1
	);
INSERT INTO transline(
		transline_id,
		trans_id,
		masteraccount_id,
		masterbussiness_id,
		transline_qtyinput,
		transline_priceinput,
		transline_vector
	)
VALUES(
		(
			SELECT UUID()
		),
		myLOGNO,
		qqGLLINKACCUMULATION,
		myBussinessCode,
		1,
		qqDEPRECIATIONVALUE,
		-1
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_type,
		gl_entrydate,
		gl_status,
		gl_oleh
	)
VALUES(
		myGLNO,
		myLOGNO,
		myBussinessCode,
		qqDEPRECIATIONTRANSENTRYTEXT,
		qqTRANSTYPECODE,
		qqDEPRECIATIONDATE,
		"P",
		qqCREATEBY
	);
INSERT INTO glline(
		glline_id,
		gl_id,
		masteraccount_id,
		masterbussiness_id,
		glline_vector,
		glline_exchangevalue,
		glline_amount,
		glline_amountvalue
	)
VALUES(
		(
			SELECT UUID()
		),
		myGLNO,
		qqGLLINKEXPENSE,
		myBussinessCode,
		1,
		1,
		qqDEPRECIATIONVALUE,
		qqDEPRECIATIONVALUE
	);
INSERT INTO glline(
		glline_id,
		gl_id,
		masteraccount_id,
		masterbussiness_id,
		glline_vector,
		glline_exchangevalue,
		glline_amount,
		glline_amountvalue
	)
VALUES(
		(
			SELECT UUID()
		),
		myGLNO,
		qqGLLINKACCUMULATION,
		myBussinessCode,
		-1,
		1,
		qqDEPRECIATIONVALUE,
		qqDEPRECIATIONVALUE
	);
UPDATE masterfixassetsusut
SET trans_id = myLOGNO
WHERE masterfixassetsusut_id = qqNOAUTOFIXEDASSET;
END IF;
END LOOP;
CLOSE myCursor;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_CreateSomething
DELIMITER / / CREATE PROCEDURE ``X_CreateSomething``(
	IN `myid` CHAR(36),
	IN `myBussinessCode` CHAR(36)
) BEGIN
DECLARE myidgl,
	myidfinance,
	myidfinanceuangmuka,
	myidparent,
	myidhutanggenset,
	myidakunheader,
	myidpiutanggenset,
	myakunbayar CHAR(36);
DECLARE mytypecode SMALLINT;
DECLARE qqvectorbayarhutangpiutang INT;
DECLARE qqNilaiBeliAsset,
	qqNilaiAkumulasiAsset,
	qqnilaiterbayar,
	qqnilaitotal,
	qqnilaikartucas,
	qqnilaiuangmuka,
	qqnilaiuangmukadirect DECIMAL(33, 15);
SET mytypecode =(
		SELECT trans_type
		FROM trans
		WHERE trans_id = myid
	);
IF mytypecode = 1 THEN
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_netvalue),
	SUM(transline_taxvalue),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
ELSEIF mytypecode = 2 THEN #ORDER PEMBELIAN
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
INSERT INTO transattribut
SELECT UUID(),
	d.trans_id,
	d.masterbussiness_id,
	SUM(d.transline_netvalue),
	SUM(d.transline_taxvalue),
	dp.totaldp
FROM transline d
	LEFT OUTER JOIN(
		SELECT h.transparent_id,
			SUM(d.transline_priceinput) AS totaldp
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status = "P"
			AND h.trans_type IN (7)
			AND h.transparent_id = myid
			AND d.transline_ishide = 0
		GROUP BY h.transparent_id
	) AS dp ON d.trans_id = dp.transparent_id
WHERE d.transline_ishide = 0
	AND d.trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF qqnilaiterbayar <> 0 THEN #ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_priceinput),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	finance hf
SET hf.finance_originalvalue = qqnilaiterbayar,
	hf.finance_entrydate = h.trans_entrydate
WHERE h.trans_id = hf.trans_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	"P",
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_priceinput,
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
(
		SELECT gp.generalsettingpurch_uangmukaorder_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	1,
	SUM(d.transline_priceinput),
	SUM(d.transline_priceinput)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1
	AND d.masteraccount_id IS NOT NULL;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	-1,
	d.transline_priceinput,
	d.transline_priceinput
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1
	AND d.masteraccount_id IS NOT NULL;
CALL X_HitungHutangPiutang(myid);
END IF;
ELSEIF mytypecode = 3 THEN #DELIVERY PEMBELIAN
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingpurch_unbill_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	SUM(COALESCE(d.transline_net, 0)),
	SUM(COALESCE(d.transline_netvalue, 0))
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSEIF mytypecode = 4 THEN #PEMBELIAN
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_netvalue),
	SUM(transline_taxvalue),
	0
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
INSERT INTO translineattribute
SELECT UUID(),
	d.transline_id,
	d.masterbussiness_id,
	ABS(COALESCE(d.transline_qty, 0)),
	0
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 16)
	AND t.masteritemtype_isstock = 1
	AND h.trans_id = myid ON DUPLICATE KEY
UPDATE translineattribute_totalqty =
VALUES(translineattribute_totalqty),
	translineattribute_totalretur =
VALUES(translineattribute_totalretur);
IF (
	SELECT COUNT(*)
	FROM transline
	WHERE trans_id = myid
) > 0 THEN
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
SET qqnilaitotal =(
		SELECT SUM(
				COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
			)
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 0
	);
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
(
		SELECT h.trans_tanggalnotapembelian +(c.masterother_creditperiod * 86400000)
		FROM trans H,
			masterother c
		WHERE h.mastercreditterm_id = c.masterother_id
			AND H.trans_id = myid
	),
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	finance hf,
	masterother c
SET hf.finance_originalvalue =(
		SELECT SUM(
				COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
			) + COALESCE(qqnilaikartucas, 0)
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 0
	),
	hf.finance_entrydate = h.trans_entrydate,
	hf.finance_duedate = h.trans_tanggalnotapembelian + c.masterother_creditperiod * 86400000
WHERE h.trans_id = hf.trans_id
	AND h.mastercreditterm_id = c.masterother_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#jika terdapat transaksi indukan
IF (
	SELECT hh.trans_type
	FROM trans h
		LEFT OUTER JOIN trans hh ON h.transparent_id = hh.trans_id
	WHERE h.trans_id = myid
) = 2 THEN #ditarik dari PO
SET qqnilaiuangmuka =(
		SELECT COALESCE(SUM(bd.transline_priceinput), 0)
		FROM trans h
			LEFT OUTER JOIN trans hh ON h.transparent_id = hh.trans_id
			LEFT OUTER JOIN trans b ON b.transparent_id = hh.trans_id
			AND b.trans_type IN (7)
			LEFT OUTER JOIN transline bd ON b.trans_id = bd.trans_id
			AND bd.transline_ishide = 1
		WHERE h.trans_id = myid
	);
SET qqnilaiuangmukadirect =(
		SELECT COALESCE(doo.transline_priceinput, 0)
		FROM trans h,
			trans ho,
			transline doo
		WHERE h.transparent_id = ho.trans_id
			AND ho.trans_id = doo.trans_id
			AND doo.transline_ishide = 1
			AND h.trans_id = myid
	);
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	),
	trans_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF COALESCE(qqnilaiterbayar, 0) > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	qqnilaiterbayar,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND d.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(ddp.transline_priceinput),
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (7)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id
HAVING SUM(ddp.transline_priceinput) <> 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	fh.finance_id,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(ddp.transline_priceinput),
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (7)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id
HAVING SUM(ddp.transline_priceinput) <> 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	doo.transline_priceinput,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	fho.finance_id,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	doo.transline_priceinput,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid
	AND COALESCE(doo.transline_priceinput, 0) <> 0;
#kondisi tidak dibayar sama sekali
IF COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0) = COALESCE(qqnilaitotal, 0) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingpurch_hutang_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	COALESCE(qqnilaitotal, 0) / h.trans_exchangevalue,
	COALESCE(qqnilaitotal, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0
GROUP BY h.trans_id;
#kondisi lunas
ELSEIF COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) = 0 THEN IF COALESCE(qqnilaiterbayar, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	COALESCE(qqnilaiterbayar, 0),
	COALESCE(qqnilaiterbayar, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
IF COALESCE(qqnilaiuangmuka, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	ddp.transline_id,
(
		SELECT generalsettingpurch_uangmukaorder_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- ddp.transline_vector,
	ddp.transline_priceinput,
	ddp.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (7)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id;
END IF;
IF COALESCE(qqnilaiuangmukadirect, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	doo.transline_id,
(
		SELECT generalsettingpurch_uangmukaorder_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- doo.transline_vector,
	doo.transline_priceinput,
	doo.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
END IF;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingpurch_hutang_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0),
	COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF COALESCE(qqnilaiterbayar, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	COALESCE(qqnilaiterbayar, 0),
	COALESCE(qqnilaiterbayar, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
IF COALESCE(qqnilaiuangmuka, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	ddp.transline_id,
(
		SELECT generalsettingpurch_uangmukaorder_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- ddp.transline_vector,
	ddp.transline_priceinput,
	ddp.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (7)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id;
END IF;
IF COALESCE(qqnilaiuangmukadirect, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	doo.transline_id,
(
		SELECT generalsettingpurch_uangmukaorder_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- doo.transline_vector,
	doo.transline_priceinput,
	doo.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
END IF;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountvatmasuk,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	d.transline_tax,
	d.transline_taxvalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	COALESCE(
		c.masteritemcategory_accountpersediaan,
		d.masteraccount_id
	),
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSEIF (
	SELECT hh.trans_type
	FROM trans h
		LEFT OUTER JOIN trans hh ON h.transparent_id = hh.trans_id
	WHERE h.trans_id = myid
) = 3 THEN #ditarik dari PD
SET qqnilaiuangmuka =(
		SELECT COALESCE(SUM(bd.transline_priceinput), 0)
		FROM trans h
			LEFT OUTER JOIN trans hh ON h.transparent_id = hh.trans_id
			LEFT OUTER JOIN trans hhh ON hh.transparent_id = hhh.trans_id
			LEFT OUTER JOIN trans b ON b.transparent_id = hhh.trans_id
			AND b.trans_type IN (7)
			LEFT OUTER JOIN transline bd ON b.trans_id = bd.trans_id
		WHERE h.trans_id = myid
	);
SET qqnilaiuangmukadirect =(
		SELECT COALESCE(doo.transline_priceinput, 0)
		FROM trans h,
			trans hd
			LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
			LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
			AND doo.transline_ishide = 1
		WHERE h.transparent_id = hd.trans_id
			AND h.trans_id = myid
	);
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	) + COALESCE(qqnilaikartucas, 0),
	trans_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF COALESCE(qqnilaiterbayar, 0) > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	qqnilaiterbayar,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND d.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(ddp.transline_priceinput),
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id
HAVING SUM(ddp.transline_priceinput) <> 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	fh.finance_id,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(ddp.transline_priceinput),
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id
HAVING SUM(ddp.transline_priceinput) <> 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	doo.transline_priceinput,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	fho.finance_id,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	doo.transline_priceinput,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid
	AND COALESCE(doo.transline_priceinput, 0) <> 0;
IF COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) = COALESCE(qqnilaitotal, 0) THEN #kondisi tidak membayar sama sekali
INSERT INTO glline(
		glline_id,
		gl_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
(
		SELECT generalsettingpurch_hutang_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	masterexchange_id,
	masterbussiness_id,
	trans_description,
	trans_exchangevalue,
	-1,
	COALESCE(qqnilaitotal, 0) / trans_exchangevalue,
	COALESCE(qqnilaitotal, 0)
FROM trans
WHERE trans_id = myid;
ELSEIF COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) = 0 THEN IF COALESCE(qqnilaiterbayar, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	COALESCE(qqnilaiterbayar, 0),
	COALESCE(qqnilaiterbayar, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
IF COALESCE(qqnilaiuangmuka, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	ddp.transline_id,
(
		SELECT generalsettingpurch_uangmukaorder_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- ddp.transline_vector,
	ddp.transline_priceinput,
	ddp.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (7)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id;
END IF;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingpurch_hutang_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0),
	COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF COALESCE(qqnilaiterbayar, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	COALESCE(qqnilaiterbayar, 0),
	COALESCE(qqnilaiterbayar, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
IF COALESCE(qqnilaiuangmuka, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	ddp.transline_id,
(
		SELECT generalsettingpurch_uangmukaorder_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- ddp.transline_vector,
	ddp.transline_priceinput,
	ddp.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (7)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id;
END IF;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingpurch_unbill_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	SUM(COALESCE(d.transline_net, 0)),
	SUM(COALESCE(d.transline_netvalue, 0))
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountvatmasuk,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	d.transline_tax,
	d.transline_taxvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSE
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
SET qqnilaitotal =(
		SELECT SUM(
				COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
			)
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 0
	);
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	),
	trans_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF qqnilaiterbayar > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_priceinput,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND d.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
#ranah gl
IF qqnilaiterbayar > 0 THEN IF qqnilaitotal - qqnilaiterbayar > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT gp.generalsettingpurch_hutang_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
(qqnilaitotal - qqnilaiterbayar) / h.trans_exchangevalue,
	qqnilaitotal - qqnilaiterbayar
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	d.transline_priceinput,
	d.transline_priceinput
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingpurch_hutang_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	SUM(
		COALESCE(d.transline_net, 0) + COALESCE(d.transline_tax, 0)
	),
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	COALESCE(
		c.masteritemcategory_accountvatmasuk,
		gp.generalsettingpurch_ppn_id
	),
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	d.transline_tax,
	d.transline_taxvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id,
	generalsettingpurch gp
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = gp.masterbussiness_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
#FROM trans h,transline d,masteritem i,masteritemcategory c
#WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND h.trans_id=myid AND d.transline_ishide=0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	a.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d,
	masteraccount a
WHERE h.trans_id = d.trans_id
	AND d.masteraccount_id = a.masteraccount_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
CALL X_HitungHutangPiutang(myid);
END IF;
ELSEIF mytypecode = 5 THEN #RETUR PEMBELIAN		
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_netvalue),
	SUM(transline_taxvalue),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
UPDATE translineattribute da,
(
		SELECT d.translineparent_id,
			ABS(COALESCE(SUM(d.transline_qty), 0)) AS qtyretur
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status = "P"
			AND h.trans_type IN (5, 17)
			AND d.translineparent_id IN (
				SELECT translineparent_id
				FROM transline
				WHERE trans_id = myid
			)
		GROUP BY d.translineparent_id
	) AS r
SET da.translineattribute_totalretur = r.qtyretur
WHERE da.transline_id = r.translineparent_id;
#ranah header
SET myidparent =(
		SELECT hf.finance_id
		FROM trans h,
			trans hh,
			finance hf
		WHERE h.transparent_id = hh.trans_id
			AND hh.trans_id = hf.trans_id
			AND h.trans_id = myid
	);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
IF qqnilaiterbayar > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	SUM(d.transline_priceinput),
	SUM(d.transline_priceinput) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue)
	),
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue)
	) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountvatmasuk,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	transline_taxvalue,
	transline_taxvalue * h.trans_exchangevalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_taxvalue, 0) <> 0
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_net, 0) <> 0
	AND d.transline_ishide = 0;
#ranah finance
IF qqnilaiterbayar > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidparent,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_priceinput),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidparent,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 6 THEN #BAYAR HUTANG
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_priceinput),
(NULL),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	46,
	h.trans_entrydate,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transparentpayment_id IS NULL
	AND d.transline_ishide = 0;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE FROM financeline
WHERE trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah financeline
DROP TEMPORARY TABLE IF EXISTS financetemp;
CREATE TEMPORARY TABLE financetemp LIKE finance;
INSERT INTO financetemp
SELECT hf.*
FROM finance hf,
	transline d
WHERE hf.trans_id = d.transparentpayment_id
	AND d.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_nomorgiro,
		financeline_girojatem,
		financeline_oleh
	)
SELECT UUID(),
(
		SELECT finance_id
		FROM financetemp
		WHERE trans_id = d.transparentpayment_id
	),
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	transline_description,
	trans_nomorgiro,
	trans_girojatem,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND NOT d.transparentpayment_id IS NULL
	AND d.transline_ishide = 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	46,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	transline_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transparentpayment_id IS NULL
	AND d.transline_ishide = 0;
#ranah gl
IF qqnilaiterbayar > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	CASE
		WHEN (
			SELECT trans_girojatem
			FROM trans
			WHERE trans_id = myid
		) IS NULL THEN h.masteraccount_id
		ELSE (
			SELECT gp.generalsettingpurch_bg_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
	END,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	SUM(d.transline_priceinput),
	SUM(d.transline_priceinput) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	CASE
		WHEN (hf.trans_type = 4)
		OR(hf.trans_type = 11)
		OR(hf.trans_type = 34) THEN (
			SELECT generalsettingpurch_hutang_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		WHEN (hf.trans_type = 6) THEN (
			SELECT generalsettingpurch_hutang_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		WHEN (hf.trans_type = 7) THEN (
			SELECT generalsettingpurch_uangmuka_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		ELSE (
			SELECT generalsettingpurch_unbill_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
	END,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
	LEFT OUTER JOIN trans hf ON d.transparentpayment_id = hf.trans_id
WHERE h.trans_id = d.trans_id
	AND d.transline_priceinput <> 0
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 7 THEN #UANG MUKA PEMBELIAN
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_priceinput),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE d.*
FROM finance h,
	financeline d
WHERE h.finance_id = d.finance_id
	AND d.trans_id = myid;
UPDATE trans h,
	finance hf
SET hf.finance_originalvalue =(
		SELECT SUM(transline_netvalue + transline_taxvalue)
		FROM transline
		WHERE trans_id = myid
	),
	hf.finance_entrydate = h.trans_entrydate,
	hf.finance_duedate = h.trans_tanggalnotapembelian
WHERE h.trans_id = hf.trans_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingpurch_uangmuka_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	transline_net,
	transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	transline_net,
	transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 8 THEN #GIRO HUTANG CAIR
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_priceinput),
(NULL),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingpurch_bg_id
		FROM generalsettingpurch
		WHERE masterbussiness_id = myBussinessCode
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	SUM(d.transline_net),
	SUM(d.transline_netvalue * h.trans_exchangevalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT masteraccount_id
		FROM trans
		WHERE trans_id =(
				SELECT transparent_id
				FROM trans
				WHERE trans_id = myid
			)
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSEIF mytypecode = 11 THEN #SALDO AWAL HUTANG
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
	h.trans_tanggalnotapembelian,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_net, 0) + COALESCE(d.transline_tax, 0)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE d.*
FROM finance h,
	financeline d
WHERE h.finance_id = d.finance_id
	AND d.trans_id = myid;
UPDATE trans h,
	finance hf
SET hf.finance_originalvalue =(
		SELECT SUM(transline_netvalue + transline_taxvalue)
		FROM transline
		WHERE trans_id = myid
	),
	hf.finance_entrydate = h.trans_entrydate,
	hf.finance_duedate = h.trans_tanggalnotapembelian
WHERE h.trans_id = hf.trans_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_netvalue),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT gp.generalsettingpurch_hutang_id
		FROM generalsettingpurch gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	SUM(
		COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
	),
	SUM(
		COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
	) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	transline_net,
	transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_net, 0) <> 0;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 13 THEN #quote penjualan
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_netvalue),
	SUM(transline_taxvalue),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
ELSEIF mytypecode = 14 THEN #ORDER PENJUALAN
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
INSERT INTO transattribut
SELECT UUID(),
	d.trans_id,
	d.masterbussiness_id,
	SUM(d.transline_netvalue),
	SUM(d.transline_taxvalue),
	dp.totaldp
FROM transline d
	LEFT OUTER JOIN(
		SELECT h.transparent_id,
			SUM(d.transline_priceinput) AS totaldp
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status = "P"
			AND h.trans_type IN (7)
			AND h.transparent_id = myid
			AND d.transline_ishide = 0
		GROUP BY h.transparent_id
	) AS dp ON d.trans_id = dp.transparent_id
WHERE d.transline_ishide = 0
	AND d.trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF qqnilaiterbayar <> 0 THEN #ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_priceinput),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	finance hf
SET hf.finance_originalvalue = qqnilaiterbayar,
	hf.finance_entrydate = h.trans_entrydate
WHERE h.trans_id = hf.trans_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	"P",
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_priceinput,
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
(
		SELECT gs.generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gs,
			trans h
		WHERE gs.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	-1,
	SUM(d.transline_priceinput),
	SUM(d.transline_priceinput)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	1,
	d.transline_priceinput,
	d.transline_priceinput
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
CALL X_HitungHutangPiutang(myid);
END IF;
ELSEIF mytypecode = 15 THEN #DELIVERY PENJUALAN
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_unbill_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	SUM(COALESCE(d.transline_net, 0)),
	SUM(COALESCE(d.transline_netvalue, 0))
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_unbillrevenue_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSEIF mytypecode = 12 THEN #SALDO AWAL BARANG
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	SUM(
		COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
	),
	SUM(
		COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
	) * h.trans_exchangevalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountvatmasuk,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	transline_taxvalue,
	transline_taxvalue * h.trans_exchangevalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_taxvalue, 0) <> 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	transline_net,
	transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_net, 0) <> 0;
ELSEIF mytypecode = 16 THEN #PENJUALAN
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	COALESCE(SUM(transline_netvalue), 0),
	COALESCE(SUM(transline_taxvalue), 0),
	0
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
INSERT INTO translineattribute
SELECT UUID(),
	d.transline_id,
	d.masterbussiness_id,
	ABS(COALESCE(d.transline_qty, 0)),
	0
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 16)
	AND t.masteritemtype_isstock = 1
	AND h.trans_id = myid ON DUPLICATE KEY
UPDATE translineattribute_totalqty =
VALUES(translineattribute_totalqty),
	translineattribute_totalretur =
VALUES(translineattribute_totalretur);
IF (
	SELECT COUNT(*)
	FROM transline
	WHERE trans_id = myid
) > 0 THEN
SET qqnilaikartucas =(
		SELECT SUM(COALESCE(transline_cardchargesvalue, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_cardchargesvalue IS NOT NULL
			AND transline_ishide = 1
	);
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
SET qqnilaitotal =(
		SELECT SUM(
				COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
			) + COALESCE(qqnilaikartucas, 0)
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 0
	);
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
(
		SELECT h.trans_tanggalnotapembelian +(c.masterother_creditperiod * 86400000)
		FROM trans H,
			masterother c
		WHERE h.mastercreditterm_id = c.masterother_id
			AND H.trans_id = myid
	),
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	) + COALESCE(qqnilaikartucas, 0),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	finance hf,
	masterother c
SET hf.finance_originalvalue =(
		SELECT SUM(
				COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
			) + COALESCE(qqnilaikartucas, 0)
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 0
	),
	hf.finance_entrydate = h.trans_entrydate,
	hf.finance_duedate = h.trans_tanggalnotapembelian + c.masterother_creditperiod * 86400000
WHERE h.trans_id = hf.trans_id
	AND h.mastercreditterm_id = c.masterother_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
INSERT INTO glline
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	1,
	d.transline_vector,
	ABS(dh.translinehpp_totalhpp),
	ABS(dh.translinehpp_totalhpp)
FROM trans h,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
INSERT INTO glline
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accounthpp,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	1,
	- d.transline_vector,
	ABS(dh.translinehpp_totalhpp),
	ABS(dh.translinehpp_totalhpp)
FROM trans h,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
INSERT INTO glline
SELECT UUID(),
	gh.gl_id,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	1,
	d.transline_vector,
	ABS(dh.translinehpp_totalhpp),
	ABS(dh.translinehpp_totalhpp)
FROM trans h
	LEFT OUTER JOIN gl gh ON h.trans_id = gh.trans_id,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
INSERT INTO glline
SELECT UUID(),
	gh.gl_id,
	d.transline_id,
	c.masteritemcategory_accounthpp,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	1,
	- d.transline_vector,
	ABS(dh.translinehpp_totalhpp),
	ABS(dh.translinehpp_totalhpp)
FROM trans h
	LEFT OUTER JOIN gl gh ON h.trans_id = gh.trans_id,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
END IF;
#jika terdapat transaksi indukan
IF (
	SELECT hh.trans_type
	FROM trans h
		LEFT OUTER JOIN trans hh ON h.transparent_id = hh.trans_id
	WHERE h.trans_id = myid
) = 14 THEN #ditarik dari SO
SET qqnilaiuangmuka =(
		SELECT COALESCE(SUM(bd.transline_priceinput), 0)
		FROM trans h
			LEFT OUTER JOIN trans hh ON h.transparent_id = hh.trans_id
			LEFT OUTER JOIN trans b ON b.transparent_id = hh.trans_id
			AND b.trans_type IN (19)
			LEFT OUTER JOIN transline bd ON b.trans_id = bd.trans_id
		WHERE h.trans_id = myid
	);
SET qqnilaiuangmukadirect =(
		SELECT COALESCE(doo.transline_priceinput, 0)
		FROM trans h,
			trans ho,
			transline doo
		WHERE h.transparent_id = ho.trans_id
			AND ho.trans_id = doo.trans_id
			AND doo.transline_ishide = 1
			AND h.trans_id = myid
	);
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	) + COALESCE(qqnilaikartucas, 0),
	trans_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF COALESCE(qqnilaiterbayar, 0) > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	qqnilaiterbayar,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND d.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(ddp.transline_priceinput),
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	fh.finance_id,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(ddp.transline_priceinput),
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id
HAVING SUM(ddp.transline_priceinput) <> 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	doo.transline_priceinput,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	fho.finance_id,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	doo.transline_priceinput,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid
	AND COALESCE(doo.transline_priceinput, 0) <> 0;
IF COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0) = COALESCE(qqnilaitotal, 0) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_piutang_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(qqnilaitotal, 0) / h.trans_exchangevalue,
	COALESCE(qqnilaitotal, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0
GROUP BY h.trans_id;
ELSEIF COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0) = 0 THEN IF COALESCE(qqnilaiterbayar, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(qqnilaiterbayar, 0),
	COALESCE(qqnilaiterbayar, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_cardcharges
		FROM generalsettingsell
		WHERE masterbussiness_id = myBussinessCode
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	d.transline_cardchargesvalue,
	d.transline_cardchargesvalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1
	AND d.transline_cardchargesvalue IS NOT NULL;
IF COALESCE(qqnilaiuangmuka, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	ddp.transline_id,
(
		SELECT generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- ddp.transline_vector,
	ddp.transline_priceinput,
	ddp.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id;
END IF;
IF COALESCE(qqnilaiuangmukadirect, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	doo.transline_id,
(
		SELECT generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- doo.transline_vector,
	doo.transline_priceinput,
	doo.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
END IF;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_piutang_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0),
	COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF COALESCE(qqnilaiterbayar, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(qqnilaiterbayar, 0),
	COALESCE(qqnilaiterbayar, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_cardcharges
		FROM generalsettingsell
		WHERE masterbussiness_id = myBussinessCode
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	d.transline_cardchargesvalue,
	d.transline_cardchargesvalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1
	AND d.transline_cardchargesvalue IS NOT NULL;
IF COALESCE(qqnilaiuangmuka, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	ddp.transline_id,
(
		SELECT generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- ddp.transline_vector,
	ddp.transline_priceinput,
	ddp.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id;
END IF;
IF COALESCE(qqnilaiuangmukadirect, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	doo.transline_id,
(
		SELECT generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- doo.transline_vector,
	doo.transline_priceinput,
	doo.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans ho ON h.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
END IF;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountvatkeluar,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	d.transline_tax,
	d.transline_taxvalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	COALESCE(
		c.masteritemcategory_accountsales,
		d.masteraccount_id
	),
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSEIF (
	SELECT hh.trans_type
	FROM trans h
		LEFT OUTER JOIN trans hh ON h.transparent_id = hh.trans_id
	WHERE h.trans_id = myid
) = 15 THEN #ditarik dari SD
SET qqnilaiuangmuka =(
		SELECT COALESCE(SUM(bd.transline_priceinput), 0)
		FROM trans h
			LEFT OUTER JOIN trans hh ON h.transparent_id = hh.trans_id
			LEFT OUTER JOIN trans hhh ON hh.transparent_id = hhh.trans_id
			LEFT OUTER JOIN trans b ON b.transparent_id = hhh.trans_id
			AND b.trans_type IN (19)
			LEFT OUTER JOIN transline bd ON b.trans_id = bd.trans_id
		WHERE h.trans_id = myid
	);
SET qqnilaiuangmukadirect =(
		SELECT COALESCE(doo.transline_priceinput, 0)
		FROM trans h,
			trans hd
			LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
			LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
			AND doo.transline_ishide = 1
		WHERE h.transparent_id = hd.trans_id
			AND h.trans_id = myid
	);
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	) + COALESCE(qqnilaikartucas, 0),
	trans_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF COALESCE(qqnilaiterbayar, 0) > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	qqnilaiterbayar,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND d.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(ddp.transline_priceinput),
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id
HAVING SUM(ddp.transline_priceinput) <> 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	fh.finance_id,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(ddp.transline_priceinput),
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id
HAVING SUM(ddp.transline_priceinput) <> 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	doo.transline_priceinput,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	fho.finance_id,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	"P",
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	doo.transline_priceinput,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid
	AND COALESCE(doo.transline_priceinput, 0) <> 0;
IF COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) = COALESCE(qqnilaitotal, 0) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_piutang_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(qqnilaitotal, 0) / h.trans_exchangevalue,
	COALESCE(qqnilaitotal, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0
GROUP BY h.trans_id;
ELSEIF COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) = 0 THEN IF COALESCE(qqnilaiterbayar, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(qqnilaiterbayar, 0),
	COALESCE(qqnilaiterbayar, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.generalsettingsell_cardcharges,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	d.transline_cardchargesvalue,
	d.transline_cardchargesvalue
FROM trans h,
	transline d,
(
		SELECT masterbussiness_id,
			generalsettingsell_cardcharges
		FROM generalsettingsell
		WHERE masterbussiness_id = myBussinessCode
	) AS c
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = c.masterbussiness_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1
	AND d.transline_cardchargesvalue <> 0
	AND d.transline_cardchargesvalue <> 0
	AND d.transline_cardchargesvalue IS NOT NULL;
IF COALESCE(qqnilaiuangmuka, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	ddp.transline_id,
(
		SELECT generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- ddp.transline_vector,
	ddp.transline_priceinput,
	ddp.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
GROUP BY hdp.trans_id;
END IF;
IF COALESCE(qqnilaiuangmukadirect, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	doo.transline_id,
(
		SELECT generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- doo.transline_vector,
	doo.transline_priceinput,
	doo.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid;
END IF;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_piutang_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0),
	COALESCE(qqnilaitotal, 0) - COALESCE(qqnilaiterbayar, 0) - COALESCE(qqnilaiuangmuka, 0) - COALESCE(qqnilaiuangmukadirect, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF COALESCE(qqnilaiterbayar, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(qqnilaiterbayar, 0),
	COALESCE(qqnilaiterbayar, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.generalsettingsell_cardcharges,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	d.transline_cardchargesvalue,
	d.transline_cardchargesvalue
FROM trans h,
	transline d,
(
		SELECT masterbussiness_id,
			generalsettingsell_cardcharges
		FROM generalsettingsell
		WHERE masterbussiness_id = myBussinessCode
	) AS c
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = c.masterbussiness_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1
	AND d.transline_cardchargesvalue <> 0
	AND d.transline_cardchargesvalue IS NOT NULL;
IF COALESCE(qqnilaiuangmuka, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	ddp.transline_id,
(
		SELECT generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- ddp.transline_vector,
	ddp.transline_priceinput,
	ddp.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN trans hdp ON hdp.transparent_id = ho.trans_id
	AND hdp.trans_type IN (19)
	AND hdp.trans_status = "P"
	LEFT OUTER JOIN transline ddp ON hdp.trans_id = ddp.trans_id
	LEFT OUTER JOIN finance fh ON fh.trans_id = hdp.trans_id
WHERE h.trans_id = myid
	AND COALESCE(ddp.transline_priceinput, 0) <> 0
GROUP BY hdp.trans_id;
END IF;
IF COALESCE(qqnilaiuangmukadirect, 0) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	doo.transline_id,
(
		SELECT generalsettingsell_uangmukaorder_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_exchangevalue,
	- doo.transline_vector,
	doo.transline_priceinput,
	doo.transline_priceinput
FROM trans h
	LEFT OUTER JOIN trans hd ON h.transparent_id = hd.trans_id
	LEFT OUTER JOIN trans ho ON hd.transparent_id = ho.trans_id
	LEFT OUTER JOIN transline doo ON ho.trans_id = doo.trans_id
	AND doo.transline_ishide = 1
	LEFT OUTER JOIN finance fho ON ho.trans_id = fho.trans_id
WHERE h.trans_id = myid
	AND COALESCE(doo.transline_priceinput, 0) <> 0;
END IF;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_unbillrevenue_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	SUM(COALESCE(d.transline_net, 0)),
	SUM(COALESCE(d.transline_netvalue, 0))
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountvatkeluar,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	COALESCE(d.transline_tax, 0),
	d.transline_taxvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountsales,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_unbill_id
		FROM generalsettingsell gp,
			trans h
		WHERE gp.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	d.transline_neT,
	d.transline_netvalue
FROM trans h,
	transline d
	LEFT OUTER JOIN masteritem i ON d.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemcategory c ON i.masteritemcategory_id = c.masteritemcategory_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSE #Langsung SI
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	) + COALESCE(qqnilaikartucas, 0),
	trans_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF qqnilaiterbayar > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	45,
	h.trans_entrydate,
	h.trans_exchangevalue,
	COALESCE(d.transline_priceinput, 0),
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND d.trans_id = myid
	AND d.transline_priceinput IS NOT NULL
	AND d.transline_ishide = 1;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	45,
	h.trans_entrydate,
	h.trans_exchangevalue,
	COALESCE(d.transline_cardchargesvalue, 0),
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND d.trans_id = myid
	AND d.transline_priceinput IS NOT NULL
	AND d.transline_ishide = 1;
END IF;
#ranah gl
IF qqnilaiterbayar > 0 THEN
/*IF COALESCE(qqnilaitotal,0)+COALESCE(qqnilaikartucas,0)-COALESCE(qqnilaiterbayar,0)>0 THEN
 INSERT INTO glline(glline_id,gl_id,transline_id,masteraccount_id,masterexchange_id,masterbussiness_id,glline_description,glline_exchangevalue,glline_vector,glline_amount,glline_amountvalue)
 SELECT UUID(),myidgl,d.transline_id,c.generalsettingsell_piutang_id,h.masterexchange_id,h.masterbussiness_id,h.trans_description,h.trans_exchangevalue,1,COALESCE(qqnilaitotal,0)-COALESCE(qqnilaiterbayar,0),COALESCE(qqnilaitotal,0)-COALESCE(qqnilaiterbayar,0)
 FROM trans h,transline d,(SELECT gs.masterbussiness_id,gs.generalsettingsell_piutang_id FROM generalsettingsell gs,trans h WHERE gs.masterbussiness_id=h.masterbussiness_id AND h.trans_id=myid) AS c
 WHERE h.trans_id=d.trans_id AND h.masterbussiness_id=c.masterbussiness_id AND h.trans_id=myid AND d.transline_ishide=1;
 END IF;*/
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	COALESCE(d.transline_priceinput, 0) + COALESCE(d.transline_cardchargesvalue, 0),
	COALESCE(d.transline_priceinput, 0) + COALESCE(d.transline_cardchargesvalue, 0)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.generalsettingsell_cardcharges,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	d.transline_cardchargesvalue,
	d.transline_cardchargesvalue
FROM trans h,
	transline d,
(
		SELECT masterbussiness_id,
			generalsettingsell_cardcharges
		FROM generalsettingsell
		WHERE masterbussiness_id = myBussinessCode
	) AS c
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = c.masterbussiness_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1
	AND d.transline_cardchargesvalue <> 0
	AND d.transline_cardchargesvalue IS NOT NULL;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.generalsettingsell_piutang_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	SUM(
		COALESCE(d.transline_net, 0) + COALESCE(d.transline_tax, 0)
	) + COALESCE(qqnilaikartucas, 0),
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	) + COALESCE(qqnilaikartucas, 0)
FROM trans h,
	transline d,
(
		SELECT gs.masterbussiness_id,
			gs.generalsettingsell_piutang_id
		FROM generalsettingsell gs,
			trans h
		WHERE gs.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	) AS c
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = c.masterbussiness_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountvatkeluar,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	d.transline_tax,
	d.transline_taxvalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountsales,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	a.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	d.transline_net,
	d.transline_netvalue
FROM trans h,
	transline d,
	masteraccount a
WHERE h.trans_id = d.trans_id
	AND d.masteraccount_id = a.masteraccount_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
CALL X_HitungHutangPiutang(myid);
END IF;
ELSEIF mytypecode = 17 THEN #RETUR PENJUALAN
#ranah header
SET myidparent =(
		SELECT hf.finance_id
		FROM trans h,
			trans hh,
			finance hf
		WHERE h.transparent_id = hh.trans_id
			AND hh.trans_id = hf.trans_id
			AND h.trans_id = myid
	);
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_netvalue),
	SUM(transline_taxvalue),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
UPDATE translineattribute da,
(
		SELECT d.translineparent_id,
			ABS(COALESCE(SUM(d.transline_qty), 0)) AS qtyretur
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status = "P"
			AND h.trans_type IN (5, 17)
			AND d.translineparent_id IN (
				SELECT translineparent_id
				FROM transline
				WHERE trans_id = myid
			)
		GROUP BY d.translineparent_id
	) AS r
SET da.translineattribute_totalretur = r.qtyretur
WHERE da.transline_id = r.translineparent_id;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
IF (
	SELECT SUM(COALESCE(transline_priceinput, 0))
	FROM transline
	WHERE trans_id = myid
		AND transline_ishide = 1
) <> 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	SUM(d.transline_priceinput),
	SUM(d.transline_priceinput) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	SUM(
		COALESCE(d.transline_net, 0) + COALESCE(d.transline_tax)
	),
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountvatkeluar,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	transline_taxvalue,
	transline_taxvalue * h.trans_exchangevalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_taxvalue, 0) <> 0
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountsalesretur,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_net, 0) <> 0
	AND d.transline_ishide = 0;
#ranah finance
IF qqnilaiterbayar > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidparent,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_priceinput),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidparent,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 18 THEN #BAYAR PIUTANG
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_priceinput),
(NULL),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	47,
	h.trans_entrydate,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transparentpayment_id IS NULL
	AND d.transline_ishide = 0;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE FROM financeline
WHERE trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah financeline
DROP TEMPORARY TABLE IF EXISTS financetemp;
CREATE TEMPORARY TABLE financetemp LIKE finance;
INSERT INTO financetemp
SELECT hf.*
FROM finance hf,
	transline d
WHERE hf.trans_id = d.transparentpayment_id
	AND d.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_nomorgiro,
		financeline_girojatem,
		financeline_oleh
	)
SELECT UUID(),
(
		SELECT finance_id
		FROM financetemp
		WHERE trans_id = d.transparentpayment_id
	),
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	transline_description,
	trans_nomorgiro,
	trans_girojatem,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND NOT d.transparentpayment_id IS NULL
	AND d.transline_ishide = 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	47,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	transline_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transparentpayment_id IS NULL
	AND d.transline_ishide = 0;
#ranah gl
IF qqnilaiterbayar > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	CASE
		WHEN (
			SELECT trans_girojatem
			FROM trans
			WHERE trans_id = myid
		) IS NULL THEN h.masteraccount_id
		ELSE (
			SELECT gs.generalsettingsell_bg_id
			FROM generalsettingsell gs,
				trans h
			WHERE gs.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
	END,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	SUM(d.transline_priceinput),
	SUM(d.transline_priceinput) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	CASE
		WHEN (hf.trans_type = 16)
		OR(hf.trans_type = 23)
		OR(hf.trans_type = 38) THEN (
			SELECT generalsettingsell_piutang_id
			FROM generalsettingsell gs,
				trans h
			WHERE gs.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		WHEN (hf.trans_type = 18) THEN (
			SELECT generalsettingsell_unbill_id
			FROM generalsettingsell gs,
				trans h
			WHERE gs.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		WHEN (hf.trans_type = 19) THEN (
			SELECT generalsettingsell_uangmuka_id
			FROM generalsettingsell gs,
				trans h
			WHERE gs.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		ELSE (
			SELECT generalsettingsell_unbill_id
			FROM generalsettingsell gs,
				trans h
			WHERE gs.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
	END,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
	LEFT OUTER JOIN trans hf ON d.transparentpayment_id = hf.trans_id
WHERE h.trans_id = d.trans_id
	AND d.transline_priceinput <> 0
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 19 THEN #UANG MUKA PENJUALAN
#ranah header		
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_priceinput),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE d.*
FROM finance h,
	financeline d
WHERE h.finance_id = d.finance_id
	AND d.trans_id = myid;
UPDATE trans h,
	finance hf
SET hf.finance_originalvalue =(
		SELECT SUM(transline_netvalue + transline_taxvalue)
		FROM transline
		WHERE trans_id = myid
	),
	hf.finance_entrydate = h.trans_entrydate,
	hf.finance_duedate = h.trans_tanggalnotapembelian
WHERE h.trans_id = hf.trans_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT gs.generalsettingsell_uangmuka_id
		FROM generalsettingsell gs,
			trans h
		WHERE gs.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	-1,
	transline_net,
	transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	1,
	transline_net,
	transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 20 THEN #GIRO PIUTANG CAIR
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_priceinput),
(NULL),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT generalsettingsell_bg_id
		FROM generalsettingsell gs,
			trans h
		WHERE gs.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	SUM(d.transline_net),
	SUM(d.transline_netvalue * h.trans_exchangevalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT masteraccount_id
		FROM trans
		WHERE trans_id =(
				SELECT transparent_id
				FROM trans
				WHERE trans_id = myid
			)
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSEIF mytypecode = 23 THEN #SALDO AWAL PIUTANG
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
	h.trans_tanggalnotapembelian,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_net, 0) + COALESCE(d.transline_tax, 0)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE d.*
FROM finance h,
	financeline d
WHERE h.finance_id = d.finance_id
	AND d.trans_id = myid;
UPDATE trans h,
	finance hf
SET hf.finance_originalvalue =(
		SELECT SUM(transline_netvalue + transline_taxvalue)
		FROM transline
		WHERE trans_id = myid
	),
	hf.finance_entrydate = h.trans_entrydate,
	hf.finance_duedate = h.trans_tanggalnotapembelian
WHERE h.trans_id = hf.trans_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_netvalue),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT gs.generalsettingsell_piutang_id
		FROM generalsettingsell gs,
			trans h
		WHERE gs.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	SUM(
		COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
	),
	SUM(
		COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
	) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	transline_net,
	transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_net, 0) <> 0;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 48 THEN #REFUND HUTANG
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_priceinput),
(NULL),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
DROP TEMPORARY TABLE IF EXISTS financetemp;
CREATE TEMPORARY TABLE financetemp LIKE finance;
INSERT INTO financetemp
SELECT hf.*
FROM finance hf,
	transline d
WHERE hf.trans_id = d.transparentpayment_id
	AND d.trans_id = myid;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
(
		SELECT finance_id
		FROM financetemp
		WHERE trans_id = d.transparentpayment_id
	),
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_netvalue),
	transline_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	SUM(d.transline_priceinput),
	SUM(d.transline_priceinput) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	CASE
		WHEN (hf.trans_type = 4)
		OR(hf.trans_type = 11)
		OR(hf.trans_type = 34) THEN (
			SELECT generalsettingpurch_hutang_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		WHEN (hf.trans_type = 6)
		OR(hf.trans_type = 7) THEN (
			SELECT generalsettingpurch_unbill_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		ELSE (
			SELECT generalsettingpurch_unbill_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
	END,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
	LEFT OUTER JOIN trans hf ON d.transparentpayment_id = hf.trans_id
WHERE h.trans_id = d.trans_id
	AND d.transline_priceinput <> 0
	AND d.transline_ishide = 0
	AND h.trans_id = myid;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 49 THEN #REFUND PIUTANG
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_priceinput),
(NULL),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
/*DROP TEMPORARY TABLE IF EXISTS financetemp;CREATE TEMPORARY TABLE financetemp LIKE finance;INSERT INTO financetemp SELECT hf.* FROM finance hf,transline d WHERE hf.trans_id=d.transparentpayment_id AND d.trans_id=myid;
 INSERT INTO financeline(financeline_id,finance_id,trans_id,masterexchange_id,masterbussiness_id,financeline_text,financeline_status,financeline_type,financeline_entrydate,financeline_exchangevalue,financeline_total,financeline_description,financeline_oleh)
 SELECT UUID(),(SELECT finance_id FROM financetemp WHERE trans_id=d.transparentpayment_id),h.trans_id,h.masterexchange_id,h.masterbussiness_id,h.trans_text,h.trans_status,h.trans_type,h.trans_entrydate,h.trans_exchangevalue,SUM(d.transline_netvalue),transline_description,trans_oleh
 FROM trans h,transline d
 WHERE h.trans_id=d.trans_id AND h.trans_id=myid AND d.transline_ishide=1;*/
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	-1,
	ABS(SUM(d.transline_net * d.transline_vector)),
	ABS(
		SUM(d.transline_net * d.transline_vector) * h.trans_exchangevalue
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	CASE
		WHEN (hf.trans_type = 16)
		OR(hf.trans_type = 23)
		OR(hf.trans_type = 38) THEN (
			SELECT generalsettingsell_piutang_id
			FROM generalsettingsell gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		WHEN (hf.trans_type = 6)
		OR(hf.trans_type = 19) THEN (
			SELECT generalsettingsell_unbill_id
			FROM generalsettingsell gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		ELSE (
			SELECT generalsettingsell_unbill_id
			FROM generalsettingsell gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
	END,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
	LEFT OUTER JOIN trans hf ON d.transparentpayment_id = hf.trans_id
WHERE h.trans_id = d.trans_id
	AND d.transline_priceinput <> 0
	AND d.transline_ishide = 0
	AND h.trans_id = myid;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 50 THEN #WRITE OFF HUTANG
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_priceinput),
(NULL),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
DROP TEMPORARY TABLE IF EXISTS financetemp;
CREATE TEMPORARY TABLE financetemp LIKE finance;
INSERT INTO financetemp
SELECT hf.*
FROM finance hf,
	transline d
WHERE hf.trans_id = d.transparentpayment_id
	AND d.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
(
		SELECT finance_id
		FROM financetemp
		WHERE trans_id = d.transparentpayment_id
	),
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	transline_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
#ranah gl
/*INSERT INTO glline(glline_id,gl_id,transline_id,masteraccount_id,masterexchange_id,masterbussiness_id,glline_description,glline_exchangevalue,glline_vector,glline_amount,glline_amountvalue)
 SELECT UUID(),myidgl,d.transline_id,h.masteraccount_id,h.masterexchange_id,h.masterbussiness_id,h.trans_description,h.trans_exchangevalue,d.transline_vector,d.transline_priceinput,d.transline_priceinput*h.trans_exchangevalue
 FROM trans h,transline d
 WHERE h.trans_id=d.trans_id AND h.trans_id=myid AND d.transline_ishide=1;*/
IF (
	SELECT SUM(COALESCE(transline_priceinput, 0))
	FROM transline
	WHERE trans_id = myid
		AND transline_ishide = 1
) > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_priceinput,
	d.transline_priceinput * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	CASE
		WHEN (hf.trans_type = 4)
		OR(hf.trans_type = 11)
		OR(hf.trans_type = 34) THEN (
			SELECT generalsettingpurch_hutang_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		WHEN (hf.trans_type = 6)
		OR(hf.trans_type = 7) THEN (
			SELECT generalsettingpurch_unbill_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		ELSE (
			SELECT generalsettingpurch_unbill_id
			FROM generalsettingpurch gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
	END,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
	LEFT OUTER JOIN trans hf ON d.transparentpayment_id = hf.trans_id
WHERE h.trans_id = d.trans_id
	AND d.transline_priceinput <> 0
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 51 THEN #WRITE OFF PIUTANG
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	SUM(transline_priceinput),
(NULL),
(NULL)
FROM transline
WHERE transline_ishide = 0
	AND trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totalnetvalue);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
DROP TEMPORARY TABLE IF EXISTS financetemp;
CREATE TEMPORARY TABLE financetemp LIKE finance;
INSERT INTO financetemp
SELECT hf.*
FROM finance hf,
	transline d
WHERE hf.trans_id = d.transparentpayment_id
	AND d.trans_id = myid;
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
(
		SELECT finance_id
		FROM financetemp
		WHERE trans_id = d.transparentpayment_id
	),
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	d.transline_netvalue,
	transline_description,
	trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
#ranah gl
IF (
	SELECT SUM(COALESCE(transline_priceinput, 0))
	FROM transline
	WHERE trans_id = myid
		AND transline_ishide = 1
) > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_priceinput,
	d.transline_priceinput * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	CASE
		WHEN (hf.trans_type = 16)
		OR(hf.trans_type = 23)
		OR(hf.trans_type = 38) THEN (
			SELECT generalsettingsell_piutang_id
			FROM generalsettingsell gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		WHEN (hf.trans_type = 6)
		OR(hf.trans_type = 19) THEN (
			SELECT generalsettingsell_unbill_id
			FROM generalsettingsell gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
		ELSE (
			SELECT generalsettingsell_unbill_id
			FROM generalsettingsell gp,
				trans h
			WHERE gp.masterbussiness_id = h.masterbussiness_id
				AND h.trans_id = myid
		)
	END,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
	LEFT OUTER JOIN trans hf ON d.transparentpayment_id = hf.trans_id
WHERE h.trans_id = d.trans_id
	AND d.transline_priceinput <> 0
	AND d.transline_ishide = 0
	AND h.trans_id = myid;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 34 THEN #PEMBELIAN ASSET
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
(
		h.trans_tanggalnotapembelian +(COALESCE(c.masterother_creditperiod, 0) * 86400000)
	),
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h
	LEFT OUTER JOIN masterother c ON h.mastercreditterm_id = c.masterother_id,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE FROM financeline
WHERE trans_id = myid;
UPDATE trans h
	LEFT OUTER JOIN masterother c ON h.mastercreditterm_id = c.masterother_id,
	finance hf
SET hf.finance_originalvalue =(
		SELECT SUM(transline_netvalue + transline_taxvalue)
		FROM transline
		WHERE trans_id = myid
	),
	hf.finance_entrydate = h.trans_entrydate,
	hf.finance_duedate =(
		h.trans_tanggalnotapembelian +(c.masterother_creditperiod * 86400000)
	)
WHERE h.trans_id = hf.trans_id
	AND h.trans_id = myid;
END IF;
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF (
	SELECT SUM(COALESCE(transline_priceinput, 0))
	FROM transline
	WHERE trans_id = myid
		AND transline_ishide = 1
) > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
#ranah gl
IF qqnilaiterbayar > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	COALESCE(d.transline_net, 0) + COALESCE(d.transline_tax, 0),
	COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	h.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue),
(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue)
	) * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masterfixassetcategory_accountmasukan,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	SUM(COALESCE(transline_taxvalue, 0)),
	SUM(COALESCE(transline_taxvalue, 0)) * h.trans_exchangevalue
FROM trans h,
	transline d,
	masterfixasset a,
	masterfixassetcategory c
WHERE h.trans_id = d.trans_id
	AND h.masterfixasset_id = a.masterfixasset_id
	AND a.masterfixassetcategory_id = c.masterfixassetcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masterfixassetcategory_accountasset,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	SUM(COALESCE(transline_netvalue, 0)),
	SUM(COALESCE(transline_netvalue, 0)) * h.trans_exchangevalue
FROM trans h,
	transline d,
	masterfixasset a,
	masterfixassetcategory c
WHERE h.trans_id = d.trans_id
	AND h.masterfixasset_id = a.masterfixasset_id
	AND a.masterfixassetcategory_id = c.masterfixassetcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 38 THEN #PENJUALAN ASSET
SET qqnilaiterbayar =(
		SELECT SUM(COALESCE(transline_priceinput, 0))
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 1
	);
SET qqnilaitotal =(
		SELECT SUM(
				COALESCE(transline_netvalue, 0) + COALESCE(transline_taxvalue, 0)
			)
		FROM transline
		WHERE trans_id = myid
			AND transline_ishide = 0
	);
SET qqNilaiAkumulasiAsset =(
		SELECT SUM(
				COALESCE(masterfixassetsusut_depreciationvalue, 0)
			)
		FROM masterfixassetsusut
		WHERE masterfixasset_id =(
				SELECT masterfixasset_id
				FROM trans
				WHERE trans_id = myid
			)
			AND NOT trans_id IS NULL
			AND masterfixassetsusut_active = 1
	);
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_status,
		gl_type,
		gl_description,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_status,
	trans_type,
	trans_description,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM finance
	WHERE trans_id = myid
) THEN
SET myidfinance =(
		SELECT UUID()
	);
INSERT INTO finance(
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		finance_text,
		finance_type,
		finance_entrydate,
		finance_duedate,
		finance_exchangevalue,
		finance_originalvalue,
		finance_description,
		finance_oleh
	)
SELECT myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_type,
	h.trans_entrydate,
(
		SELECT h.trans_tanggalnotapembelian +(masterother_creditperiod * 86400000)
		FROM trans h,
			masterother c
		WHERE h.mastercreditterm_id = c.masterother_id
			AND H.trans_id = myid
	),
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSE
SET myidfinance =(
		SELECT finance_id
		FROM finance
		WHERE trans_id = myid
	);
DELETE FROM financeline
WHERE trans_id = myid;
END IF;
#ranah finance
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	h.trans_type,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF qqnilaiterbayar > 0 THEN
INSERT INTO financeline(
		financeline_id,
		finance_id,
		trans_id,
		masterexchange_id,
		masterbussiness_id,
		financeline_text,
		financeline_status,
		financeline_type,
		financeline_entrydate,
		financeline_exchangevalue,
		financeline_total,
		financeline_description,
		financeline_oleh
	)
SELECT UUID(),
	myidfinance,
	h.trans_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_text,
	h.trans_status,
	44,
	h.trans_entrydate,
	h.trans_exchangevalue,
	SUM(d.transline_priceinput),
	h.trans_description,
	h.trans_oleh
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
#ranah gl
IF qqnilaiterbayar > 0 THEN IF qqnilaitotal - qqnilaiterbayar > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT gs.generalsettingsell_piutang_id
		FROM generalsettingsell gs,
			trans h
		WHERE gs.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	qqnilaitotal - qqnilaiterbayar,
	qqnilaitotal - qqnilaiterbayar
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	d.transline_priceinput,
	d.transline_priceinput
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 1;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
(
		SELECT gs.generalsettingsell_piutang_id
		FROM generalsettingsell gs,
			trans h
		WHERE gs.masterbussiness_id = h.masterbussiness_id
			AND h.trans_id = myid
	),
	h.masterexchange_id,
	h.masterbussiness_id,
	h.trans_description,
	h.trans_exchangevalue,
	1,
	SUM(
		COALESCE(d.transline_net, 0) + COALESCE(d.transline_tax, 0)
	),
	SUM(
		COALESCE(d.transline_netvalue, 0) + COALESCE(d.transline_taxvalue, 0)
	)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masterfixassetcategory_accountasset,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	a.masterfixasset_perolehanvalue,
	a.masterfixasset_perolehanvalue
FROM trans h,
	transline d,
	masterfixasset a,
	masterfixassetcategory c
WHERE h.trans_id = d.trans_id
	AND h.masterfixasset_id = a.masterfixasset_id
	AND a.masterfixassetcategory_id = c.masterfixassetcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masterfixassetcategory_accountkeluaran,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	d.transline_taxvalue,
	d.transline_taxvalue
FROM trans h,
	transline d,
	masterfixasset a,
	masterfixassetcategory c
WHERE h.trans_id = d.trans_id
	AND h.masterfixasset_id = a.masterfixasset_id
	AND a.masterfixassetcategory_id = c.masterfixassetcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masterfixassetcategory_accountaccumulation,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	qqNilaiAkumulasiAsset,
	qqNilaiAkumulasiAsset
FROM trans h,
	transline d,
	masterfixasset a,
	masterfixassetcategory c
WHERE h.trans_id = d.trans_id
	AND h.masterfixasset_id = a.masterfixasset_id
	AND a.masterfixassetcategory_id = c.masterfixassetcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
IF (
	SELECT d.transline_netvalue - a.masterfixasset_perolehanvalue - qqNilaiAkumulasiAsset
	FROM trans h,
		transline d,
		masterfixasset a,
		masterfixassetcategory c
	WHERE h.trans_id = d.trans_id
		AND h.masterfixasset_id = a.masterfixasset_id
		AND a.masterfixassetcategory_id = c.masterfixassetcategory_id
		AND h.trans_id = myid
		AND d.transline_ishide = 0
) > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masterfixassetcategory_accountkeuntungan,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	d.transline_netvalue - a.masterfixasset_perolehanvalue + qqNilaiAkumulasiAsset,
	d.transline_netvalue - a.masterfixasset_perolehanvalue + qqNilaiAkumulasiAsset
FROM trans h,
	transline d,
	masterfixasset a,
	masterfixassetcategory c
WHERE h.trans_id = d.trans_id
	AND h.masterfixasset_id = a.masterfixasset_id
	AND a.masterfixassetcategory_id = c.masterfixassetcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
ELSE
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masterfixassetcategory_accountkerugian,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	- d.transline_vector,
	d.transline_netvalue - a.masterfixasset_perolehanvalue + qqNilaiAkumulasiAsset,
	d.transline_netvalue - a.masterfixasset_perolehanvalue + qqNilaiAkumulasiAsset
FROM trans h,
	transline d,
	masterfixasset a,
	masterfixassetcategory c
WHERE h.trans_id = d.trans_id
	AND h.masterfixasset_id = a.masterfixasset_id
	AND a.masterfixassetcategory_id = c.masterfixassetcategory_id
	AND h.trans_id = myid
	AND d.transline_ishide = 0;
END IF;
CALL X_HitungHutangPiutang(myid);
ELSEIF mytypecode = 39 THEN #JURNAL UMUM
#ranah header
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_description,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	myid,
	masterbussiness_id,
	trans_text,
	trans_description,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSEIF mytypecode = 40 THEN #REVENUE
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	d.trans_id,
	d.masterbussiness_id,
	SUM(d.transline_netvalue),
	SUM(d.transline_taxvalue),
	dp.totaldp
FROM transline d
	LEFT OUTER JOIN(
		SELECT h.transparent_id,
			SUM(d.transline_priceinput) AS totaldp
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status = "P"
			AND h.trans_type IN (7)
			AND h.transparent_id = myid
			AND d.transline_ishide = 0
		GROUP BY h.transparent_id
	) AS dp ON d.trans_id = dp.transparent_id
WHERE d.transline_ishide = 0
	AND d.trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_description,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_description,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSEIF mytypecode = 41 THEN #EXPENSE
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	d.trans_id,
	d.masterbussiness_id,
	SUM(d.transline_netvalue),
	SUM(d.transline_taxvalue),
	dp.totaldp
FROM transline d
	LEFT OUTER JOIN(
		SELECT h.transparent_id,
			SUM(d.transline_priceinput) AS totaldp
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status = "P"
			AND h.trans_type IN (7)
			AND h.transparent_id = myid
			AND d.transline_ishide = 0
		GROUP BY h.transparent_id
	) AS dp ON d.trans_id = dp.transparent_id
WHERE d.transline_ishide = 0
	AND d.trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_description,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_description,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSEIF mytypecode = 42 THEN #SETORAN DANA
#ranah header
INSERT INTO transattribut
SELECT UUID(),
	d.trans_id,
	d.masterbussiness_id,
	SUM(d.transline_netvalue),
	SUM(d.transline_taxvalue),
	dp.totaldp
FROM transline d
	LEFT OUTER JOIN(
		SELECT h.transparent_id,
			SUM(d.transline_priceinput) AS totaldp
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status = "P"
			AND h.trans_type IN (7)
			AND h.transparent_id = myid
			AND d.transline_ishide = 0
		GROUP BY h.transparent_id
	) AS dp ON d.trans_id = dp.transparent_id
WHERE d.transline_ishide = 0
	AND d.trans_id = myid ON DUPLICATE KEY
UPDATE transattribut_totalnetvalue =
VALUES(transattribut_totalnetvalue),
	transattribut_totaltaxvalue =
VALUES(transattribut_totaltaxvalue),
	transattribut_totaluangmuka =
VALUES(transattribut_totaluangmuka);
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl =(
		SELECT UUID()
	);
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_description,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_description,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
SET myidgl =(
		SELECT gl_id
		FROM gl
		WHERE trans_id = myid
	);
DELETE d.*
FROM gl h,
	glline d
WHERE h.gl_id = d.gl_id
	AND h.trans_id = myid;
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
END IF;
#ranah gl
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	myidgl,
	d.transline_id,
	d.masteraccount_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	h.trans_exchangevalue,
	d.transline_vector,
	d.transline_net,
	d.transline_netvalue * h.trans_exchangevalue
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSEIF (mytypecode = 27)
OR(mytypecode = 30) THEN #ASSEMBLY OR DISSASEBLY		
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl = UUID();
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_description,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_description,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
INSERT INTO glline
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	1,
	d.transline_vector,
	ABS(dh.translinehpp_totalhpp),
	ABS(dh.translinehpp_totalhpp)
FROM trans h,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
ELSE
UPDATE trans h,
	gl hg
SET hg.gl_entrydate = h.trans_entrydate,
	hg.gl_description = h.trans_description,
	hg.gl_oleh = h.trans_oleh
WHERE h.trans_id = hg.trans_id
	AND h.trans_id = myid;
DELETE d.*
FROM trans hh,
	gl h,
	glline d
WHERE hh.trans_id = h.trans_id
	AND h.gl_id = d.gl_id
	AND hh.trans_id = myid;
INSERT INTO glline
SELECT UUID(),
	gh.gl_id,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	1,
	d.transline_vector,
	ABS(dh.translinehpp_totalhpp),
	ABS(dh.translinehpp_totalhpp)
FROM trans h
	LEFT OUTER JOIN gl gh ON h.trans_id = gh.trans_id,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
END IF;
ELSEIF (mytypecode = 24) THEN #koreksi				
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
SET myidgl = UUID();
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_description,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT myidgl,
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_description,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
INSERT INTO glline
SELECT UUID(),
	gh.gl_id,
(NULL),
	h.masteraccount_id,
(NULL),
	h.masterexchange_id,
	h.masterbussiness_id,
(NULL),
	1,
	CASE
		WHEN (
			SELECT SUM(dh.translinehpp_totalhpp)
			FROM transline d
				LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id
			WHERE trans_id = myid
		) > 0 THEN -1
		WHEN (
			SELECT SUM(dh.translinehpp_totalhpp)
			FROM transline d
				LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id
			WHERE trans_id = myid
		) < 0 THEN 1
	END,
	ABS(SUM(dh.translinehpp_totalhpp)),
	ABS(SUM(dh.translinehpp_totalhpp))
FROM trans h
	LEFT OUTER JOIN gl gh ON h.trans_id = gh.trans_id,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
HAVING SUM(dh.translinehpp_totalhpp) <> 0;
INSERT INTO glline
SELECT UUID(),
	myidgl,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	d.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	1,
	d.transline_vector,
	ABS(dh.translinehpp_totalhpp),
	ABS(dh.translinehpp_totalhpp)
FROM trans h,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
ELSE DELETE d.*
FROM trans hh,
	gl h,
	glline d
WHERE hh.trans_id = h.trans_id
	AND h.gl_id = d.gl_id
	AND hh.trans_id = myid;
INSERT INTO glline
SELECT UUID(),
	gh.gl_id,
(NULL),
	h.masteraccount_id,
(NULL),
	h.masterexchange_id,
	h.masterbussiness_id,
(NULL),
	1,
	CASE
		WHEN (
			SELECT SUM(dh.translinehpp_totalhpp)
			FROM transline d
				LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id
			WHERE trans_id = myid
		) > 0 THEN -1
		WHEN (
			SELECT SUM(dh.translinehpp_totalhpp)
			FROM transline d
				LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id
			WHERE trans_id = myid
		) < 0 THEN 1
	END,
	ABS(SUM(dh.translinehpp_totalhpp)),
	ABS(SUM(dh.translinehpp_totalhpp))
FROM trans h
	LEFT OUTER JOIN gl gh ON h.trans_id = gh.trans_id,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
HAVING SUM(dh.translinehpp_totalhpp) <> 0;
INSERT INTO glline
SELECT UUID(),
	gh.gl_id,
	d.transline_id,
	c.masteritemcategory_accountpersediaan,
	i.masteritem_id,
	h.masterexchange_id,
	h.masterbussiness_id,
	d.transline_description,
	1,
	d.transline_vector,
	ABS(dh.translinehpp_totalhpp),
	ABS(dh.translinehpp_totalhpp)
FROM trans h
	LEFT OUTER JOIN gl gh ON h.trans_id = gh.trans_id,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id,
	masteritem i,
	masteritemcategory c
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND h.trans_id = myid;
/*UPDATE trans h,gl hg
 SET hg.gl_entrydate=h.trans_entrydate,hg.gl_description=h.trans_description,hg.gl_oleh=h.trans_oleh
 WHERE h.trans_id=hg.trans_id AND h.trans_id=myid;*/
END IF;
ELSEIF (mytypecode = 35) THEN #penyusutan asset
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_type,
		gl_entrydate,
		gl_status,
		gl_oleh
	)
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_type,
	trans_entrydate,
	trans_status,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
UPDATE trans hh,
	gl h
SET h.gl_entrydate = hh.trans_entrydate,
	h.gl_description = hh.trans_description,
	h.gl_oleh = hh.trans_oleh
WHERE hh.trans_id = h.trans_id
	AND hh.trans_id = myid;
DELETE d.*
FROM trans hh,
	gl h,
	glline d
WHERE hh.trans_id = h.trans_id
	AND h.gl_id = d.gl_id
	AND hh.trans_id = myid;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		masteraccount_id,
		masterbussiness_id,
		glline_vector,
		glline_exchangevalue,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	gh.gl_id,
	d.masteraccount_id,
	d.masterbussiness_id,
	d.transline_vector,
	h.trans_exchangevalue,
	d.transline_net,
	d.transline_netvalue
FROM trans h
	LEFT OUTER JOIN gl gh ON h.trans_id = gh.trans_id,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid;
ELSEIF (mytypecode = 36)
or(mytypecode = 37) THEN #disewakan asset
IF NOT EXISTS(
	SELECT *
	FROM gl
	WHERE trans_id = myid
) THEN
INSERT INTO gl(
		gl_id,
		trans_id,
		masterbussiness_id,
		gl_text,
		gl_description,
		gl_status,
		gl_type,
		gl_entrydate,
		gl_oleh
	)
SELECT UUID(),
	trans_id,
	masterbussiness_id,
	trans_text,
	trans_description,
	trans_status,
	trans_type,
	trans_entrydate,
	trans_oleh
FROM trans
WHERE trans_id = myid;
ELSE
UPDATE trans hh,
	gl h
SET h.gl_entrydate = hh.trans_entrydate,
	h.gl_description = hh.trans_description,
	h.gl_oleh = hh.trans_oleh
WHERE hh.trans_id = h.trans_id
	AND hh.trans_id = myid;
DELETE d.*
FROM trans hh,
	gl h,
	glline d
WHERE hh.trans_id = h.trans_id
	AND h.gl_id = d.gl_id
	AND hh.trans_id = myid;
END IF;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	h.gl_id,
	dd.transline_id,
	dd.masteraccount_id,
	hh.masterexchange_id,
	hh.masterbussiness_id,
	dd.transline_description,
	hh.trans_exchangevalue,
CASE
		WHEN hh.trans_type = 36 THEN 1
		WHEN hh.trans_type = 37 THEN -1
	END,
	dd.transline_priceinput,
	dd.transline_priceinput
FROM trans hh
	LEFT OUTER JOIN gl h ON hh.trans_id = h.trans_id,
	transline dd
WHERE hh.trans_id = dd.trans_id
	AND dd.transline_ishide = 0
	AND hh.trans_id = myid;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	h.gl_id,
	dd.transline_id,
CASE
		WHEN hh.trans_type = 36 THEN c.masterfixassetcategory_accountmasukan
		WHEN hh.trans_type = 37 THEN c.masterfixassetcategory_accountkeluaran
	END,
	hh.masterexchange_id,
	hh.masterbussiness_id,
	dd.transline_description,
	hh.trans_exchangevalue,
CASE
		WHEN hh.trans_type = 36 THEN 1
		WHEN hh.trans_type = 37 THEN -1
	END,
	dd.transline_tax,
	dd.transline_taxvalue
FROM trans hh
	LEFT OUTER JOIN gl h ON hh.trans_id = h.trans_id
	LEFT OUTER JOIN masterfixasset a ON hh.masterfixasset_id = a.masterfixasset_id
	LEFT OUTER JOIN masterfixassetcategory c ON a.masterfixassetcategory_id = c.masterfixassetcategory_id,
	transline dd
WHERE hh.trans_id = dd.trans_id
	AND dd.transline_ishide = 0
	AND hh.trans_id = myid;
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_description,
		glline_exchangevalue,
		glline_vector,
		glline_amount,
		glline_amountvalue
	)
SELECT UUID(),
	h.gl_id,
	dd.transline_id,
	dd.masteraccount_id,
	hh.masterexchange_id,
	hh.masterbussiness_id,
	dd.transline_description,
	hh.trans_exchangevalue,
CASE
		WHEN hh.trans_type = 36 THEN -1
		WHEN hh.trans_type = 37 THEN 1
	END,
	dd.transline_priceinput,
	dd.transline_priceinput
FROM trans hh
	LEFT OUTER JOIN gl h ON hh.trans_id = h.trans_id,
	transline dd
WHERE hh.trans_id = dd.trans_id
	AND dd.transline_ishide = 1
	AND hh.trans_id = myid;
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_FlushData
DELIMITER / / CREATE PROCEDURE `X_FlushData`(IN `myBussinessCode` CHAR(36)) NO SQL BEGIN START TRANSACTION;
DELETE FROM transfaktur
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM masterfixassetsusut
WHERE masterbussiness_id = myBussinessCode;
UPDATE masterfixassetsusut
SET trans_id =(NULL),
	masterfixassetsusut_active = TRUE
WHERE masterbussiness_id = myBussinessCode;
UPDATE masterfixasset
SET masteraccountbeli_id =(NULL),
	masteraccountjual_id =(NULL),
	trans_id =(NULL),
	transjual_id =(NULL),
	masterfixasset_tanggalterjual =(NULL),
	masterfixasset_oleh = "system"
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM transline
WHERE masterbussiness_id = myBussinessCode
	AND NOT translineparent_id IS NULL;
DELETE FROM transline
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM trans
WHERE masterbussiness_id = myBussinessCode
	AND NOT transparent_id IS NULL;
DELETE FROM trans
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM transhistory
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM translinehistory
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM glline
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM gl
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM financeline
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM finance
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM historylog
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM translinehistory
WHERE masterbussiness_id = myBussinessCode;
DELETE FROM transhistory
WHERE masterbussiness_id = myBussinessCode;
COMMIT;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_GetPrice
DELIMITER / / CREATE PROCEDURE `X_GetPrice`(
	IN `myitemcode` CHAR(36),
	IN `mypartnerkategoricode` CHAR(36),
	IN `mystorecode` CHAR(36),
	IN `myqty` DECIMAL(33, 15),
	IN `tanggalutc` BIGINT
) BEGIN
DECLARE qqbusinessid CHAR(36);
DROP TEMPORARY TABLE IF EXISTS `temphargajual`;
CREATE TEMPORARY TABLE temphargajual(
	priceline_mode VARCHAR(255),
	harga DECIMAL(33, 15),
	hargamin DECIMAL(33, 15),
	hargamax DECIMAL(33, 15)
);
SET qqbusinessid =(
		SELECT masterbussiness_id
		FROM masteritem
		WHERE masteritem_id = myitemcode
	);
INSERT INTO temphargajual
SELECT d.priceline_mode,
	CASE
		WHEN d.priceline_mode = 1 THEN d.priceline_valueinput * e.masterother_exchangevalue
		WHEN d.priceline_mode = 2 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				hargadefault.priceline_valueinput - d.priceline_valueinput
			) * e.masterother_exchangevalue
			ELSE hargadefault.priceline_valueinput *(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 3 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput) * e.masterother_exchangevalue
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 4 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 5 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 6 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 7 THEN d.priceline_valueinput * e.masterother_exchangevalue
	END AS harga,
	COALESCE(
		d.priceline_valuemininput * e.masterother_exchangevalue,
		0
	),
	COALESCE(
		d.priceline_valuemaxinput * e.masterother_exchangevalue,
		0
	)
FROM price h,
	priceline d,
	masteritemuom iu,
	masteritem i,
	masterother e,
(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d,
			masterother e,
			masteritemuom iu
		WHERE h.price_id = d.price_id
			AND h.masterexchange_id = e.masterother_id
			AND d.masteritemuom_id = iu.masteritemuom_id
			AND iu.masteritem_id = myitemcode
			AND h.price_default = 1
			AND h.masterbussiness_id = qqbusinessid
			AND iu.masteritemuom_convertionqty = 1
	) AS hargadefault
WHERE h.price_id = d.price_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND iu.masteritem_id = i.masteritem_id
	AND h.masterexchange_id = e.masterother_id
	AND i.masteritem_id = myitemcode
	AND h.price_id NOT IN (
		SELECT price_id
		FROM pricepartnercategory
		WHERE masterbussiness_id = qqbusinessid
	)
	AND h.price_id NOT IN (
		SELECT price_id
		FROM pricestore
		WHERE masterbussiness_id = qqbusinessid
	)
	AND iu.masteritem_id = myitemcode
	AND d.priceline_qty <= myqty
	AND d.priceline_valueinput > 0
	AND h.price_active = 1
HAVING harga IS NOT NULL
ORDER BY harga ASC
LIMIT 1;
INSERT INTO temphargajual
SELECT d.priceline_mode,
	CASE
		WHEN d.priceline_mode = 1 THEN d.priceline_valueinput * e.masterother_exchangevalue
		WHEN d.priceline_mode = 2 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				hargadefault.priceline_valueinput - d.priceline_valueinput
			) * e.masterother_exchangevalue
			ELSE hargadefault.priceline_valueinput *(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 3 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput) * e.masterother_exchangevalue
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 4 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 5 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 6 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 7 THEN d.priceline_valueinput * e.masterother_exchangevalue
	END AS harga,
	COALESCE(
		d.priceline_valuemininput * e.masterother_exchangevalue,
		0
	),
	COALESCE(
		d.priceline_valuemaxinput * e.masterother_exchangevalue,
		0
	)
FROM price h,
	priceline d,
	masteritemuom iu,
	masteritem i,
	masterother e,
(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d,
			masterother e,
			masteritemuom iu
		WHERE h.price_id = d.price_id
			AND h.masterexchange_id = e.masterother_id
			AND d.masteritemuom_id = iu.masteritemuom_id
			AND iu.masteritem_id = myitemcode
			AND h.price_default = 1
			AND h.masterbussiness_id = qqbusinessid
			AND iu.masteritemuom_convertionqty = 1
	) AS hargadefault
WHERE h.price_id = d.price_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND iu.masteritem_id = i.masteritem_id
	AND h.masterexchange_id = e.masterother_id
	AND i.masteritem_id = myitemcode
	AND h.price_id NOT IN (
		SELECT price_id
		FROM pricepartnercategory
		WHERE masterbussiness_id = qqbusinessid
	)
	AND h.price_id NOT IN (
		SELECT price_id
		FROM pricestore
		WHERE masterbussiness_id = qqbusinessid
	)
	AND iu.masteritem_id = myitemcode
	AND d.priceline_qty >= myqty
	AND d.priceline_valueinput > 0
	AND h.price_active = 1
HAVING harga IS NOT NULL
ORDER BY harga ASC
LIMIT 1;
IF EXISTS(
	SELECT d.priceline_valueinput * e.masterother_exchangevalue
	FROM price h,
		priceline d,
		masterother e,
		masteritemuom iu,
		pricestore s
	WHERE h.price_id = d.price_id
		AND h.masterexchange_id = e.masterother_id
		AND d.masteritemuom_id = iu.masteritemuom_id
		AND h.price_id = s.price_id
		AND s.masterstore_id = mystorecode
		AND iu.masteritem_id = myitemcode
		AND d.priceline_qty <= myqty
		AND h.price_active = 1
) THEN #base store pricebook
INSERT INTO temphargajual
SELECT d.priceline_mode,
	CASE
		WHEN d.priceline_mode = 1 THEN d.priceline_valueinput * e.masterother_exchangevalue
		WHEN d.priceline_mode = 2 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				hargadefault.priceline_valueinput - d.priceline_valueinput
			) * e.masterother_exchangevalue
			ELSE (
				hargadefault.priceline_valueinput * e.masterother_exchangevalue
			) *(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 3 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) + d.priceline_valueinput
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) *(1 +(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 4 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 5 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput) * e.masterother_exchangevalue
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) + d.priceline_valueinput
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) /(1 -(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 6 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) + d.priceline_valueinput
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) /(1 -(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 7 THEN d.priceline_valueinput * e.masterother_exchangevalue
	END AS harga,
	COALESCE(
		d.priceline_valuemininput * e.masterother_exchangevalue,
		0
	),
	COALESCE(
		d.priceline_valuemaxinput * e.masterother_exchangevalue,
		0
	)
FROM price h,
	priceline d,
	masterother e,
	masteritemuom iu,
	pricestore s,
(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d,
			masteritemuom iu
		WHERE h.price_id = d.price_id
			AND d.masteritemuom_id = iu.masteritemuom_id
			AND iu.masteritem_id = myitemcode
			AND h.price_default = 1
			AND h.masterbussiness_id = qqbusinessid
			AND iu.masteritemuom_convertionqty = 1
	) AS hargadefault
WHERE h.price_id = d.price_id
	AND h.masterexchange_id = e.masterother_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND h.price_id = s.price_id
	AND s.masterstore_id = mystorecode
	AND iu.masteritem_id = myitemcode
	AND d.priceline_qty <= myqty
	AND d.priceline_valueinput > 0
	AND h.price_active = 1
HAVING harga IS NOT NULL
ORDER BY harga ASC
LIMIT 1;
INSERT INTO temphargajual
SELECT d.priceline_mode,
	CASE
		WHEN d.priceline_mode = 1 THEN d.priceline_valueinput * e.masterother_exchangevalue
		WHEN d.priceline_mode = 2 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				hargadefault.priceline_valueinput - d.priceline_valueinput
			) * e.masterother_exchangevalue
			ELSE (
				hargadefault.priceline_valueinput * e.masterother_exchangevalue
			) *(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 3 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) + d.priceline_valueinput
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) *(1 +(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 4 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 5 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput) * e.masterother_exchangevalue
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) + d.priceline_valueinput
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) /(1 -(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 6 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) + d.priceline_valueinput
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) /(1 -(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 7 THEN d.priceline_valueinput * e.masterother_exchangevalue
	END AS harga,
	COALESCE(
		d.priceline_valuemininput * e.masterother_exchangevalue,
		0
	),
	COALESCE(
		d.priceline_valuemaxinput * e.masterother_exchangevalue,
		0
	)
FROM price h,
	priceline d,
	masterother e,
	masteritemuom iu,
	pricestore s,
(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d,
			masteritemuom iu
		WHERE h.price_id = d.price_id
			AND d.masteritemuom_id = iu.masteritemuom_id
			AND iu.masteritem_id = myitemcode
			AND h.price_default = 1
			AND h.masterbussiness_id = qqbusinessid
			AND iu.masteritemuom_convertionqty = 1
	) AS hargadefault
WHERE h.price_id = d.price_id
	AND h.masterexchange_id = e.masterother_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND h.price_id = s.price_id
	AND s.masterstore_id = mystorecode
	AND iu.masteritem_id = myitemcode
	AND d.priceline_qty >= myqty
	AND d.priceline_valueinput > 0
	AND h.price_active = 1
HAVING harga IS NOT NULL
ORDER BY harga ASC
LIMIT 1;
END IF;
IF EXISTS(
	SELECT d.priceline_valueinput * e.masterother_exchangevalue
	FROM price h,
		priceline d,
		masterother e,
		masteritemuom iu,
		pricepartnercategory p
	WHERE h.price_id = d.price_id
		AND h.masterexchange_id = e.masterother_id
		AND d.masteritemuom_id = iu.masteritemuom_id
		AND h.price_id = p.price_id
		AND p.masterpartnercategory_id = mypartnerkategoricode
		AND iu.masteritem_id = myitemcode
		AND d.priceline_qty <= myqty
		AND h.price_active = 1
) THEN #base partnercategory pricebook
INSERT INTO temphargajual
SELECT d.priceline_mode,
	CASE
		WHEN d.priceline_mode = 1 THEN d.priceline_valueinput * e.masterother_exchangevalue
		WHEN d.priceline_mode = 2 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				hargadefault.priceline_valueinput - d.priceline_valueinput
			) * e.masterother_exchangevalue
			ELSE (
				hargadefault.priceline_valueinput * e.masterother_exchangevalue
			) *(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 3 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput) * e.masterother_exchangevalue
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 4 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) *(1 +(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 5 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 6 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) + d.priceline_valueinput
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) /(1 -(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 7 THEN d.priceline_valueinput * e.masterother_exchangevalue
	END AS harga,
	COALESCE(
		d.priceline_valuemininput * e.masterother_exchangevalue,
		0
	),
	COALESCE(
		d.priceline_valuemaxinput * e.masterother_exchangevalue,
		0
	)
FROM price h,
	priceline d,
	masterother e,
	masteritemuom iu,
	pricepartnercategory p,
(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d,
			masteritemuom iu
		WHERE h.price_id = d.price_id
			AND d.masteritemuom_id = iu.masteritemuom_id
			AND iu.masteritem_id = myitemcode
			AND h.price_default = 1
			AND h.masterbussiness_id = qqbusinessid
			AND iu.masteritemuom_convertionqty = 1
	) AS hargadefault
WHERE h.price_id = d.price_id
	AND h.masterexchange_id = e.masterother_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND h.price_id = p.price_id
	AND p.masterpartnercategory_id = mypartnerkategoricode
	AND iu.masteritem_id = myitemcode
	AND d.priceline_qty <= myqty
	AND d.priceline_valueinput > 0
	AND h.price_active = 1
HAVING harga IS NOT NULL
ORDER BY harga ASC
LIMIT 1;
INSERT INTO temphargajual
SELECT d.priceline_mode,
	CASE
		WHEN d.priceline_mode = 1 THEN d.priceline_valueinput * e.masterother_exchangevalue
		WHEN d.priceline_mode = 2 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				hargadefault.priceline_valueinput - d.priceline_valueinput
			) * e.masterother_exchangevalue
			ELSE (
				hargadefault.priceline_valueinput * e.masterother_exchangevalue
			) *(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 3 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput) * e.masterother_exchangevalue
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 4 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) *(1 +(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 5 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 6 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) + d.priceline_valueinput
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) /(1 -(d.priceline_valueinput / 100))
		END
		WHEN d.priceline_mode = 7 THEN d.priceline_valueinput * e.masterother_exchangevalue
	END AS harga,
	COALESCE(
		d.priceline_valuemininput * e.masterother_exchangevalue,
		0
	),
	COALESCE(
		d.priceline_valuemaxinput * e.masterother_exchangevalue,
		0
	)
FROM price h,
	priceline d,
	masterother e,
	masteritemuom iu,
	pricepartnercategory p,
(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d,
			masteritemuom iu
		WHERE h.price_id = d.price_id
			AND d.masteritemuom_id = iu.masteritemuom_id
			AND iu.masteritem_id = myitemcode
			AND h.price_default = 1
			AND h.masterbussiness_id = qqbusinessid
			AND iu.masteritemuom_convertionqty = 1
	) AS hargadefault
WHERE h.price_id = d.price_id
	AND h.masterexchange_id = e.masterother_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND h.price_id = p.price_id
	AND p.masterpartnercategory_id = mypartnerkategoricode
	AND iu.masteritem_id = myitemcode
	AND d.priceline_qty >= myqty
	AND d.priceline_valueinput > 0
	AND h.price_active = 1
HAVING harga IS NOT NULL
ORDER BY harga ASC
LIMIT 1;
END IF;
IF EXISTS(
	SELECT d.priceline_valueinput * e.masterother_exchangevalue
	FROM price h,
		priceline d,
		masterother e,
		masteritemuom iu
	WHERE h.price_id = d.price_id
		AND h.masterexchange_id = e.masterother_id
		AND d.masteritemuom_id = iu.masteritemuom_id
		AND DATE(FROM_UNIXTIME(h.price_start / 1000)) <= DATE(FROM_UNIXTIME(tanggalutc / 1000))
		AND DATE(FROM_UNIXTIME(h.price_end / 1000)) >= DATE(FROM_UNIXTIME(tanggalutc / 1000))
		AND iu.masteritem_id = myitemcode
		AND d.priceline_qty <= myqty
		AND h.price_active = 1
) THEN #base periode pricebook
INSERT INTO temphargajual
SELECT d.priceline_mode,
	CASE
		WHEN d.priceline_mode = 1 THEN d.priceline_valueinput
		WHEN d.priceline_mode = 2 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				hargadefault.priceline_valueinput - d.priceline_valueinput
			) * e.masterother_exchangevalue
			ELSE (
				hargadefault.priceline_valueinput * e.masterother_exchangevalue
			) *(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 3 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 4 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 5 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 6 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 7 THEN d.priceline_valueinput * e.masterother_exchangevalue
	END AS harga,
	COALESCE(
		d.priceline_valuemininput * e.masterother_exchangevalue,
		0
	),
	COALESCE(
		d.priceline_valuemaxinput * e.masterother_exchangevalue,
		0
	)
FROM price h,
	priceline d,
	masterother e,
	masteritemuom iu,
(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d,
			masteritemuom iu
		WHERE h.price_id = d.price_id
			AND d.masteritemuom_id = iu.masteritemuom_id
			AND iu.masteritem_id = myitemcode
			AND h.price_default = 1
			AND h.masterbussiness_id = qqbusinessid
			AND iu.masteritemuom_convertionqty = 1
	) AS hargadefault
WHERE h.price_id = d.price_id
	AND h.masterexchange_id = e.masterother_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND DATE(FROM_UNIXTIME(h.price_start / 1000)) <= DATE(FROM_UNIXTIME(tanggalutc / 1000))
	AND DATE(FROM_UNIXTIME(h.price_end / 1000)) >= DATE(FROM_UNIXTIME(tanggalutc / 1000))
	AND iu.masteritem_id = myitemcode
	AND d.priceline_qty <= myqty
	AND d.priceline_valueinput > 0
	AND h.price_active = 1
HAVING harga IS NOT NULL
ORDER BY harga ASC
LIMIT 1;
INSERT INTO temphargajual
SELECT d.priceline_mode,
	CASE
		WHEN d.priceline_mode = 1 THEN d.priceline_valueinput
		WHEN d.priceline_mode = 2 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				hargadefault.priceline_valueinput - d.priceline_valueinput
			) * e.masterother_exchangevalue
			ELSE (
				hargadefault.priceline_valueinput * e.masterother_exchangevalue
			) *(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 3 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 4 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) *(
				1 +(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 5 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT (transline_priceinput - transline_discinput)
				FROM v_getlastbeli
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 6 THEN CASE
			WHEN h.price_ispersen = 0 THEN (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) +(
				d.priceline_valueinput * e.masterother_exchangevalue
			)
			ELSE (
				SELECT hpp
				FROM v_gethpp
				WHERE masteritem_id = myitemcode
			) /(
				1 -(
					(
						d.priceline_valueinput * e.masterother_exchangevalue
					) / 100
				)
			)
		END
		WHEN d.priceline_mode = 7 THEN d.priceline_valueinput * e.masterother_exchangevalue
	END AS harga,
	COALESCE(
		d.priceline_valuemininput * e.masterother_exchangevalue,
		0
	),
	COALESCE(
		d.priceline_valuemaxinput * e.masterother_exchangevalue,
		0
	)
FROM price h,
	priceline d,
	masterother e,
	masteritemuom iu,
(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d,
			masteritemuom iu
		WHERE h.price_id = d.price_id
			AND d.masteritemuom_id = iu.masteritemuom_id
			AND iu.masteritem_id = myitemcode
			AND h.price_default = 1
			AND h.masterbussiness_id = qqbusinessid
			AND iu.masteritemuom_convertionqty = 1
	) AS hargadefault
WHERE h.price_id = d.price_id
	AND h.masterexchange_id = e.masterother_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND DATE(FROM_UNIXTIME(h.price_start / 1000)) <= DATE(FROM_UNIXTIME(tanggalutc / 1000))
	AND DATE(FROM_UNIXTIME(h.price_end / 1000)) >= DATE(FROM_UNIXTIME(tanggalutc / 1000))
	AND iu.masteritem_id = myitemcode
	AND d.priceline_qty >= myqty
	AND d.priceline_valueinput > 0
	AND h.price_active = 1
HAVING harga IS NOT NULL
ORDER BY harga ASC
LIMIT 1;
END IF;
SELECT *
FROM temphargajual
ORDER BY harga ASC
LIMIT 1;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_HitungHutangPiutang
DELIMITER / / CREATE PROCEDURE `X_HitungHutangPiutang`(IN `myid` CHAR(36)) BEGIN
UPDATE finance a,
	(
		SELECT d.finance_id,
			SUM(d.financeline_vector * d.financeline_totalvalue) AS jumlah
		FROM finance h,
			financeline d
		WHERE h.finance_id = d.finance_id
			AND d.financeline_status = "P"
			AND h.finance_id IN (
				SELECT finance_id
				FROM financeline
				WHERE trans_id = myid
				GROUP BY finance_id
			)
		GROUP BY d.finance_id
	) AS b
SET a.finance_currentvalue = b.jumlah
WHERE a.finance_id = b.finance_id;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_HitungParentTransLine
DELIMITER / / CREATE PROCEDURE `X_HitungParentTransLine`(IN `myidparent` CHAR(36)) BEGIN
DECLARE ada INT;
DECLARE myid CHAR(36);
IF (
	SELECT trans_type
	FROM trans
	WHERE trans_id = myidparent
) IN (1, 2, 3, 4, 13, 14, 15, 16, 24, 25, 26, 27, 28, 29, 30, 55, 56) THEN DROP TEMPORARY TABLE IF EXISTS tempparent;
CREATE TEMPORARY TABLE tempparent(transline_id CHAR(36));
INSERT INTO tempparent
SELECT d.translineparent_id
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myidparent
	AND NOT d.translineparent_id IS NULL;
DROP TEMPORARY TABLE IF EXISTS tempqtyparent;
CREATE TEMPORARY TABLE tempqtyparent(transline_id CHAR(36), jumlah DECIMAL(33, 15));
INSERT INTO tempqtyparent
SELECT d.translineparent_id,
	SUM(d.transline_qtyinput)
FROM trans h,
	transline d,
	tempparent t
WHERE h.trans_id = d.trans_id
	AND d.translineparent_id = t.transline_id
	AND h.trans_status <> "C"
GROUP BY d.translineparent_id;
IF EXISTS(
	SELECT *
	FROM tempqtyparent
) THEN
UPDATE trans h,
	transline d,
	tempqtyparent t
SET d.transline_qtyrealize = t.jumlah
WHERE h.trans_id = d.trans_id
	AND d.transline_id = t.transline_id;
ELSE
UPDATE trans h,
	transline d,
	tempparent t
SET d.transline_qtyrealize =(NULL)
WHERE h.trans_id = d.trans_id
	AND d.transline_id = t.transline_id;
END IF;
DROP TEMPORARY TABLE IF EXISTS tempakhir;
CREATE TEMPORARY TABLE tempakhir(
	trans_id CHAR(36),
	transline_id CHAR(36),
	qtyinput DECIMAL(33, 15),
	qtyrealize DECIMAL(33, 15),
	qtyadjust DECIMAL(33, 15)
);
INSERT INTO tempakhir
SELECT h.trans_id,
	d.transline_id,
	COALESCE(SUM(d.transline_qtyinput), 0),
	COALESCE(SUM(d.transline_qtyrealize), 0),
	COALESCE(SUM(d.transline_qtyadjust), 0)
FROM trans h,
	transline d,
	tempparent t
WHERE h.trans_id = d.trans_id
	AND d.transline_id = t.transline_id
GROUP BY h.trans_id;
SET ada =(
		SELECT CASE
				WHEN COALESCE(qtyadjust, 0) <> 0 THEN 0
				WHEN (
					COALESCE(qtyinput, 0) > COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0)
				)
				AND (COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0) = 0) THEN 1
				WHEN (
					COALESCE(qtyinput, 0) > COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0)
				)
				AND (COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0) <> 0) THEN 2
				WHEN COALESCE(qtyinput, 0) = COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0) THEN 3
				WHEN (
					COALESCE(qtyinput, 0) < COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0)
				) THEN 4
			END
		FROM tempakhir
	);
SET myid =(
		SELECT trans_id
		FROM tempakhir
		GROUP BY trans_id
	);
IF ada = 1 THEN
UPDATE trans
SET trans_status = "O"
WHERE trans_id = myid;
ELSEIF ada = 2 THEN
UPDATE trans
SET trans_status = "H"
WHERE trans_id = myid;
ELSEIF ada = 3 THEN
UPDATE trans
SET trans_status = "P"
WHERE trans_id = myid;
ELSEIF ada = 4 THEN
UPDATE trans
SET trans_status = "OD"
WHERE trans_id = myid;
END IF;
ELSEIF (
	SELECT trans_type
	FROM trans
	WHERE trans_id = myidparent
) IN (31, 32, 33) THEN DROP TEMPORARY TABLE IF EXISTS tempparent;
CREATE TEMPORARY TABLE tempparent(transline_id CHAR(36));
INSERT INTO tempparent
SELECT d.translineparent_id
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND d.transline_vector = 1
	AND h.trans_id = myidparent
	AND NOT d.translineparent_id IS NULL;
DROP TEMPORARY TABLE IF EXISTS tempqtyparent;
CREATE TEMPORARY TABLE tempqtyparent(transline_id CHAR(36), jumlah DECIMAL(33, 15));
INSERT INTO tempqtyparent
SELECT d.translineparent_id,
	SUM(d.transline_qtyinput)
FROM trans h,
	transline d,
	tempparent t
WHERE h.trans_id = d.trans_id
	AND d.translineparent_id = t.transline_id
	AND d.transline_vector = 1
	AND h.trans_status <> "C"
GROUP BY d.translineparent_id;
IF EXISTS(
	SELECT *
	FROM tempqtyparent
) THEN
UPDATE trans h,
	transline d,
	tempqtyparent t
SET d.transline_qtyrealize = t.jumlah
WHERE h.trans_id = d.trans_id
	AND d.transline_id = t.transline_id
	AND d.transline_vector = 1;
ELSE
UPDATE trans h,
	transline d,
	tempparent t
SET d.transline_qtyrealize =(NULL)
WHERE h.trans_id = d.trans_id
	AND d.transline_id = t.transline_id
	AND d.transline_vector = 1;
END IF;
DROP TEMPORARY TABLE IF EXISTS tempakhir;
CREATE TEMPORARY TABLE tempakhir(
	trans_id CHAR(36),
	transline_id CHAR(36),
	qtyinput DECIMAL(33, 15),
	qtyrealize DECIMAL(33, 15),
	qtyadjust DECIMAL(33, 15)
);
INSERT INTO tempakhir
SELECT h.trans_id,
	d.transline_id,
	COALESCE(SUM(d.transline_qtyinput), 0),
	COALESCE(SUM(d.transline_qtyrealize), 0),
	COALESCE(SUM(d.transline_qtyadjust), 0)
FROM trans h,
	transline d,
	tempparent t
WHERE h.trans_id = d.trans_id
	AND d.transline_id = t.transline_id
	AND d.transline_vector = 1
GROUP BY h.trans_id;
SET ada =(
		SELECT CASE
				WHEN COALESCE(qtyadjust, 0) <> 0 THEN 0
				WHEN (
					COALESCE(qtyinput, 0) > COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0)
				)
				AND (COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0) = 0) THEN 1
				WHEN (
					COALESCE(qtyinput, 0) > COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0)
				)
				AND (COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0) <> 0) THEN 2
				WHEN COALESCE(qtyinput, 0) = COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0) THEN 3
				WHEN (
					COALESCE(qtyinput, 0) < COALESCE(qtyrealize, 0) - COALESCE(qtyadjust, 0)
				) THEN 4
			END
		FROM tempakhir
	);
SET myid =(
		SELECT trans_id
		FROM tempakhir
		GROUP BY trans_id
	);
IF ada = 1 THEN
UPDATE trans
SET trans_status = "O"
WHERE trans_id = myid;
ELSEIF ada = 2 THEN
UPDATE trans
SET trans_status = "H"
WHERE trans_id = myid;
ELSEIF ada = 3 THEN
UPDATE trans
SET trans_status = "P"
WHERE trans_id = myid;
ELSEIF ada = 4 THEN
UPDATE trans
SET trans_status = "OD"
WHERE trans_id = myid;
END IF;
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_Recal
DELIMITER / / CREATE PROCEDURE `X_Recal`(IN `myid` CHAR(36)) BEGIN IF (
	SELECT generalsetting_metodehitung
	FROM generalsetting
	WHERE masterbussiness_id =(
			SELECT masterbussiness_id
			FROM trans
			WHERE trans_id = myid
		)
) = 1 THEN #CALL `X_RecallAVG`(myid);
SET @a = 1;
ELSEIF (
	SELECT generalsetting_metodehitung
	FROM generalsetting
	WHERE masterbussiness_id =(
			SELECT masterbussiness_id
			FROM trans
			WHERE trans_id = myid
		)
) = 2 THEN CALL `X_RecallFIFO`(myid);
ELSEIF (
	SELECT generalsetting_metodehitung
	FROM generalsetting
	WHERE masterbussiness_id =(
			SELECT masterbussiness_id
			FROM trans
			WHERE trans_id = myid
		)
) = 3 THEN CALL `X_RecallFIFO`(myid);
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_RecallFIFO
DELIMITER / / CREATE PROCEDURE `X_RecallFIFO`(IN `myid` CHAR(36)) BEGIN
DECLARE done,
	done02,
	done03 INT DEFAULT FALSE;
DECLARE qqNOAUTOLOGTRANSLINE,
	qqLOGTRANSENTRYNO,
	wwNOAUTOLOGTRANSLINE,
	wwNOAUTOGLTRANSLINE,
	qqITEMCODE,
	rrITEMCODE,
	qqACCOUNTCODE,
	qqGLLINKSTOCK,
	qqGLLINKHPP,
	qqSTORECODE,
	qqPARTNERCODE,
	qqEXCHANGECODE,
	qqmasterbussiness CHAR(36);
DECLARE qqQTYINPUT,
	qqQTY,
	qqQTYLOOP,
	qqDISTRIBUSIVALUELINE,
	qqPRICE,
	qqDISCLINE,
	wwHPP,
	wwQTYVALUASI,
	wwTOTALHPP,
	wwTOTALQTY DECIMAL(33, 15);
DECLARE qqVECTOR,
	qqTRANSTYPECODE SMALLINT;
DECLARE qqENTRYDATE BIGINT;
SET qqmasterbussiness =(
		SELECT masterbussiness_id
		FROM trans
		WHERE trans_id = myid
	);
DROP TEMPORARY TABLE IF EXISTS tempItemValuation;
CREATE TEMPORARY TABLE tempItemValuation(
	valuasi_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	transline_id CHAR(36),
	masteritem_id CHAR(36),
	trans_entrydate DATE,
	trans_type INT,
	valuasi_qtyoriginal DECIMAL(33, 15),
	valuasi_qtycurrent DECIMAL(33, 15),
	valuasi_hpp decimal(33, 15),
	PRIMARY KEY (valuasi_id)
);
INSERT INTO tempItemValuation
SELECT (NULL),
	d.transline_id,
	d.masteritem_id,
	DATE(FROM_UNIXTIME(h.trans_entrydate)),
	h.trans_type,
	d.transline_qty,
	d.transline_qty,
	dh.translinehpp_hpp
FROM trans h,
	transline d,
	translinehpp dh,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.transline_id = dh.transline_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.masterbussiness_id = qqmasterbussiness
	AND h.trans_status = "P"
	AND t.masteritemtype_isstock = 1
	AND d.transline_qty <> 0
	AND h.trans_type IN (4, 12)
ORDER BY d.masteritem_id,
	h.trans_entrydate,
	h.trans_waktu,
	d.transline_nourut;
#UNTUK FIFO
CALL `X_UrutanTrans`(myid);
BLOCK2: BEGIN
DECLARE myCursor02 CURSOR FOR
SELECT d.transline_id,
	h.trans_id,
	h.masterexchange_id,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	h.trans_type,
	d.masteritem_id,
	d.transline_vector,
	d.transline_qtyinput,
	d.transline_qty,
	COALESCE(transline_distribusipersen, 0),
	d.transline_price,
	COALESCE(d.transline_disc, 0) + COALESCE(d.transline_discother, 0),
	c.masteritemcategory_accountpersediaan,
	c.masteritemcategory_accounthpp,
	h.masteraccount_id
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t,
	temprekurfinalakhir xx
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_id = xx.trans_id
	AND t.masteritemtype_isstock = 1
	AND h.trans_status = "P"
	AND h.trans_type IN (27)
	AND d.transline_qty <> 0
	AND h.masterbussiness_id = qqmasterbussiness
ORDER BY xx.qqid,
	d.transline_vector,
	d.transline_nourut;
DECLARE CONTINUE HANDLER FOR NOT FOUND
SET done02 = TRUE;
OPEN myCursor02;
read_loop02 :LOOP FETCH myCursor02 INTO qqNOAUTOLOGTRANSLINE,
qqLOGTRANSENTRYNO,
qqEXCHANGECODE,
qqENTRYDATE,
qqTRANSTYPECODE,
qqITEMCODE,
qqVECTOR,
qqQTYINPUT,
qqQTY,
qqDISTRIBUSIVALUELINE,
qqPRICE,
qqDISCLINE,
qqGLLINKSTOCK,
qqGLLINKHPP,
qqACCOUNTCODE;
IF done02 THEN CLOSE myCursor02;
SET done02 = FALSE;
LEAVE read_loop02;
END IF;
IF qqTRANSTYPECODE = 27 THEN #ASSEMBLY
IF qqVECTOR = -1 THEN
SET qqQTYLOOP = - qqQTY;
SET wwHPP = 0;
SET wwTOTALHPP = 0;
SET wwTOTALQTY = 0;
REPEAT
SET wwNOAUTOLOGTRANSLINE =(
		SELECT transline_id
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
			AND valuasi_qtycurrent > 0
		ORDER BY trans_entrydate
		LIMIT 1
	);
IF TRIM(wwNOAUTOLOGTRANSLINE) <> '' THEN
SET wwQTYVALUASI =(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
IF qqQTYLOOP - wwQTYVALUASI > 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_qtycurrent, 0) * COALESCE(valuasi_hpp, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = qqQTYLOOP - wwQTYVALUASI;
ELSEIF qqQTYLOOP - wwQTYVALUASI < 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) *(
				COALESCE(valuasi_qtycurrent, 0) -(
					COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
				)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0) -(
				COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
ELSEIF qqQTYLOOP - wwQTYVALUASI = 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
END IF;
ELSE
SET wwTOTALQTY = wwTOTALQTY + qqQTYLOOP;
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * qqQTYLOOP
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
SET qqQTYLOOP = 0;
END IF;
UNTIL (qqQTYLOOP = 0)
END REPEAT;
IF COALESCE(wwTOTALHPP, 0) = 0 THEN
SET wwTOTALHPP =(
		SELECT valuasi_hpp * - qqQTY
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
ELSE
SET wwTOTALHPP = COALESCE(
		(COALESCE(wwTOTALHPP, 0) / COALESCE(wwTOTALQTY, 0)),
		0
	) * - qqQTY;
END IF;
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
		COALESCE(- wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
	translinehpp_totalhpp = COALESCE(- wwTOTALHPP, 0);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqEXCHANGECODE,
		qqmasterbussiness,
		-1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
ELSEIF qqVECTOR = 1 THEN
SET wwTOTALHPP =(
		SELECT COALESCE(SUM(- dh.translinehpp_totalhpp), 0)
		FROM transline d,
			translinehpp dh
		WHERE d.transline_id = dh.transline_id
			AND d.trans_id = qqLOGTRANSENTRYNO
			AND d.transline_vector = -1
	);
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0),
		COALESCE(wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0),
	translinehpp_totalhpp = COALESCE(wwTOTALHPP, 0);
INSERT INTO tempItemValuation
VALUES(
		(NULL),
		qqNOAUTOLOGTRANSLINE,
		qqITEMCODE,
		qqENTRYDATE,
		qqTRANSTYPECODE,
		qqQTY,
		qqQTY,
		COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0)
	);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
END IF;
END IF;
END LOOP read_loop02;
END BLOCK2;
#MULAI HITUNG TRANSAKSI BIASA
BLOCK2: BEGIN
DECLARE myCursor02 CURSOR FOR
SELECT d.transline_id,
	h.trans_id,
	h.masterexchange_id,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	h.trans_type,
	d.masteritem_id,
	d.transline_vector,
	d.transline_qtyinput,
	d.transline_qty,
	COALESCE(transline_distribusipersen, 0),
	d.transline_price,
	COALESCE(d.transline_disc, 0) + COALESCE(d.transline_discother, 0),
	c.masteritemcategory_accountpersediaan,
	c.masteritemcategory_accounthpp,
	h.masteraccount_id
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t,
	temprekurfinalakhir xx
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_id = xx.trans_id
	AND t.masteritemtype_isstock = 1
	AND h.trans_status = "P"
	AND h.trans_type IN (5, 16, 17, 24, 27, 30)
	AND d.transline_qty <> 0
ORDER BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	d.transline_vector DESC,
	h.trans_waktu,
	d.transline_nourut;
DECLARE CONTINUE HANDLER FOR NOT FOUND
SET done02 = TRUE;
OPEN myCursor02;
read_loop02 :LOOP FETCH myCursor02 INTO qqNOAUTOLOGTRANSLINE,
qqLOGTRANSENTRYNO,
qqEXCHANGECODE,
qqENTRYDATE,
qqTRANSTYPECODE,
qqITEMCODE,
qqVECTOR,
qqQTYINPUT,
qqQTY,
qqDISTRIBUSIVALUELINE,
qqPRICE,
qqDISCLINE,
qqGLLINKSTOCK,
qqGLLINKHPP,
qqACCOUNTCODE;
IF done02 THEN CLOSE myCursor02;
SET done02 = FALSE;
LEAVE read_loop02;
END IF;
IF qqTRANSTYPECODE = 16 THEN #PENJUALAN
SET qqQTYLOOP = - qqQTY;
SET wwHPP = 0;
SET wwTOTALHPP = 0;
SET wwTOTALQTY = 0;
REPEAT
SET wwNOAUTOLOGTRANSLINE =(
		SELECT transline_id
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
			AND valuasi_qtycurrent > 0
		ORDER BY trans_entrydate
		LIMIT 1
	);
IF TRIM(wwNOAUTOLOGTRANSLINE) <> '' THEN
SET wwQTYVALUASI =(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
IF qqQTYLOOP - wwQTYVALUASI > 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_qtycurrent, 0) * COALESCE(valuasi_hpp, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = qqQTYLOOP - wwQTYVALUASI;
ELSEIF qqQTYLOOP - wwQTYVALUASI <= 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) *(
				COALESCE(valuasi_qtycurrent, 0) -(
					COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
				)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0) -(
				COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
ELSEIF qqQTYLOOP - wwQTYVALUASI = 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
END IF;
ELSE
SET wwTOTALQTY = wwTOTALQTY + qqQTYLOOP;
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * qqQTYLOOP
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
SET qqQTYLOOP = 0;
END IF;
UNTIL (qqQTYLOOP = 0)
END REPEAT;
IF COALESCE(wwTOTALHPP, 0) = 0 THEN
SET wwTOTALHPP =(
		SELECT valuasi_hpp * - qqQTY
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
ELSE
SET wwTOTALHPP = COALESCE(
		(COALESCE(wwTOTALHPP, 0) / COALESCE(wwTOTALQTY, 0)),
		0
	) * - qqQTY;
END IF;
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
		COALESCE(- wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
	translinehpp_totalhpp = COALESCE(- wwTOTALHPP, 0);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		-1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKHPP
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKHPP,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKHPP;
END IF;
ELSEIF qqTRANSTYPECODE = 17 THEN #RETUR PENJUALAN
SET wwTOTALHPP =(
		SELECT COALESCE(dh.translinehpp_hpp, 0) * qqQTY
		FROM transline d,
			translinehpp dh
		WHERE d.transline_id = dh.transline_id
			AND d.transline_id =(
				SELECT translineparent_id
				FROM transline
				WHERE transline_id = qqNOAUTOLOGTRANSLINE
			)
	);
INSERT INTO tempItemValuation
VALUES(
		(NULL),
		qqNOAUTOLOGTRANSLINE,
		qqITEMCODE,
		qqENTRYDATE,
		qqTRANSTYPECODE,
		qqQTY,
		qqQTY,
		COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0)
	);
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0),
		COALESCE(wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0),
	translinehpp_totalhpp = COALESCE(wwTOTALHPP, 0);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKHPP
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKHPP,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		-1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKHPP;
END IF;
ELSEIF qqTRANSTYPECODE = 15 THEN #DELIVERY PENJUALAN
SET qqQTYLOOP = - qqQTY;
SET wwHPP = 0;
SET wwTOTALHPP = 0;
SET wwTOTALQTY = 0;
REPEAT
SET wwNOAUTOLOGTRANSLINE =(
		SELECT transline_id
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
			AND valuasi_qtycurrent > 0
		ORDER BY trans_entrydate
		LIMIT 1
	);
IF TRIM(wwNOAUTOLOGTRANSLINE) <> '' THEN
SET wwQTYVALUASI =(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
IF qqQTYLOOP - wwQTYVALUASI > 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_qtycurrent, 0) * COALESCE(valuasi_hpp, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = qqQTYLOOP - wwQTYVALUASI;
ELSEIF qqQTYLOOP - wwQTYVALUASI < 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) *(
				COALESCE(valuasi_qtycurrent, 0) -(
					COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
				)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0) -(
				COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
ELSEIF qqQTYLOOP - wwQTYVALUASI = 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
END IF;
ELSE
SET wwTOTALQTY = wwTOTALQTY + qqQTYLOOP;
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * qqQTYLOOP
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
SET qqQTYLOOP = 0;
END IF;
UNTIL (qqQTYLOOP = 0)
END REPEAT;
IF COALESCE(wwTOTALHPP, 0) = 0 THEN
SET wwTOTALHPP =(
		SELECT valuasi_hpp * - qqQTY
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
ELSE
SET wwTOTALHPP = COALESCE(
		(COALESCE(wwTOTALHPP, 0) / COALESCE(wwTOTALQTY, 0)),
		0
	) * - qqQTY;
END IF;
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
		COALESCE(- wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
	translinehpp_totalhpp = COALESCE(- wwTOTALHPP, 0);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		-1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKHPP
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKHPP,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKHPP;
END IF;
ELSEIF qqTRANSTYPECODE = 5 THEN #RETUR PEMBELIAN
SET qqQTYLOOP = - qqQTY;
SET wwHPP = 0;
SET wwTOTALHPP = 0;
SET wwTOTALQTY = 0;
REPEAT
SET wwNOAUTOLOGTRANSLINE =(
		SELECT transline_id
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
			AND valuasi_qtycurrent > 0
		ORDER BY trans_entrydate
		LIMIT 1
	);
IF TRIM(wwNOAUTOLOGTRANSLINE) <> '' THEN
SET wwQTYVALUASI =(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
IF qqQTYLOOP - wwQTYVALUASI > 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_qtycurrent, 0) * COALESCE(valuasi_hpp, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = qqQTYLOOP - wwQTYVALUASI;
ELSEIF qqQTYLOOP - wwQTYVALUASI < 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) *(
				COALESCE(valuasi_qtycurrent, 0) -(
					COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
				)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0) -(
				COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
ELSEIF qqQTYLOOP - wwQTYVALUASI = 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
END IF;
ELSE
SET wwTOTALQTY = wwTOTALQTY + qqQTYLOOP;
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * qqQTYLOOP
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
SET qqQTYLOOP = 0;
END IF;
UNTIL (qqQTYLOOP = 0)
END REPEAT;
IF COALESCE(wwTOTALHPP, 0) = 0 THEN
SET wwTOTALHPP =(
		SELECT valuasi_hpp * - qqQTY
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
ELSE
SET wwTOTALHPP = COALESCE(
		(COALESCE(wwTOTALHPP, 0) / COALESCE(wwTOTALQTY, 0)),
		0
	) * - qqQTY;
END IF;
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
		COALESCE(- wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
	translinehpp_totalhpp = COALESCE(- wwTOTALHPP, 0);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		-1,
		COALESCE(wwTOTALHPP, 0)
	);
IF (
	(COALESCE(qqPRICE, 0) - COALESCE(qqDISCLINE, 0)) * qqQTYINPUT
) - COALESCE(wwTOTALHPP, 0) > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
(
			SELECT generalsettingpurch_selisihretur_id
			FROM generalsettingpurch
			WHERE masterbussiness_id = qqmasterbussiness
		),
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		-1,
(
			(COALESCE(qqPRICE, 0) - COALESCE(qqDISCLINE, 0)) * qqQTYINPUT
		) - COALESCE(wwTOTALHPP, 0)
	);
ELSEIF (
	(COALESCE(qqPRICE, 0) - COALESCE(qqDISCLINE, 0)) * qqQTYINPUT
) - COALESCE(wwTOTALHPP, 0) < 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
(
			SELECT generalsettingpurch_selisihretur_id
			FROM generalsettingpurch
			WHERE masterbussiness_id = qqmasterbussiness
		),
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		1,
		COALESCE(wwTOTALHPP, 0) -(
			(COALESCE(qqPRICE, 0) - COALESCE(qqDISCLINE, 0)) * qqQTYINPUT
		)
	);
END IF;
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
IF (
	(COALESCE(qqPRICE, 0) - COALESCE(qqDISCLINE, 0)) * qqQTYINPUT
) - COALESCE(wwTOTALHPP, 0) > 0 THEN
UPDATE glline
SET glline_vector = -1,
	glline_amount =(
		(COALESCE(qqPRICE, 0) - COALESCE(qqDISCLINE, 0)) * qqQTYINPUT
	) - COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id =(
		SELECT generalsettingpurch_selisihretur_id
		FROM generalsettingpurch
		WHERE masterbussiness_id = qqmasterbussiness
	)
	AND masterbussiness_id = qqmasterbussiness;
ELSEIF (
	(COALESCE(qqPRICE, 0) - COALESCE(qqDISCLINE, 0)) * qqQTYINPUT
) - COALESCE(wwTOTALHPP, 0) < 0 THEN
UPDATE glline
SET glline_vector = 1,
	glline_amount = COALESCE(wwTOTALHPP, 0) -(
		(COALESCE(qqPRICE, 0) - COALESCE(qqDISCLINE, 0)) * qqQTYINPUT
	)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id =(
		SELECT generalsettingpurch_selisihretur_id
		FROM generalsettingpurch
		WHERE masterbussiness_id = qqmasterbussiness
	)
	AND masterbussiness_id = qqmasterbussiness;
END IF;
END IF;
ELSEIF qqTRANSTYPECODE = 24 THEN #STOK KOREKSI
IF qqVECTOR = -1 THEN
SET qqQTYLOOP = - qqQTY;
SET wwHPP = 0;
SET wwTOTALHPP = 0;
SET wwTOTALQTY = 0;
REPEAT
SET wwNOAUTOLOGTRANSLINE =(
		SELECT transline_id
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
			AND valuasi_qtycurrent > 0
		ORDER BY trans_entrydate
		LIMIT 1
	);
IF TRIM(wwNOAUTOLOGTRANSLINE) <> '' THEN
SET wwQTYVALUASI =(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
IF qqQTYLOOP - wwQTYVALUASI > 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_qtycurrent, 0) * COALESCE(valuasi_hpp, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = qqQTYLOOP - wwQTYVALUASI;
ELSEIF qqQTYLOOP - wwQTYVALUASI < 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) *(
				COALESCE(valuasi_qtycurrent, 0) -(
					COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
				)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0) -(
				COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
ELSEIF qqQTYLOOP - wwQTYVALUASI = 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
END IF;
ELSE
SET wwTOTALQTY = wwTOTALQTY + qqQTYLOOP;
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * qqQTYLOOP
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
SET qqQTYLOOP = 0;
END IF;
UNTIL (qqQTYLOOP = 0)
END REPEAT;
IF COALESCE(wwTOTALHPP, 0) = 0 THEN
SET wwTOTALHPP =(
		SELECT valuasi_hpp * - qqQTY
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
ELSE
SET wwTOTALHPP = COALESCE(
		(COALESCE(wwTOTALHPP, 0) / COALESCE(wwTOTALQTY, 0)),
		0
	) * - qqQTY;
END IF;
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
		COALESCE(- wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
	translinehpp_totalhpp = COALESCE(- wwTOTALHPP, 0);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masteritem_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqEXCHANGECODE,
		qqITEMCODE,
		qqmasterbussiness,
		-1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
ELSEIF qqVECTOR = 1 THEN
SET wwTOTALHPP =(
		SELECT COALESCE(valuasi_hpp, 0) * qqQTY
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
			AND valuasi_qtycurrent > 0
		LIMIT 1
	);
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0),
		COALESCE(wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0),
	translinehpp_totalhpp = COALESCE(wwTOTALHPP, 0);
INSERT INTO tempItemValuation
VALUES(
		(NULL),
		qqNOAUTOLOGTRANSLINE,
		qqITEMCODE,
		qqENTRYDATE,
		qqTRANSTYPECODE,
		qqQTY,
		qqQTY,
		COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0)
	);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
END IF;
SET wwNOAUTOGLTRANSLINE =(
		SELECT d.glline_id
		FROM gl h,
			glline d
		WHERE h.gl_id = d.gl_id
			AND h.trans_id = qqLOGTRANSENTRYNO
			AND d.masteritem_id IS NULL
			AND d.masteraccount_id = qqACCOUNTCODE
		LIMIT 1
	);
SET wwTOTALHPP =(
		SELECT SUM(COALESCE(dh.translinehpp_totalhpp, 0))
		FROM trans h,
			transline d,
			translinehpp dh
		WHERE h.trans_id = d.trans_id
			AND d.transline_id = dh.transline_id
			AND h.trans_id = qqLOGTRANSENTRYNO
	);
IF TRIM(wwNOAUTOGLTRANSLINE) = '' THEN IF wwTOTALHPP > 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqACCOUNTCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		-1,
		COALESCE(ABS(wwTOTALHPP), 0)
	);
ELSEIF wwTOTALHPP < 0 THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqACCOUNTCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		1,
		COALESCE(ABS(wwTOTALHPP), 0)
	);
END IF;
ELSE IF wwTOTALHPP > 0 THEN
UPDATE glline
SET glline_vector = -1,
	glline_amount = ABS(wwTOTALHPP)
WHERE transline_id = wwNOAUTOGLTRANSLINE;
ELSEIF wwTOTALHPP < 0 THEN
UPDATE glline
SET glline_vector = 1,
	glline_amount = ABS(wwTOTALHPP)
WHERE glline_id = wwNOAUTOGLTRANSLINE;
END IF;
END IF;
/*IF NOT EXISTS(SELECT * FROM gl h,glline d WHERE h.gl_id=d.gl_id AND h.trans_id=myid AND d.masteritem_id IS NULL) THEN
 INSERT INTO glline
 SELECT UUID(),(SELECT gl_id FROM gl WHERE trans_id=qqLOGTRANSENTRYNO),(NULL),h.masteraccount_id,(NULL),h.masterexchange_id,h.masterbussiness_id,h.trans_description,h.trans_exchangevalue,CASE WHEN n.totalhpp>0 then -1 ELSE 1 END,-n.totalhpp,-n.totalhpp
 FROM trans h,(SELECT d.trans_id,SUM(dh.translinehpp_totalhpp) as totalhpp FROM transline d LEFT OUTER JOIN translinehpp dh ON d.transline_id=dh.transline_id WHERE d.trans_id=myid) AS n
 WHERE h.trans_id=n.trans_id AND h.trans_id=myid;
 END IF;*/
ELSEIF qqTRANSTYPECODE = 30 THEN #DISSASEMBLY
IF qqVECTOR = -1 THEN
SET qqQTYLOOP = - qqQTY;
SET wwHPP = 0;
SET wwTOTALHPP = 0;
SET wwTOTALQTY = 0;
REPEAT
SET wwNOAUTOLOGTRANSLINE =(
		SELECT transline_id
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
			AND valuasi_qtycurrent > 0
		ORDER BY trans_entrydate
		LIMIT 1
	);
IF TRIM(wwNOAUTOLOGTRANSLINE) <> '' THEN
SET wwQTYVALUASI =(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
IF qqQTYLOOP - wwQTYVALUASI > 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_qtycurrent, 0) * COALESCE(valuasi_hpp, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = qqQTYLOOP - wwQTYVALUASI;
ELSEIF qqQTYLOOP - wwQTYVALUASI < 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) *(
				COALESCE(valuasi_qtycurrent, 0) -(
					COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
				)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0) -(
				COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
			)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = COALESCE(valuasi_qtycurrent, 0) - COALESCE(qqQTYLOOP, 0)
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
ELSEIF qqQTYLOOP - wwQTYVALUASI = 0 THEN
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
SET wwTOTALQTY = wwTOTALQTY +(
		SELECT COALESCE(valuasi_qtycurrent, 0)
		FROM tempItemValuation
		WHERE transline_id = wwNOAUTOLOGTRANSLINE
	);
UPDATE tempItemValuation
SET valuasi_qtycurrent = 0
WHERE transline_id = wwNOAUTOLOGTRANSLINE;
SET qqQTYLOOP = 0;
END IF;
ELSE
SET wwTOTALQTY = wwTOTALQTY + qqQTYLOOP;
SET wwTOTALHPP = wwTOTALHPP +(
		SELECT COALESCE(valuasi_hpp, 0) * qqQTYLOOP
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
SET qqQTYLOOP = 0;
END IF;
UNTIL (qqQTYLOOP = 0)
END REPEAT;
IF COALESCE(wwTOTALHPP, 0) = 0 THEN
SET wwTOTALHPP =(
		SELECT valuasi_hpp * - qqQTY
		FROM tempItemValuation
		WHERE masteritem_id = qqITEMCODE
		ORDER BY valuasi_id DESC
		LIMIT 1
	);
ELSE
SET wwTOTALHPP = COALESCE(
		(COALESCE(wwTOTALHPP, 0) / COALESCE(wwTOTALQTY, 0)),
		0
	) * - qqQTY;
END IF;
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
		COALESCE(- wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(- qqQTY, 0),
	translinehpp_totalhpp = COALESCE(- wwTOTALHPP, 0);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqEXCHANGECODE,
		qqmasterbussiness,
		-1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
ELSEIF qqVECTOR = 1 THEN
SET wwTOTALHPP =(
		(
			SELECT COALESCE(SUM(- dh.translinehpp_totalhpp), 0)
			FROM transline d,
				translinehpp dh
			WHERE d.transline_id = dh.transline_id
				AND d.trans_id = qqLOGTRANSENTRYNO
				AND d.transline_vector = -1
		) +(
			SELECT COALESCE(- SUM(d.transline_netvalue), 0)
			FROM transline d,
				translinehpp dh
			WHERE d.transline_id = dh.transline_id
				AND d.trans_id = qqLOGTRANSENTRYNO
				AND NOT d.masteraccount_id IS NULL
				AND d.masteritem_id IS NULL
		)
	) * qqDISTRIBUSIVALUELINE / 100;
SET wwHPP = COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0);
INSERT INTO translinehpp(
		translinehpp_id,
		transline_id,
		masterbussiness_id,
		translinehpp_hpp,
		translinehpp_totalhpp
	)
VALUES(
		UUID(),
		qqNOAUTOLOGTRANSLINE,
		qqmasterbussiness,
		COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0),
		COALESCE(wwTOTALHPP, 0)
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0),
	translinehpp_totalhpp = COALESCE(wwTOTALHPP, 0);
INSERT INTO tempItemValuation
VALUES(
		(NULL),
		qqNOAUTOLOGTRANSLINE,
		qqITEMCODE,
		qqENTRYDATE,
		qqTRANSTYPECODE,
		COALESCE(qqQTY, 0),
		COALESCE(qqQTY, 0),
		COALESCE(wwTOTALHPP, 0) / COALESCE(qqQTY, 0)
	);
IF NOT EXISTS(
	SELECT *
	FROM glline
	WHERE transline_id = qqNOAUTOLOGTRANSLINE
		AND masteraccount_id = qqGLLINKSTOCK
) THEN
INSERT INTO glline(
		glline_id,
		gl_id,
		transline_id,
		masteraccount_id,
		masteritem_id,
		masterexchange_id,
		masterbussiness_id,
		glline_vector,
		glline_amount
	)
VALUES(
		UUID(),
(
			SELECT gl_id
			FROM gl
			WHERE trans_id = qqLOGTRANSENTRYNO
		),
		qqNOAUTOLOGTRANSLINE,
		qqGLLINKSTOCK,
		qqITEMCODE,
		qqEXCHANGECODE,
		qqmasterbussiness,
		1,
		COALESCE(wwTOTALHPP, 0)
	);
ELSE
UPDATE glline
SET glline_amount = COALESCE(wwTOTALHPP, 0)
WHERE transline_id = qqNOAUTOLOGTRANSLINE
	AND masteraccount_id = qqGLLINKSTOCK;
END IF;
END IF;
END IF;
END LOOP read_loop02;
END BLOCK2;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_SetFaktur
DELIMITER / / CREATE PROCEDURE `X_SetFaktur`(IN `myid` CHAR(36)) BEGIN
DECLARE mytgl BIGINT;
DECLARE mybisnis CHAR(36);
DECLARE myMsg TEXT;
SET mytgl =(
		SELECT trans_entrydate
		FROM trans
		WHERE trans_id = myid
	);
SET mybisnis =(
		SELECT masterbussiness_id
		FROM trans
		WHERE trans_id = myid
	);
SET myMsg = '';
IF (
	(
		SELECT SUM(transline_tax)
		FROM transline
		WHERE trans_id = myid
	) > 0
)
AND EXISTS(
	SELECT p.masterpartnerpajak_id
	FROM trans h,
		masterpartnerpajak p
	WHERE h.masterpartner_id = p.masterpartner_id
		AND h.trans_id = myid
) THEN IF EXISTS(
	SELECT d.transfakturline_id
	FROM transfaktur h,
		transfakturline d
	WHERE h.transfaktur_id = d.transfaktur_id
		AND DATE(
			FROM_UNIXTIME(h.transfaktur_entrydateend DIV 1000)
		) >= DATE(FROM_UNIXTIME(mytgl DIV 1000))
		AND DATE(
			FROM_UNIXTIME(h.transfaktur_entrydatestart DIV 1000)
		) <= DATE(FROM_UNIXTIME(mytgl DIV 1000))
		AND h.masterbussiness_id =(
			SELECT masterbussiness_id
			FROM trans
			WHERE trans_id = myid
		)
		AND d.transfakturline_id NOT IN (
			SELECT xd.transfakturline_id
			FROM transfakturline xd,
				trans xh
			WHERE xd.transfakturline_id = xh.transfakturline_id
				AND xh.masterbussiness_id =(
					SELECT masterbussiness_id
					FROM trans
					WHERE trans_id = myid
				)
		)
	ORDER BY d.transfakturline_nomor
) THEN
UPDATE trans
SET transfakturline_id =(
		SELECT `Y_GetFaktur`(mytgl, mybisnis)
	)
WHERE trans_id = myid;
ELSE
SET myMsg = CONCAT(
		'NOMOR: ',
(
			SELECT trans_text
			FROM trans
			WHERE trans_id = myid
		),
		' DENGAN TANGGAL: ',
		DATE(FROM_UNIXTIME(mytgl DIV 1000)),
		' NOMOR SERI FAKTUR HABIS DIPAKAI',
		CHAR(10 using UTF8)
	);
ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
ELSE IF (
	(
		SELECT COALESCE(SUM(transline_tax), 0)
		FROM transline
		WHERE trans_id = myid
	) = 0
) THEN
SET myMsg = CONCAT(
		'NOMOR: ',
(
			SELECT trans_text
			FROM trans
			WHERE trans_id = myid
		),
		' TIDAK TERDAPAT PPN',
		CHAR(10 using UTF8)
	);
END IF;
IF NOT EXISTS(
	SELECT p.masterpartnerpajak_id
	FROM trans h,
		masterpartnerpajak p
	WHERE h.masterpartner_id = p.masterpartner_id
		AND h.trans_id = myid
) THEN
SET myMsg = CONCAT(
		myMsg,
		'PARTNER: ',
(
			SELECT p.masterpartner_alias
			FROM trans h,
				masterpartner p
			WHERE h.masterpartner_id = p.masterpartner_id
				AND h.trans_id = myid
		),
		' BELUM MEMILIKI DATA PERPAJAKAN',
		CHAR(10 using UTF8)
	);
END IF;
ROLLBACK;
SIGNAL SQLSTATE '22012'
SET MESSAGE_TEXT = myMsg;
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_SetMasterItemPrice
DELIMITER / / CREATE PROCEDURE `X_SetMasterItemPrice`(
	IN `qqmode` TINYINT,
	IN `qqkode` CHAR(36),
	IN `qqbussiness` CHAR(36)
) BEGIN IF qqmode = 0 THEN #dari masteritem --> priceline
UPDATE masteritemuom
SET masteruom_id =(
		SELECT masteruom_id
		FROM masteritem
		WHERE masteritem_id = qqkode
	),
	masteritemuom_barcode =(
		SELECT masteritem_barcode
		FROM masteritem
		WHERE masteritem_id = qqkode
	)
WHERE masteritem_id = qqkode
	AND masteritemuom_convertionqty = 1;
UPDATE price h,
	priceline d,
	masteritemuom iu
SET d.priceline_valueinput =(
		SELECT masteritem_priceinputdefault
		FROM masteritem
		WHERE masteritem_id = qqkode
	)
WHERE h.price_id = d.price_id
	AND d.masteritemuom_id = iu.masteritemuom_id
	AND iu.masteritem_id = qqkode
	AND iu.masteritemuom_convertionqty = 1
	AND h.price_default = 1
	AND h.masterbussiness_id = qqbussiness;
ELSEIF qqmode = 1 THEN #dari priceline --> masteritem		
UPDATE masteritem i
SET i.masteritem_priceinputdefault =(
		SELECT d.priceline_valueinput
		FROM price h,
			priceline d
		WHERE h.price_id = d.price_id
			AND d.masteritemuom_id = qqkode
			AND h.masterbussiness_id = qqbussiness
			AND h.price_default = 1
	)
WHERE i.masteritem_id =(
		SELECT iu.masteritem_id
		FROM masteritemuom iu,
			priceline d,
			price h
		WHERE iu.masteritemuom_id = d.masteritemuom_id
			AND d.price_id = h.price_id
			AND iu.masteritemuom_id = qqkode
			AND iu.masterbussiness_id = qqbussiness
			AND h.price_default = 1
	);
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_ShowKomisi
DELIMITER / / CREATE PROCEDURE `X_ShowKomisi`(
	IN `periodeawal` BIGINT,
	IN `periodeakhir` BIGINT,
	IN `bisnis` CHAR(36)
) BEGIN DROP TEMPORARY TABLE IF EXISTS `tempkomisi`;
CREATE TEMPORARY TABLE tempkomisi(
	trans_id CHAR(36),
	transline_id CHAR(36),
	masterpartner_id CHAR(36),
	masterpartnerstaff_id CHAR(36),
	masteritem_id CHAR(36),
	masteritemuom_id CHAR(36),
	trans_text VARCHAR(255),
	trans_entrydate DATE,
	transline_qtyinput DECIMAL(33, 15),
	transline_qty DECIMAL(33, 15),
	transline_price DECIMAL(33, 15),
	transline_netvalue DECIMAL(33, 15),
	transline_hpp DECIMAL(33, 15)
);
DROP TEMPORARY TABLE IF EXISTS `tempkomisidua`;
CREATE TEMPORARY TABLE tempkomisidua(
	trans_id CHAR(36),
	transline_id CHAR(36),
	masterpartner_id CHAR(36),
	masterpartnerstaff_id CHAR(36),
	masteritem_id CHAR(36),
	masteritemuom_id CHAR(36),
	trans_text VARCHAR(255),
	trans_entrydate DATE,
	transline_qtyinput DECIMAL(33, 15),
	transline_qty DECIMAL(33, 15),
	transline_price DECIMAL(33, 15),
	transline_netvalue DECIMAL(33, 15),
	transline_hpp DECIMAL(33, 15),
	komisi_id CHAR(36),
	masterbussiness_id CHAR(36),
	komisi_description VARCHAR(255),
	komisi_startdate DATE,
	komisi_enddate DATE,
	komisi_typesales VARCHAR(255),
	komisi_itemtype VARCHAR(255),
	komisi_typecustomer VARCHAR(255),
	komisi_ispersentase TINYINT,
	komisi_ketentuan VARCHAR(255),
	komisi_usiapelanggan INT,
	komisi_usiaform VARCHAR(255)
);
DROP TEMPORARY TABLE IF EXISTS `tempkomisitiga`;
CREATE TEMPORARY TABLE tempkomisitiga(
	trans_id CHAR(36),
	transline_id CHAR(36),
	masterpartner_id CHAR(36),
	masterpartnerstaff_id CHAR(36),
	masteritem_id CHAR(36),
	masteritemuom_id CHAR(36),
	trans_text VARCHAR(255),
	trans_entrydate DATE,
	transline_qtyinput DECIMAL(33, 15),
	transline_qty DECIMAL(33, 15),
	transline_price DECIMAL(33, 15),
	transline_netvalue DECIMAL(33, 15),
	transline_hpp DECIMAL(33, 15),
	komisi_id CHAR(36),
	masterbussiness_id CHAR(36),
	komisi_description VARCHAR(255),
	komisi_startdate DATE,
	komisi_enddate DATE,
	komisi_typesales VARCHAR(255),
	komisi_itemtype VARCHAR(255),
	komisi_typecustomer VARCHAR(255),
	komisi_ispersentase TINYINT,
	komisi_ketentuan VARCHAR(255),
	komisi_usiapelanggan INT,
	komisi_usiaform VARCHAR(255),
	komisi_issalestype TINYINT,
	komisi_isitemtype TINYINT,
	komisi_iscustomertype TINYINT
);
DROP TEMPORARY TABLE IF EXISTS `tempkomisiempat`;
CREATE TEMPORARY TABLE tempkomisiempat(
	trans_id CHAR(36),
	transline_id CHAR(36),
	masterpartner_id CHAR(36),
	masterpartnerstaff_id CHAR(36),
	masteritem_id CHAR(36),
	masteritemuom_id CHAR(36),
	trans_text VARCHAR(255),
	trans_entrydate DATE,
	transline_qtyinput DECIMAL(33, 15),
	transline_qty DECIMAL(33, 15),
	transline_price DECIMAL(33, 15),
	transline_netvalue DECIMAL(33, 15),
	transline_hpp DECIMAL(33, 15),
	komisi_id CHAR(36),
	masterbussiness_id CHAR(36),
	komisi_description VARCHAR(255),
	komisi_startdate DATE,
	komisi_enddate DATE,
	komisi_typesales VARCHAR(255),
	komisi_itemtype VARCHAR(255),
	komisi_typecustomer VARCHAR(255),
	komisi_ispersentase TINYINT,
	komisi_ketentuan VARCHAR(255),
	komisi_usiapelanggan INT,
	komisi_usiaform VARCHAR(255),
	komisi_issalestype TINYINT,
	komisi_isitemtype TINYINT,
	komisi_iscustomertype TINYINT,
	nilaikomisi DECIMAL(33, 15)
);
INSERT INTO tempkomisi
SELECT h.trans_id,
	d.transline_id,
	h.masterpartner_id,
	h.masterpartnerstaff_id,
	d.masteritem_id,
	d.masteritemuom_id,
	h.trans_text,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	d.transline_qtyinput,
	d.transline_qty * d.transline_vector,
	d.transline_price,
	d.transline_netvalue,
	COALESCE(dh.translinehpp_totalhpp, 0)
FROM trans h,
	transline d
	LEFT OUTER JOIN translinehpp dh ON d.transline_id = dh.transline_id
WHERE h.trans_id = d.trans_id
	AND h.trans_type IN (16)
	AND h.trans_status = "P"
	AND d.transline_ishide = 0
	AND h.masterbussiness_id = bisnis
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(periodeawal DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(periodeakhir DIV 1000))
ORDER BY h.trans_entrydate,
	h.trans_text;
INSERT INTO tempkomisidua
SELECT t.*,
	h.komisi_id,
	h.masterbussiness_id,
	h.komisi_description,
	DATE(FROM_UNIXTIME(h.komisi_startdate DIV 1000)),
	DATE(FROM_UNIXTIME(h.komisi_enddate DIV 1000)),
	h.komisi_typesales,
	h.komisi_typeitem,
	h.komisi_typecustomer,
	h.komisi_ispersentase,
	h.komisi_ketentuan,
	h.komisi_usiapelanggan,
	h.komisi_usiafrom
FROM tempkomisi t,
	komisi h
WHERE h.masterbussiness_id = bisnis
ORDER BY h.komisi_description,
	t.trans_text;
DELETE FROM tempkomisidua
WHERE komisi_startdate >= trans_entrydate;
INSERT INTO tempkomisitiga
SELECT qq.*,
	CASE
		WHEN qq.komisi_typesales = 'Semua' THEN 1
		WHEN EXISTS(
			SELECT *
			FROM komisisales
			WHERE komisi_id = qq.komisi_id
				AND qq.masterpartnerstaff_id = mastersales_id
		) THEN 1
		ELSE 0
	END AS komisi_issalestype,
	CASE
		WHEN qq.komisi_itemtype = 'Semua' THEN 1
		WHEN EXISTS(
			SELECT *
			FROM komisisyarat
			WHERE komisi_id = qq.komisi_id
				AND qq.masteritem_id = masteritem_id
		) THEN 1
		ELSE 0
	END AS komisi_isitemtype,
	CASE
		WHEN qq.komisi_typecustomer = 'Semua' THEN 1
		WHEN EXISTS(
			SELECT *
			FROM komisicustomer
			WHERE komisi_id = qq.komisi_id
				AND qq.masterpartner_id = mastercustomer_id
		) THEN 1
		ELSE 0
	END AS komisi_iscustomertype
FROM tempkomisidua AS qq;
DELETE FROM tempkomisitiga
WHERE (komisi_issalestype = 0)
	OR(komisi_isitemtype = 0)
	OR(komisi_iscustomertype = 0);
DROP TEMPORARY TABLE IF EXISTS `tempkomisitigacopy`;
CREATE TEMPORARY TABLE tempkomisitigacopy AS
SELECT *
FROM tempkomisitiga;
INSERT INTO tempkomisiempat
SELECT *,
(NULL)
FROM tempkomisitiga;
UPDATE tempkomisiempat qq
SET qq.nilaikomisi = CASE
		WHEN komisi_ketentuan = 'PerFaktur' THEN (
			SELECT COALESCE(komisiline_komisiinput, 0)
			FROM komisiline
			WHERE komisi_id = qq.komisi_id
				AND komisiline_valueinput <= qq.transline_netvalue
			ORDER BY komisiline_valueinput DESC
			LIMIT 1
		)
		WHEN komisi_ketentuan = 'PerQty' THEN (
			SELECT COALESCE(komisiline_komisiinput, 0)
			FROM komisiline
			WHERE komisi_id = qq.komisi_id
				AND komisiline_valueinput <= qq.transline_qty
			ORDER BY komisiline_valueinput DESC
			LIMIT 1
		)
		WHEN komisi_ketentuan = 'NilaiPenjualan' THEN (
			SELECT COALESCE(komisiline_komisiinput, 0)
			FROM komisiline
			WHERE komisi_id = qq.komisi_id
				AND komisiline_valueinput <= qq.transline_netvalue
			ORDER BY komisiline_valueinput DESC
			LIMIT 1
		)
		WHEN komisi_ketentuan = 'LabaKotor' THEN (
			SELECT COALESCE(komisiline_komisiinput, 0)
			FROM komisiline
			WHERE komisi_id = qq.komisi_id
				AND komisiline_valueinput <=(qq.transline_netvalue + qq.transline_hpp)
			ORDER BY komisiline_valueinput DESC
			LIMIT 1
		)
	END;
SELECT UUID() AS id,
	a.trans_id,
	a.transline_id,
	a.masterpartner_id,
	a.masterpartnerstaff_id,
	a.masteritem_id,
	a.masteritemuom_id,
	a.trans_text,
	p.masterpartner_alias AS namapelanggan,
	ps.masterpartner_alias AS namastaff,
	i.masteritem_alias,
	i.masteritem_description,
	u.masterother_description,
	a.trans_entrydate,
	a.transline_qtyinput,
	a.transline_qty,
	a.transline_price,
	a.transline_netvalue,
	a.transline_hpp,
	a.komisi_id,
	a.masterbussiness_id,
	a.komisi_description,
	a.komisi_startdate,
	a.komisi_enddate,
	a.komisi_typesales,
	a.komisi_itemtype,
	a.komisi_typecustomer,
	a.komisi_ispersentase,
	a.komisi_ketentuan,
	a.komisi_usiapelanggan,
	a.komisi_usiaform,
	a.komisi_issalestype,
	a.komisi_isitemtype,
	a.komisi_iscustomertype,
	a.nilaikomisi,
	CASE
		WHEN a.komisi_ketentuan = 'PerFaktur' THEN a.nilaikomisi
		WHEN a.komisi_ketentuan = 'PerQty' THEN a.nilaikomisi * a.transline_qty
		WHEN a.komisi_ketentuan = 'NilaiPenjualan' THEN a.nilaikomisi * a.transline_netvalue / 100
		WHEN a.komisi_ketentuan = 'LabaKotor' THEN a.nilaikomisi *(a.transline_netvalue + a.transline_hpp) / 100
	END AS nilai_akhir_komisi
FROM tempkomisiempat a
	LEFT OUTER JOIN masteritem i ON a.masteritem_id = i.masteritem_id
	LEFT OUTER JOIN masteritemuom iu ON a.masteritemuom_id = iu.masteritemuom_id
	LEFT OUTER JOIN masterother u ON iu.masteruom_id = u.masterother_id
	LEFT OUTER JOIN masterpartner p ON a.masterpartner_id = p.masterpartner_id
	LEFT OUTER JOIN masterpartner ps ON a.masterpartnerstaff_id = ps.masterpartner_id
WHERE a.nilaikomisi IS NOT NULL
ORDER BY a.komisi_id,
	a.masterpartnerstaff_id,
	a.trans_id,
	a.transline_id;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_TutupTransaksi
DELIMITER / / CREATE PROCEDURE `X_TutupTransaksi`(IN `myid` CHAR(36)) BEGIN
UPDATE trans h,
	transline d
SET h.trans_status = "CT",
	d.transline_qtyadjust = COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0)
WHERE h.trans_id = d.trans_id
	AND h.trans_id = myid
	AND COALESCE(d.transline_qtyinput, 0) > COALESCE(d.transline_qtyrealize, 0) + COALESCE(d.transline_qtyadjust, 0);
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_updategeneralsettingafterinsert
DELIMITER / / CREATE PROCEDURE `X_updategeneralsettingafterinsert`(IN `qqidbussiness` CHAR(36)) BEGIN
DECLARE qqgeneralsetting_id CHAR(36);
SET qqgeneralsetting_id =(
		SELECT generalsetting_id
		FROM generalsetting
		WHERE masterbussiness_id = qqidbussiness
	);
INSERT INTO generalsettingcek(
		generalsettingcek_id,
		generalsetting_id,
		masterbussiness_id
	)
VALUES(UUID(), qqgeneralsetting_id, qqidbussiness);
INSERT INTO generalsettingdefault(
		generalsettingdefault_id,
		generalsetting_id,
		masterbussiness_id
	)
VALUES(UUID(), qqgeneralsetting_id, qqidbussiness);
UPDATE generalsettingdefault
SET generalsettingdefault_masteruom_id =(
		SELECT masterother_id
		FROM masterother
		WHERE masterother_type IN (7)
			AND masterother_description = 'PCS'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_mastertax_id =(
		SELECT masterother_id
		FROM masterother
		WHERE masterother_type IN (8)
			AND masterother_description = 'NON PPN'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_masteritemcategory_id =(NULL),
	generalsettingdefault_mastercreditterm_id =(
		SELECT masterother_id
		FROM masterother
		WHERE masterother_type IN (6)
			AND masterother_description = 'Cash'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_exchangecode_id =(
		SELECT COALESCE(masterother_id,(NULL))
		FROM masterother
		WHERE masterother_type IN (9)
			AND masterother_exchangevalue = 1
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_saldolababerjalan_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '39900'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_saldolabaditahan_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '32000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_persediaan_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '14000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_hpp_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '51000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_penjualan_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '41000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_returpenjualan_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '42000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_discpenjualan_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '43000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_vatmasuk_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '15400'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_vatkeluar_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '23100'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_asset_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '16300'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_assetexpense_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '64002'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_assetakumulasi_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '67300'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_assetkeuntungan_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '79900'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_assetkerugian_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '79900'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_assetperawatan_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '64002'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_assetppnmasuk_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '15400'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingdefault_assetppnkeluar_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '23100'
			AND masterbussiness_id = qqidbussiness
	)
WHERE masterbussiness_id = qqidbussiness;
INSERT INTO generalsettingpurch(
		generalsettingpurch_id,
		generalsetting_id,
		masterbussiness_id
	)
VALUES(UUID(), qqgeneralsetting_id, qqidbussiness);
UPDATE generalsettingpurch
SET generalsettingpurch_hutang_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '21000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingpurch_unbill_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '21001'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingpurch_uangmuka_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '15100'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingpurch_uangmukaorder_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '15100'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingpurch_bg_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '21100'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingpurch_selisihretur_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '74000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingpurch_ppn_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '15400'
			AND masterbussiness_id = qqidbussiness
	)
WHERE masterbussiness_id = qqidbussiness;
INSERT INTO generalsettingsell(
		generalsettingsell_id,
		generalsetting_id,
		masterbussiness_id
	)
VALUES(UUID(), qqgeneralsetting_id, qqidbussiness);
UPDATE generalsettingsell
SET generalsettingsell_piutang_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '13000'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingsell_unbill_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '13001'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingsell_unbillrevenue_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '41001'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingsell_uangmuka_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '22100'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingsell_uangmukaorder_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '22100'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingsell_bg_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '13100'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingsell_ppn_id =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '23100'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingsell_defaultmasterpartner_id =(NULL),
	generalsettingsell_cardcharges =(
		SELECT COALESCE(masteraccount_id,(NULL))
		FROM masteraccount
		WHERE masteraccount_description = '24999'
			AND masterbussiness_id = qqidbussiness
	),
	generalsettingsell_selisihretur_id =(NULL)
WHERE masterbussiness_id = qqidbussiness;
INSERT INTO masteritemcategory
VALUES(
		UUID(),
(
			SELECT masteritemtype_id
			FROM masteritemtype
			WHERE masteritemtype_description = 'SERVICES'
				AND masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_persediaan_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_hpp_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_penjualan_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_returpenjualan_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_discpenjualan_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_vatmasuk_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_vatkeluar_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'WebApp'
		),
		qqidbussiness,
		'UMUM',
		1,
		'system'
	);
INSERT INTO masteritem
VALUES(
		UUID(),
(NULL),
(
			SELECT masteritemcategory_id
			FROM masteritemcategory
			WHERE masteritemcategory_description = 'UMUM'
				AND masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_mastertax_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(
			SELECT generalsettingdefault_masteruom_id
			FROM generalsettingdefault
			WHERE masterbussiness_id = qqidbussiness
		),
(NULL),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'WebApp'
		),
		qqidbussiness,
		'S000001',
		'Sales',
(NULL),
(NULL),
(NULL),
(NULL),
		'N',
		0,
		'N',
(NULL),
(NULL),
(NULL),
(NULL),
		0,
		1,
		'system'
	);
UPDATE masterbussiness
SET masterbussiness_endbilling =(UNIX_TIMESTAMP() +(86400 * 30)) * 1000
WHERE masterbussiness_id = qqidbussiness;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_UrutanTrans
DELIMITER / / CREATE PROCEDURE `X_UrutanTrans`(IN `myid` CHAR(36)) BEGIN
DECLARE keluar BOOLEAN;
DECLARE nomor BIGINT;
SET keluar = FALSE;
DROP TEMPORARY TABLE IF EXISTS `temprekur`;
CREATE TEMPORARY TABLE temprekur(
	qqid BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	trans_id CHAR(36) UNIQUE,
	trans_type INT,
	masteritem_id CHAR(36),
	PRIMARY KEY (qqid) USING BTREE
);
DROP TEMPORARY TABLE IF EXISTS `temprekurfinal`;
CREATE TEMPORARY TABLE temprekurfinal(
	qqid BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	trans_id CHAR(36) UNIQUE,
	trans_type INT,
	masteritem_id CHAR(36),
	PRIMARY KEY (qqid) USING BTREE
);
DROP TEMPORARY TABLE IF EXISTS `temprekurfinalakhir`;
CREATE TEMPORARY TABLE temprekurfinalakhir(
	qqid BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	trans_id CHAR(36) UNIQUE,
	trans_type INT,
	masteritem_id CHAR(36),
	PRIMARY KEY (qqid) USING BTREE
);
INSERT IGNORE INTO temprekur
SELECT (NULL),
	h.trans_id,
	h.trans_type,
	d.masteritem_id
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type NOT IN (25, 26, 33)
	AND d.transline_qty <> 0
	AND d.masteritem_id IN (
		SELECT dd.masteritem_id
		FROM trans hh,
			transline dd
		WHERE hh.trans_id = dd.trans_id
			AND dd.transline_qty <> 0
			AND hh.trans_id = myid
		ORDER BY dd.transline_vector,
			dd.transline_nourut
	);
WHILE (keluar = FALSE) DO DROP TEMPORARY TABLE IF EXISTS temprekur02;
CREATE TEMPORARY TABLE temprekur02 LIKE temprekur;
INSERT INTO temprekur02
SELECT *
FROM temprekur;
INSERT IGNORE INTO temprekur
SELECT (NULL),
	h.trans_id,
	h.trans_type,
	d.masteritem_id
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type NOT IN (25, 26, 33)
	AND d.transline_qty <> 0
	AND d.masteritem_id IN (
		SELECT d.masteritem_id
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.trans_status = "P"
			AND h.trans_type NOT IN (25, 26, 33)
			AND d.transline_qty <> 0
			AND h.trans_id IN (
				SELECT trans_id
				FROM temprekur02
			)
		ORDER BY d.transline_vector
	)
ORDER BY d.transline_vector;
IF (
	SELECT COUNT(*)
	FROM temprekur
) =(
	SELECT COUNT(*)
	FROM temprekur02
) THEN
SET keluar = TRUE;
END IF;
END WHILE;
SET keluar = FALSE;
INSERT IGNORE INTO temprekurfinal
SELECT (NULL),
	h.trans_id,
	h.trans_type,
	d.masteritem_id
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type NOT IN (25, 26, 33)
	AND d.transline_qty <> 0
	AND d.masteritem_id IN (
		SELECT dd.masteritem_id
		FROM trans hh,
			transline dd,
(
				SELECT trans_id
				FROM temprekur
				WHERE trans_type IN (4, 12)
				GROUP BY trans_id
			) AS cc
		WHERE hh.trans_id = dd.trans_id
			AND hh.trans_id = cc.trans_id
			AND dd.transline_qty <> 0
		ORDER BY DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)),
			hh.trans_waktu,
			dd.transline_vector #WHERE hh.trans_id=dd.trans_id AND dd.transline_qty<>0 AND hh.trans_id IN (SELECT trans_id FROM temprekur WHERE trans_type IN (4,12) GROUP BY trans_id )
	);
WHILE (keluar = FALSE) DO DROP TEMPORARY TABLE IF EXISTS temprekur02;
CREATE TEMPORARY TABLE temprekur02 LIKE temprekurfinal;
INSERT INTO temprekur02
SELECT *
FROM temprekurfinal;
INSERT IGNORE INTO temprekurfinal
SELECT (NULL),
	h.trans_id,
	h.trans_type,
	d.masteritem_id
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type NOT IN (25, 26, 33)
	AND d.transline_qty <> 0
	AND d.masteritem_id IN (
		SELECT d.masteritem_id
		FROM trans h,
			transline d,
(
				SELECT trans_id
				FROM temprekur02
			) AS c
		WHERE h.trans_id = d.trans_id
			AND h.trans_id = c.trans_id
			AND d.transline_qty <> 0
		ORDER BY d.transline_vector
	)
ORDER BY d.transline_vector;
IF (
	SELECT COUNT(*)
	FROM temprekurfinal
) =(
	SELECT COUNT(*)
	FROM temprekur02
) THEN
SET keluar = TRUE;
END IF;
END WHILE;
#SET nomor=(SELECT qqid FROM temprekurfinal WHERE trans_id=myid);
#DELETE FROM temprekurfinal WHERE qqid<nomor;
INSERT INTO temprekurfinalakhir
SELECT (NULL),
	t.trans_id,
	t.trans_type,
	t.masteritem_id
FROM trans h,
	temprekurfinal t
WHERE h.trans_id = t.trans_id
ORDER BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	h.trans_waktu;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_ViewJualBeli
DELIMITER / / CREATE PROCEDURE `X_ViewJualBeli`(
	IN `qqmode` SMALLINT,
	IN `qqbussiness` CHAR(36),
	IN `tgl1` BIGINT,
	IN `tgl2` BIGINT
) SQL SECURITY INVOKER BEGIN
DECLARE total DECIMAL (33, 15);
IF qqmode = 0 THEN #model pivot penjualan harian
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(qqid INT, tanggal DATE, nilai DECIMAL(33, 15));
INSERT INTO tempnilai
SELECT 1,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = qqbussiness
	AND h.trans_status = "P"
	AND h.trans_type IN (16, 17)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal = ''',
			tanggal,
			''' then nilai end) ',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 1 THEN #model pivot penjualan bulanan
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(qqid INT, bulan INT, nilai DECIMAL(33, 15));
INSERT INTO tempnilai
SELECT 1,
	MONTH(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) -1,
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = qqbussiness
	AND h.trans_status = "P"
	AND h.trans_type IN (16, 17)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY MONTH(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when bulan = ''',
			bulan,
			''' then nilai end) ',
			CONCAT("'", bulan, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 2 THEN #model pivot pembelian harian
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(qqid INT, tanggal DATE, nilai DECIMAL(33, 15));
INSERT INTO tempnilai
SELECT 1,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = qqbussiness
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 5)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal = ''',
			tanggal,
			''' then nilai end) ',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 3 THEN #model pivot pembelian bulanan
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(qqid INT, bulan INT, nilai DECIMAL(33, 15));
INSERT INTO tempnilai
SELECT 1,
	MONTH(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) -1,
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = qqbussiness
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 5)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY MONTH(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when bulan = ''',
			bulan,
			''' then nilai end) ',
			CONCAT("'", bulan, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 4 THEN #model pivot penjualan harian
SET total = (
		SELECT SUM(d.transline_netvalue)
		FROM trans h,
			transline d
		WHERE h.trans_id = d.trans_id
			AND h.masterbussiness_id = qqbussiness
			AND h.trans_status = "P"
			AND h.trans_type IN (16, 17)
			AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
			AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
	);
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	qqid INT,
	tanggal DATE,
	nilai DECIMAL(33, 15),
	persen DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT 1,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	SUM(d.transline_netvalue),
	SUM(d.transline_netvalue) / total * 100
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.masterbussiness_id = qqbussiness
	AND h.trans_status = "P"
	AND h.trans_type IN (16, 17)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal = ''',
			tanggal,
			''' then nilai end) ',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 5 THEN #model pivot rekap penjualan harian
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal DATE,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (16, 17)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 6 THEN #model pivot rekap penjualan mingguan
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal INT,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	WEEK(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (16, 17)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	WEEK(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 7 THEN #model pivot rekap penjualan bulan
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal INT,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	MONTH(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) -1,
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (16, 17)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	MONTH(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) -1;
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 8 THEN #model pivot rekap penjualan kuartal
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal DATE,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	QUARTER(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (16, 17)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	QUARTER(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 9 THEN #model pivot rekap penjualan kuartal
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal INT,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	YEAR(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (16, 17)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	YEAR(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 10 THEN #model pivot rekap pembelian harian
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal DATE,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 5)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 11 THEN #model pivot rekap pembelian mingguan
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal INT,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	WEEK(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 5)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	WEEK(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 12 THEN #model pivot rekap pembelian bulan
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal INT,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	MONTH(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) -1,
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 5)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	MONTH(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) -1;
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 13 THEN #model pivot rekap pembelian kuartal
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal INT,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	QUARTER(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 5)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	QUARTER(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 14 THEN #model pivot rekap pembelian kuartal
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	masterpartner_id INT,
	tanggal INT,
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT h.masterpartner_id,
	YEAR(DATE(FROM_UNIXTIME(h.trans_entrydate) DIV 1000)),
	SUM(d.transline_netvalue)
FROM trans h,
	transline d
WHERE h.trans_id = d.trans_id
	AND h.trans_status = "P"
	AND h.trans_type IN (4, 5)
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY h.masterpartner_id,
	YEAR(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		' FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 15 THEN #cash out daily
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(qqid INT, tanggal DATE, nilai DECIMAL(33, 15));
INSERT INTO tempnilai
SELECT (NULL),
	DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) AS trans_entrydate,
	SUM(d.glline_amount)
FROM trans hh,
	gl h,
	glline d,
	masteraccount a,
	masteraccountsubclass sc,
	masteraccountclass c,
	(
		SELECT hh.trans_id
		FROM trans hh,
			gl h,
			glline d,
			masteraccount a,
			masteraccountsubclass sc,
			masteraccountclass c
		WHERE hh.trans_id = h.trans_id
			AND h.gl_id = d.gl_id
			AND d.masteraccount_id = a.masteraccount_id
			AND a.masteraccountsubclass_id = sc.masteraccountsubclass_id
			AND sc.masteraccountclass_id = c.masteraccountclass_id
			AND c.masteraccountclass_description IN ("120")
			AND hh.trans_status NOT IN ("C")
			AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
			AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
			AND hh.masterbussiness_id = qqbussiness
	) AS xx
WHERE hh.trans_id = h.trans_id
	AND h.gl_id = d.gl_id
	AND d.masteraccount_id = a.masteraccount_id
	AND a.masteraccountsubclass_id = sc.masteraccountsubclass_id
	AND sc.masteraccountclass_id = c.masteraccountclass_id
	AND hh.trans_id = xx.trans_id
	AND c.masteraccountclass_description NOT IN ("120")
	AND hh.trans_status NOT IN ("C")
	AND d.glline_vector = 1
	AND hh.masterbussiness_id = qqbussiness
	AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal = ''',
			tanggal,
			''' then nilai end) ',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 16 THEN #cash out monthly
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	qqid INT,
	tanggal VARCHAR(50),
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT (NULL),
	MONTH(DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000))) -1 AS trans_entrydate,
	SUM(d.glline_amount)
FROM trans hh,
	gl h,
	glline d,
	masteraccount a,
	masteraccountsubclass sc,
	masteraccountclass c,
	(
		SELECT hh.trans_id
		FROM trans hh,
			gl h,
			glline d,
			masteraccount a,
			masteraccountsubclass sc,
			masteraccountclass c
		WHERE hh.trans_id = h.trans_id
			AND h.gl_id = d.gl_id
			AND d.masteraccount_id = a.masteraccount_id
			AND a.masteraccountsubclass_id = sc.masteraccountsubclass_id
			AND sc.masteraccountclass_id = c.masteraccountclass_id
			AND c.masteraccountclass_description IN ("120")
			AND hh.trans_status NOT IN ("C")
			AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
			AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
			AND hh.masterbussiness_id = qqbussiness
	) AS xx
WHERE hh.trans_id = h.trans_id
	AND h.gl_id = d.gl_id
	AND d.masteraccount_id = a.masteraccount_id
	AND a.masteraccountsubclass_id = sc.masteraccountsubclass_id
	AND sc.masteraccountclass_id = c.masteraccountclass_id
	AND hh.trans_id = xx.trans_id
	AND c.masteraccountclass_description NOT IN ("120")
	AND hh.trans_status NOT IN ("C")
	AND d.glline_vector = 1
	AND hh.masterbussiness_id = qqbussiness
	AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY MONTH(DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal = ''',
			tanggal,
			''' then nilai end) ',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 17 THEN #cash in daily	
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(qqid INT, tanggal DATE, nilai DECIMAL(33, 15));
INSERT INTO tempnilai
SELECT (NULL),
	DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) AS trans_entrydate,
	SUM(d.glline_amount)
FROM trans hh,
	gl h,
	glline d,
	masteraccount a,
	masteraccountsubclass sc,
	masteraccountclass c,
	(
		SELECT hh.trans_id
		FROM trans hh,
			gl h,
			glline d,
			masteraccount a,
			masteraccountsubclass sc,
			masteraccountclass c
		WHERE hh.trans_id = h.trans_id
			AND h.gl_id = d.gl_id
			AND d.masteraccount_id = a.masteraccount_id
			AND a.masteraccountsubclass_id = sc.masteraccountsubclass_id
			AND sc.masteraccountclass_id = c.masteraccountclass_id
			AND c.masteraccountclass_description IN ("120")
			AND hh.trans_status NOT IN ("C")
			AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
			AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
			AND hh.masterbussiness_id = qqbussiness
	) AS xx
WHERE hh.trans_id = h.trans_id
	AND h.gl_id = d.gl_id
	AND d.masteraccount_id = a.masteraccount_id
	AND a.masteraccountsubclass_id = sc.masteraccountsubclass_id
	AND sc.masteraccountclass_id = c.masteraccountclass_id
	AND hh.trans_id = xx.trans_id
	AND c.masteraccountclass_description NOT IN ("120")
	AND hh.trans_status NOT IN ("C")
	AND d.glline_vector = -1
	AND hh.masterbussiness_id = qqbussiness
	AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal = ''',
			tanggal,
			''' then nilai end) ',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 18 THEN #cash out monthly	
DROP TEMPORARY TABLE IF EXISTS `tempnilai`;
CREATE TEMPORARY TABLE tempnilai(
	qqid INT,
	tanggal VARCHAR(50),
	nilai DECIMAL(33, 15)
);
INSERT INTO tempnilai
SELECT (NULL),
	MONTH(DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000))) -1 AS trans_entrydate,
	SUM(d.glline_amount)
FROM trans hh,
	gl h,
	glline d,
	masteraccount a,
	masteraccountsubclass sc,
	masteraccountclass c,
	(
		SELECT hh.trans_id
		FROM trans hh,
			gl h,
			glline d,
			masteraccount a,
			masteraccountsubclass sc,
			masteraccountclass c
		WHERE hh.trans_id = h.trans_id
			AND h.gl_id = d.gl_id
			AND d.masteraccount_id = a.masteraccount_id
			AND a.masteraccountsubclass_id = sc.masteraccountsubclass_id
			AND sc.masteraccountclass_id = c.masteraccountclass_id
			AND c.masteraccountclass_description IN ("120")
			AND hh.trans_status NOT IN ("C")
			AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
			AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
			AND hh.masterbussiness_id = qqbussiness
	) AS xx
WHERE hh.trans_id = h.trans_id
	AND h.gl_id = d.gl_id
	AND d.masteraccount_id = a.masteraccount_id
	AND a.masteraccountsubclass_id = sc.masteraccountsubclass_id
	AND sc.masteraccountclass_id = c.masteraccountclass_id
	AND hh.trans_id = xx.trans_id
	AND c.masteraccountclass_description NOT IN ("120")
	AND hh.trans_status NOT IN ("C")
	AND d.glline_vector = -1
	AND hh.masterbussiness_id = qqbussiness
	AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) >= DATE(FROM_UNIXTIME(tgl1 DIV 1000))
	AND DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)) <= DATE(FROM_UNIXTIME(tgl2 DIV 1000))
GROUP BY MONTH(DATE(FROM_UNIXTIME(hh.trans_entrydate DIV 1000)));
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal = ''',
			tanggal,
			''' then nilai end) ',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @sql = CONCAT(
		'SELECT ',
		@SQL,
		' 
			                  FROM tempnilai 
			                   GROUP BY qqid'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_ViewLaporan
DELIMITER / / CREATE PROCEDURE `X_ViewLaporan`(
	IN `qqtgl1` BIGINT,
	IN `qqtgl2` BIGINT,
	IN `qqmasterbussinessid` CHAR(36),
	IN `qqtranstypecode` VARCHAR(255),
	IN `qqdateweekmonthquarteryear` VARCHAR(255),
	IN `qqmode` SMALLINT
) BEGIN
SET @SQL =(NULL);
IF qqmode = 1 THEN #partner		
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
IF (qqdateweekmonthquarteryear = 'DATE')
OR(qqdateweekmonthquarteryear = 'YEAR') THEN
SELECT CONCAT(
		'SELECT UUID() AS id,h.masterpartner_id AS paramid,p.masterpartner_alias AS param,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) AS subject,ABS(SUM(d.transline_netvalue*d.transline_vector)) AS value FROM trans h,transline d,masterpartner p WHERE h.trans_id=d.trans_id AND h.masterpartner_id=p.masterpartner_id AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" AND h.trans_status="P" AND h.trans_type IN ',
		qqtranstypecode,
		' AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) GROUP BY h.masterpartner_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));'
	) INTO @SQL;
ELSE
SELECT CONCAT(
		'SELECT UUID() AS id,h.masterpartner_id AS paramid,p.masterpartner_alias AS param,CONCAT(YEAR(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),"_",',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)))) AS subject,ABS(SUM(d.transline_netvalue*d.transline_vector)) AS value FROM trans h,transline d,masterpartner p WHERE h.trans_id=d.trans_id AND h.masterpartner_id=p.masterpartner_id AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" AND h.trans_status="P" AND h.trans_type IN ',
		qqtranstypecode,
		' AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) GROUP BY h.masterpartner_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));'
	) INTO @SQL;
END IF;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSEIF qqmode = 2 THEN #barang kategori
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
IF (qqdateweekmonthquarteryear = 'DATE')
OR(qqdateweekmonthquarteryear = 'YEAR') THEN
SELECT CONCAT(
		'SELECT UUID() AS id,c.masteritemcategory_id AS paramid,c.masteritemcategory_description AS param,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) AS subject,ABS(SUM(d.transline_qty)) AS value FROM trans h,transline d,masteritem i,masteritemcategory c WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND h.trans_status="P" AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" AND h.trans_type IN ',
		qqtranstypecode,
		' AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) GROUP BY c.masteritemcategory_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))); '
	) INTO @SQL;
ELSE
SELECT CONCAT(
		'SELECT UUID() AS id,c.masteritemcategory_id AS paramid,c.masteritemcategory_description AS param,CONCAT(YEAR(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),"_",',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)))) AS subject,ABS(SUM(d.transline_qty)) AS value FROM trans h,transline d,masteritem i,masteritemcategory c WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND h.trans_status="P" AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" AND h.trans_type IN ',
		qqtranstypecode,
		' AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) GROUP BY c.masteritemcategory_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))); '
	) INTO @SQL;
END IF;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSEIF qqmode = 3 THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
IF (qqdateweekmonthquarteryear = 'DATE')
OR(qqdateweekmonthquarteryear = 'YEAR') THEN
SELECT CONCAT(
		'SELECT UUID() AS id,d.masteritem_id AS paramid,i.masteritem_alias AS param,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) AS subject,ABS(SUM(d.transline_qty)) AS value,SUM(d.transline_netvalue*-d.transline_vector)/-SUM(d.transline_qty) AS avgprice,SUM(d.transline_netvalue*-d.transline_vector) AS nilaitotal FROM trans h,transline d,masteritem i WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND h.trans_status="P" AND h.trans_type IN ',
		qqtranstypecode,
		' AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) GROUP BY d.masteritem_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))); '
	) INTO @SQL;
ELSE
SELECT CONCAT(
		'SELECT UUID() AS id,d.masteritem_id AS paramid,i.masteritem_alias AS param,CONCAT(YEAR(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),"_",',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)))) AS subject,ABS(SUM(d.transline_qty)) AS value,SUM(d.transline_netvalue*-d.transline_vector)/-SUM(d.transline_qty) AS avgprice,SUM(d.transline_netvalue*-d.transline_vector) AS nilaitotal FROM trans h,transline d,masteritem i WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND h.trans_status="P" AND h.trans_type IN ',
		qqtranstypecode,
		' AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) GROUP BY d.masteritem_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))); '
	) INTO @SQL;
END IF;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSEIF qqmode = 4 THEN #hutang piutang
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
IF (qqdateweekmonthquarteryear = 'DATE')
OR(qqdateweekmonthquarteryear = 'YEAR') THEN
SELECT CONCAT(
		'SELECT UUID() AS id,p.masterpartner_id AS paramid,p.masterpartner_alias AS param,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))) AS subject,SUM(df.financeline_vector*df.financeline_totalvalue) AS value FROM trans h,finance hf,financeline df,masterpartner p,masterpartnercategory c WHERE h.trans_id=hf.trans_id AND hf.finance_id=df.finance_id AND h.masterpartner_id=p.masterpartner_id AND p.masterpartnercategory_id=c.masterpartnercategory_id AND c.masterpartnercategory_',
		qqtranstypecode,
		'=1 AND df.financeline_status="P" AND DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" GROUP BY p.masterpartner_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))) ORDER BY subject,param,paramid; '
	) INTO @SQL;
ELSE
SELECT CONCAT(
		'SELECT UUID() AS id,p.masterpartner_id AS paramid,p.masterpartner_alias AS param,CONCAT(YEAR(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))),"_",',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000)))) AS subject,SUM(df.financeline_vector*df.financeline_totalvalue) AS value FROM trans h,finance hf,financeline df,masterpartner p,masterpartnercategory c WHERE h.trans_id=hf.trans_id AND hf.finance_id=df.finance_id AND h.masterpartner_id=p.masterpartner_id AND p.masterpartnercategory_id=c.masterpartnercategory_id AND c.masterpartnercategory_',
		qqtranstypecode,
		'=1 AND df.financeline_status="P" AND DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" GROUP BY p.masterpartner_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))) ORDER BY subject,param,paramid; '
	) INTO @SQL;
END IF;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSEIF qqmode = 5 THEN #sales		
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
IF (qqdateweekmonthquarteryear = 'DATE')
OR(qqdateweekmonthquarteryear = 'YEAR') THEN
SELECT CONCAT(
		'SELECT UUID() AS id,h.masterpartnerstaff_id AS paramid,p.masterpartner_alias AS param,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))) AS subject,ABS(SUM(d.transline_netvalue*d.transline_vector)) AS value FROM trans h,transline d,masterpartner p WHERE h.trans_id=d.trans_id AND h.masterpartnerstaff_id=p.masterpartner_id AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" AND h.trans_status="P" AND h.trans_type IN ',
		qqtranstypecode,
		' AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) GROUP BY h.masterpartnerstaff_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));'
	) INTO @SQL;
ELSE
SELECT CONCAT(
		'SELECT UUID() AS id,h.masterpartnerstaff_id AS paramid,p.masterpartner_alias AS param,CONCAT(YEAR(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))),"_",',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)))) AS subject,ABS(SUM(d.transline_netvalue*d.transline_vector)) AS value FROM trans h,transline d,masterpartner p WHERE h.trans_id=d.trans_id AND h.masterpartnerstaff_id=p.masterpartner_id AND h.masterbussiness_id="',
		qqmasterbussinessid,
		'" AND h.trans_status="P" AND h.trans_type IN ',
		qqtranstypecode,
		' AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		qqtgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		qqtgl2,
		' DIV 1000)) GROUP BY h.masterpartnerstaff_id,',
		qqdateweekmonthquarteryear,
		'(DATE(FROM_UNIXTIME(h.trans_entrydate DIV 1000)));'
	) INTO @SQL;
END IF;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_ViewPivotLaporan
DELIMITER / / CREATE PROCEDURE `X_ViewPivotLaporan`(
	IN `tgl1` BIGINT,
	IN `tgl2` BIGINT,
	IN `qqbussiness` CHAR(36),
	IN `qqtypecode` VARCHAR(255),
	IN `qqkelompok` VARCHAR(255),
	IN `qqgroup` VARCHAR(255),
	IN `qqmode` SMALLINT
) BEGIN
SET @SQL = NULL;
IF qqmode = 1 THEN #partner
SELECT CONCAT('DROP TEMPORARY TABLE IF EXISTS tempnilai;') INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SELECT CONCAT(
		'CREATE TEMPORARY TABLE tempnilai(masterpartner_id INT,tanggal VARCHAR(255),nilai DECIMAL(33,15));'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
IF (qqkelompok = 'DATE')
OR(qqkelompok = 'YEAR') THEN
SELECT CONCAT(
		'INSERT INTO tempnilai SELECT h.',
		qqgroup,
		',',
		qqkelompok,
		'(',
		'h.trans_entrydate',
		')',
		',ABS(SUM(d.transline_netvalue*d.transline_vector)) ',
		' FROM trans h,transline d ',
		'WHERE h.trans_id=d.trans_id AND h.masterbussiness_id=',
		qqbussiness,
		' AND h.trans_status="P" AND h.trans_type IN ',
		qqtypecode,
		' AND h.trans_entrydate>="',
		tgl1,
		'" AND h.trans_entrydate<="',
		tgl2,
		'" GROUP BY h.',
		qqgroup,
		',',
		qqkelompok,
		'(h.trans_entrydate);'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
ELSE
SELECT CONCAT(
		'INSERT INTO tempnilai SELECT h.',
		qqgroup,
		',CONCAT(YEAR(h.trans_entrydate),"_",',
		qqkelompok,
		'(',
		'h.trans_entrydate',
		'))',
		',ABS(SUM(d.transline_netvalue*d.transline_vector)) ',
		' FROM trans h,transline d ',
		'WHERE h.trans_id=d.trans_id AND h.masterbussiness_id=',
		qqbussiness,
		' AND h.trans_status="P" AND h.trans_type IN ',
		qqtypecode,
		' AND h.trans_entrydate>="',
		tgl1,
		'" AND h.trans_entrydate<="',
		tgl2,
		'" GROUP BY h.',
		qqgroup,
		',',
		qqkelompok,
		'(h.trans_entrydate);'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END IF;
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @SQL = CONCAT(
		'SELECT t.masterpartner_id,p.masterpartner_alias,',
		@SQL,
		',SUM(nilai) AS total FROM tempnilai t,masterpartner p WHERE t.masterpartner_id=p.masterpartner_id GROUP BY t.masterpartner_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 2 THEN #barang
SET @SQL = NULL;
SELECT CONCAT('DROP TEMPORARY TABLE IF EXISTS tempnilai;') INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SELECT CONCAT(
		'CREATE TEMPORARY TABLE tempnilai(masteritemcategory_id INT,tanggal VARCHAR(255),nilai DECIMAL(33,15));'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
IF (qqkelompok = 'DATE')
OR(qqkelompok = 'YEAR') THEN
SELECT CONCAT(
		'INSERT INTO tempnilai SELECT c.masteritemcategory_id,',
		qqkelompok,
		'(',
		'h.trans_entrydate',
		')',
		',ABS(SUM(d.transline_qty)) ',
		' FROM trans h,transline d,masteritem i,masteritemcategory c ',
		'WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND h.masterbussiness_id=',
		qqbussiness,
		' AND h.trans_status="P" AND h.trans_type IN ',
		qqtypecode,
		' AND h.trans_entrydate>="',
		tgl1,
		'" AND h.trans_entrydate<="',
		tgl2,
		'" GROUP BY c.masteritemcategory_id,',
		qqkelompok,
		'(h.trans_entrydate);'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
ELSE
SELECT CONCAT(
		'INSERT INTO tempnilai SELECT c.masteritemcategory_id,',
		'CONCAT(YEAR(h.trans_entrydate),"_",',
		qqkelompok,
		'(',
		'h.trans_entrydate',
		'))',
		',ABS(SUM(d.transline_netvalue*d.transline_vector)) ',
		' FROM trans h,transline d,masteritem i,masteritemcategory c ',
		'WHERE h.trans_id=d.trans_id AND d.masteritem_id=i.masteritem_id AND i.masteritemcategory_id=c.masteritemcategory_id AND h.masterbussiness_id=',
		qqbussiness,
		' AND h.trans_status="P" AND h.trans_type IN ',
		qqtypecode,
		' AND h.trans_entrydate>="',
		tgl1,
		'" AND h.trans_entrydate<="',
		tgl2,
		'" GROUP BY c.masteritemcategory_id,',
		qqkelompok,
		'(h.trans_entrydate);'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END IF;
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @SQL = CONCAT(
		'SELECT c.masteritemcategory_id,c.masteritemcategory_description,',
		@SQL,
		',SUM(nilai) AS total FROM tempnilai t,masteritemcategory c WHERE t.masteritemcategory_id=c.masteritemcategory_id GROUP BY c.masteritemcategory_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 3 THEN
SET @SQL = NULL;
SELECT CONCAT('DROP TEMPORARY TABLE IF EXISTS tempnilai;') INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SELECT CONCAT(
		'CREATE TEMPORARY TABLE tempnilai(masteritem_id INT,avgprice DECIMAL(33,15),total DECIMAL(33,15),tanggal VARCHAR(255),nilai DECIMAL(33,15));'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
IF (qqkelompok = 'DATE')
OR(qqkelompok = 'YEAR') THEN
SELECT CONCAT(
		'INSERT INTO tempnilai SELECT d.masteritem_id,SUM(d.transline_netvalue*-d.transline_vector)/-SUM(d.transline_qty) AS avgPrice,SUM(d.transline_netvalue*-d.transline_vector) AS nilaitotal,',
		qqkelompok,
		'(',
		'h.trans_entrydate',
		')',
		',ABS(SUM(d.transline_qty)) ',
		' FROM trans h,transline d ',
		'WHERE h.trans_id=d.trans_id AND h.masterbussiness_id=',
		qqbussiness,
		' AND h.trans_status="P" AND h.trans_type IN ',
		qqtypecode,
		' AND h.trans_entrydate>="',
		tgl1,
		'" AND h.trans_entrydate<="',
		tgl2,
		'" GROUP BY d.masteritem_id,',
		qqkelompok,
		'(h.trans_entrydate);'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
ELSE
SELECT CONCAT(
		'INSERT INTO tempnilai SELECT d.masteritem_id,SUM(d.transline_netvalue*-d.transline_vector)/-SUM(d.transline_qty) AS avgPrice,SUM(d.transline_netvalue*-d.transline_vector) AS nilaitotal,',
		'CONCAT(YEAR(h.trans_entrydate),"_",',
		qqkelompok,
		'(',
		'h.trans_entrydate',
		'))',
		',ABS(SUM(d.transline_qty)) ',
		' FROM trans h,transline d ',
		'WHERE h.trans_id=d.trans_id AND h.masterbussiness_id=',
		qqbussiness,
		' AND h.trans_status="P" AND h.trans_type IN ',
		qqtypecode,
		' AND h.trans_entrydate>="',
		tgl1,
		'" AND h.trans_entrydate<="',
		tgl2,
		'" GROUP BY d.masteritem_id,',
		qqkelompok,
		'(h.trans_entrydate);'
	) INTO @SQL;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END IF;
IF EXISTS(
	SELECT *
	FROM tempnilai
) THEN
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
SELECT GROUP_CONCAT(
		DISTINCT CONCAT(
			'max(case when tanggal=''',
			tanggal,
			''' then COALESCE(nilai,0) end)',
			CONCAT("'", tanggal, "'")
		)
	) INTO @SQL
FROM tempnilai;
SET @SQL = CONCAT(
		'SELECT t.masteritem_id,i.masteritem_alias,',
		@SQL,
		',SUM(nilai) AS qty,u.masterother_description AS satuan,t.avgprice,t.total FROM tempnilai t,masteritem i,masterother u WHERE t.masteritem_id=i.masteritem_id AND i.masteruom_id=u.masterother_id GROUP BY t.masteritem_id'
	);
PREPARE stmt
FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
ELSE
SELECT (NULL);
END IF;
ELSEIF qqmode = 4 THEN #hutang piutang
#CALL `X_ViewPivotLaporan`('1640970000000', '1672419600000', 'ce898960-786a-11ed-b0b2-8ba5444480f3', 'c.masterpartnercategory_customer=1', 'p.masterpartner_id', 'MONTH', '4')
SET SESSION group_concat_max_len = 9999000000;
SET @SQL = NULL;
IF (qqgroup = 'DATE')
OR(qqgroup = 'YEAR') THEN
SELECT CONCAT(
		'SELECT UUID() AS id,p.',
		qqkelompok,
		' AS paramid,p.masterpartner_alias AS param,',
		qqgroup,
		'(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))) AS subject,SUM(df.financeline_vector*df.financeline_totalvalue) AS value FROM trans h,finance hf,financeline df,masterpartner p,masterpartnercategory c WHERE h.trans_id=hf.trans_id AND hf.finance_id=df.finance_id AND h.masterpartner_id=p.masterpartner_id AND p.masterpartnercategory_id=c.masterpartnercategory_id AND c.masterpartnercategory_',
		qqtypecode,
		'=1 AND df.financeline_status="P" AND DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		tgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		tgl2,
		' DIV 1000)) AND h.masterbussiness_id="',
		qqbussiness,
		'" GROUP BY p.',
		qqkelompok,
		',',
		qqgroup,
		'(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))) ORDER BY subject,param,paramid; '
	) INTO @SQL;
ELSE
SELECT CONCAT(
		'SELECT UUID() AS id,p.',
		qqkelompok,
		' AS paramid,p.masterpartner_alias AS param,CONCAT(YEAR(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))),"_",',
		qqgroup,
		'(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000)))) AS subject,SUM(df.financeline_vector*df.financeline_totalvalue) AS value FROM trans h,finance hf,financeline df,masterpartner p,masterpartnercategory c WHERE h.trans_id=hf.trans_id AND hf.finance_id=df.finance_id AND h.masterpartner_id=p.masterpartner_id AND p.masterpartnercategory_id=c.masterpartnercategory_id AND c.masterpartnercategory_',
		qqtypecode,
		'=1 AND df.financeline_status="P" AND DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))>=DATE(FROM_UNIXTIME(',
		tgl1,
		' DIV 1000)) AND DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))<=DATE(FROM_UNIXTIME(',
		tgl2,
		' DIV 1000)) AND h.masterbussiness_id="',
		qqbussiness,
		'" GROUP BY p.',
		qqkelompok,
		',',
		qqgroup,
		'(DATE(FROM_UNIXTIME(df.financeline_entrydate DIV 1000))) ORDER BY subject,param,paramid; '
	) INTO @SQL;
END IF;
PREPARE stmt
FROM @SQL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET SESSION group_concat_max_len = 1024;
END IF;
END / / DELIMITER;
-- Dumping structure for procedure gogabook.X_Void
DELIMITER / / CREATE PROCEDURE `X_Void`(
	IN `myid` CHAR(36),
	IN `myoleh` VARCHAR(255)
) BEGIN
DECLARE induktrans_id CHAR(36);
IF (
	(
		SELECT trans_type
		FROM trans
		WHERE trans_id = myid
	) = 8
)
OR (
	(
		SELECT trans_type
		FROM trans
		WHERE trans_id = myid
	) = 20
) THEN
SET induktrans_id =(
		SELECT transparent_id
		FROM trans
		WHERE trans_id = myid
	);
UPDATE trans
SET trans_status = "C",
	trans_olehubah = myoleh
WHERE trans_id IN (myid);
UPDATE trans
SET trans_girocair =(NULL),
	trans_girocair =(NULL)
WHERE trans_id = induktrans_id;
UPDATE gl
SET gl_status = "C"
WHERE trans_id IN (myid);
ELSEIF (
	(
		SELECT trans_type
		FROM trans
		WHERE trans_id = myid
	) = 38
) THEN
UPDATE trans
SET trans_status = "C",
	trans_olehubah = myoleh
WHERE trans_id IN (myid);
UPDATE gl
SET gl_status = "C"
WHERE trans_id IN (myid);
UPDATE financeline
SET financeline_status = "C"
WHERE trans_id IN (myid);
UPDATE masterfixasset
SET masterpartnerjual_id =(NULL),
	mastertaxjual_id =(NULL),
	mastercredittermjual_id =(NULL),
	masteraccountjual_id =(NULL),
	transjual_id =(NULL),
	masterfixasset_tanggalterjual =(NULL)
WHERE masterfixasset_id IN (
		SELECT masterfixasset_id
		FROM trans
		WHERE trans_id = myid
	);
ELSE
UPDATE trans
SET trans_status = "C",
	trans_olehubah = myoleh
WHERE trans_id IN (myid);
UPDATE gl
SET gl_status = "C"
WHERE trans_id IN (myid);
UPDATE financeline
SET financeline_status = "C"
WHERE trans_id IN (myid);
CALL `X_HitungParentTransLine`(myid);
END IF;
CALL `X_HitungHutangPiutang`('myid');
END / / DELIMITER;
-- Dumping structure for function gogabook.Y_AutoGenMaster
DELIMITER / / CREATE FUNCTION `Y_AutoGenMaster`(
	`mybussiness` CHAR(36),
	`mymode` TINYINT,
	`myfrasa` VARCHAR(50)
) RETURNS varchar(255) CHARSET latin1 BEGIN
DECLARE qqfrasa VARCHAR(255);
SET qqfrasa = CONCAT(myfrasa, '%');
IF mymode = 1 THEN #barang
IF EXISTS(
	SELECT masteritem_description
	FROM masteritem
	WHERE masteritem_description LIKE qqfrasa
) THEN RETURN (
	SELECT CONCAT(
			myfrasa,
			LPAD(
				RIGHT(
					masteritem_description,
					LENGTH(masteritem_description) - LENGTH('brg')
				) + 1,
(
					SELECT generalsetting_digitautogenerate
					FROM generalsetting
					WHERE masterbussiness_id = mybussiness
				),
				"0"
			)
		) AS autogen
	FROM masteritem
	WHERE masteritem_description LIKE qqfrasa
	ORDER BY masteritem_description DESC
	LIMIT 1
);
ELSE RETURN (
	SELECT CONCAT(
			myfrasa,
			LPAD(
				RIGHT(myfrasa, LENGTH(myfrasa)) + 1,
(
					SELECT generalsetting_digitautogenerate
					FROM generalsetting
					WHERE masterbussiness_id = mybussiness
				),
				"0"
			)
		) AS autogen
);
END IF;
ELSEIF mymode = 2 THEN #partner
IF EXISTS(
	SELECT masterpartner_description
	FROM masterpartner
	WHERE masterpartner_description LIKE qqfrasa
) THEN RETURN (
	SELECT CONCAT(
			myfrasa,
			LPAD(
				RIGHT(
					masterpartner_description,
					LENGTH(masterpartner_description) - LENGTH('brg')
				) + 1,
(
					SELECT generalsetting_digitautogenerate
					FROM generalsetting
					WHERE masterbussiness_id = mybussiness
				),
				"0"
			)
		) AS autogen
	FROM masterpartner
	WHERE masterpartner_description LIKE qqfrasa
	ORDER BY masterpartner_description DESC
	LIMIT 1
);
ELSE RETURN (
	SELECT CONCAT(
			myfrasa,
			LPAD(
				RIGHT(myfrasa, LENGTH(myfrasa)) + 1,
(
					SELECT generalsetting_digitautogenerate
					FROM generalsetting
					WHERE masterbussiness_id = mybussiness
				),
				"0"
			)
		) AS autogen
);
END IF;
END IF;
END / / DELIMITER;
-- Dumping structure for function gogabook.Y_GetFaktur
DELIMITER / / CREATE FUNCTION `Y_GetFaktur`(
	`qqperiode` BIGINT,
	`qqbussinessid` CHAR(36)
) RETURNS char(36) CHARSET latin1 BEGIN
/*RETURN (SELECT MIN(d.transfakturline_id)
 FROM transfaktur h,transfakturline d
 WHERE h.transfaktur_id=d.transfaktur_id AND d.trans_id IS NULL 
 AND DATE(FROM_UNIXTIME(h.transfaktur_entrydateend DIV 1000))>=DATE(FROM_UNIXTIME(qqperiode DIV 1000)) AND DATE(FROM_UNIXTIME(h.transfaktur_entrydatestart DIV 1000))<=DATE(FROM_UNIXTIME(qqperiode DIV 1000)) AND h.masterbussiness_id=qqbussinessid);*/
RETURN (
	SELECT MIN(d.transfakturline_id)
	FROM transfaktur h,
		transfakturline d
	WHERE h.transfaktur_id = d.transfaktur_id
		AND DATE(
			FROM_UNIXTIME(h.transfaktur_entrydateend DIV 1000)
		) >= DATE(FROM_UNIXTIME(qqperiode DIV 1000))
		AND DATE(
			FROM_UNIXTIME(h.transfaktur_entrydatestart DIV 1000)
		) <= DATE(FROM_UNIXTIME(qqperiode DIV 1000))
		AND h.masterbussiness_id = qqbussinessid
		AND d.transfakturline_id NOT IN (
			SELECT xd.transfakturline_id
			FROM transfakturline xd,
				trans xh
			WHERE xd.transfakturline_id = xh.transfakturline_id
				AND xh.masterbussiness_id = qqbussinessid
		)
	ORDER BY d.transfakturline_nomor
);
END / / DELIMITER;
-- Dumping structure for function gogabook.Y_GetUTC
DELIMITER / / CREATE FUNCTION `Y_GetUTC`(`qqentrydate` VARCHAR(255)) RETURNS bigint(20) BEGIN
DECLARE myutc BIGINT;
SELECT ROUND(
		UNIX_TIMESTAMP(CONCAT(qqentrydate, ' ', CURTIME(4)))
	) * 1000 INTO myutc;
RETURN myutc;
END / / DELIMITER;
-- Dumping structure for function gogabook.Y_GetUUID
DELIMITER / / CREATE FUNCTION `Y_GetUUID`() RETURNS char(36) CHARSET latin1 BEGIN RETURN UUID();
END / / DELIMITER;
-- Dumping structure for function gogabook.Y_Key
DELIMITER / / CREATE FUNCTION `Y_Key`(
	`myTaxCode` CHAR(36),
	`myBussinessCode` CHAR(36),
	`myTypeCode` SMALLINT,
	`myTgl` BIGINT,
	`mySplitNota` ENUM('Y', 'N'),
	`myCtr` SMALLINT
) RETURNS varchar(255) CHARSET latin1 READS SQL DATA BEGIN
DECLARE Prefik,
	Result VARCHAR(255);
DECLARE Digit SMALLINT;
IF COALESCE(myTaxCode, 0) = 0 THEN
SET myTaxCode = 0;
END IF;
IF myTypeCode = 35 THEN
SET Prefik = (
		SELECT masterprefix_prefix
		FROM masterprefix
		WHERE masterbussiness_id = myBussinessCode
			AND masterprefix_type = myTypeCode
	);
SET Digit = (
		SELECT masterprefix_digit
		FROM masterprefix
		WHERE masterbussiness_id = myBussinessCode
			AND masterprefix_type = myTypeCode
	);
SELECT CONCAT(
		Prefik,
		'-',
		DATE_FORMAT(FROM_UNIXTIME(myTgl DIV 1000), '%y'),
		'-',
		LPAD(
			CONVERT(
				(
					IFNULL(
						CONVERT(
							MAX(
								SUBSTR(
									masterfixassetsusut_text,
									LENGTH(Prefik) + Digit,
									Digit
								)
							),
							SIGNED
						),
						0
					) + 1 + myCtr
				),
				CHAR
			),
			Digit,
			'0'
		)
	) into Result
FROM masterfixassetsusut
WHERE masterbussiness_id = myBussinessCode
	AND DATE_FORMAT(
		FROM_UNIXTIME(masterfixassetsusut_depreciationdate DIV 1000),
		'%y'
	) = DATE_FORMAT(FROM_UNIXTIME(myTgl DIV 1000), '%y')
	AND SUBSTR(masterfixassetsusut_text, 1, LENGTH(Prefik)) = Prefik;
ELSE IF mySplitNota = 'Y' THEN
SET Prefik = CONCAT(
		(
			SELECT masterprefix_prefix
			FROM masterprefix
			WHERE masterbussiness_id = myBussinessCode
				AND masterprefix_type = myTypeCode
		),
(
			SELECT masterother_description
			FROM masterother
			WHERE masterother_id = myTaxCode
		)
	);
SET Digit = (
		SELECT masterprefix_digit
		FROM masterprefix
		WHERE masterbussiness_id = myBussinessCode
			AND masterprefix_type = myTypeCode
	);
SELECT CONCAT(
		Prefik,
		'-',
		DATE_FORMAT(FROM_UNIXTIME(myTgl DIV 1000), '%y'),
		'-',
		LPAD(
			CONVERT(
				(
					IFNULL(
						CONVERT(
							MAX(SUBSTR(trans_text, LENGTH(Prefik) + Digit, Digit)),
							SIGNED
						),
						0
					) + 1
				),
				CHAR
			),
			Digit,
			'0'
		)
	) into Result
FROM trans
WHERE masterbussiness_id = myBussinessCode
	AND DATE_FORMAT(FROM_UNIXTIME(trans_entrydate DIV 1000), '%y') = DATE_FORMAT(FROM_UNIXTIME(myTgl DIV 1000), '%y')
	AND SUBSTR(trans_text, 1, LENGTH(Prefik)) = Prefik;
ELSE
SET Prefik = (
		SELECT masterprefix_prefix
		FROM masterprefix
		WHERE masterbussiness_id = myBussinessCode
			AND masterprefix_type = myTypeCode
	);
SET Digit = (
		SELECT masterprefix_digit
		FROM masterprefix
		WHERE masterbussiness_id = myBussinessCode
			AND masterprefix_type = myTypeCode
	);
SELECT CONCAT(
		Prefik,
		'-',
		DATE_FORMAT(FROM_UNIXTIME(myTgl DIV 1000), '%y'),
		'-',
		LPAD(
			CONVERT(
				(
					IFNULL(
						CONVERT(
							MAX(SUBSTR(trans_text, LENGTH(Prefik) + Digit, Digit)),
							SIGNED
						),
						0
					) + 1 + myCtr
				),
				CHAR
			),
			Digit,
			'0'
		)
	) into Result
FROM trans
WHERE masterbussiness_id = myBussinessCode
	AND DATE_FORMAT(FROM_UNIXTIME(trans_entrydate DIV 1000), '%y') = DATE_FORMAT(FROM_UNIXTIME(myTgl DIV 1000), '%y')
	AND SUBSTR(trans_text, 1, LENGTH(Prefik)) = Prefik;
END IF;
END IF;
RETURN result;
END / / DELIMITER;
-- Dumping structure for function gogabook.Y_KeyBilling
DELIMITER / / CREATE FUNCTION `Y_KeyBilling`() RETURNS varchar(255) CHARSET latin1 BEGIN
/*DECLARE Prefik,Result VARCHAR(255);
 DECLARE Digit SMALLINT;
 
 SET Prefik = 'INV';
 SET Digit = 8;
 SELECT CONCAT(Prefik,DATE_FORMAT(FROM_UNIXTIME(myTgl DIV 1000),'%y'),'-',LPAD(CONVERT((IFNULL(CONVERT(MAX(SUBSTR(transbilling_text,LENGTH(Prefik)+Digit,Digit)),SIGNED),0)+1),CHAR),Digit,'0')) into Result
 FROM transbilling
 WHERE DATE_FORMAT(FROM_UNIXTIME(transbilling_waktu DIV 1000),'%y') = DATE_FORMAT(FROM_UNIXTIME(myTgl DIV 1000),'%y') AND SUBSTR(transbilling_text,1,LENGTH(Prefik))=Prefik;*/
DECLARE result VARCHAR(255);
SELECT CONCAT(
		'INV',
		"-",
		DATE_FORMAT(FROM_UNIXTIME(1683014122000 DIV 1000), '%y'),
		"-",
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	) INTO result;
RETURN result;
END / / DELIMITER;
-- Dumping structure for trigger gogabook.errorlog_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER errorlog_before_insert BEFORE
INSERT ON errorlog FOR EACH ROW BEGIN
SET NEW.errorlog_waktu = ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.financeline_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER financeline_after_update
AFTER
UPDATE ON financeline FOR EACH ROW BEGIN
UPDATE finance
SET finance_currentvalue =(
		SELECT SUM(financeline_totalvalue * financeline_vector)
		FROM financeline
		WHERE finance_id = NEW.finance_id
			AND financeline_status = "P"
	)
WHERE finance_id = NEW.finance_id;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.financeline_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER financeline_before_insert BEFORE
INSERT ON financeline FOR EACH ROW BEGIN IF (NEW.financeline_type = 2)
	OR (NEW.financeline_type = 4)
	OR (NEW.financeline_type = 7)
	OR (NEW.financeline_type = 11)
	OR (NEW.financeline_type = 14)
	OR (NEW.financeline_type = 16)
	OR (NEW.financeline_type = 19)
	OR (NEW.financeline_type = 23)
	OR (NEW.financeline_type = 34)
	OR (NEW.financeline_type = 38)
	OR (NEW.financeline_type = 46)
	OR (NEW.financeline_type = 47) THEN
SET NEW.financeline_vector = 1;
ELSEIF (NEW.financeline_type = 5)
OR (NEW.financeline_type = 6)
OR (NEW.financeline_type = 17)
OR (NEW.financeline_type = 18)
OR (NEW.financeline_type = 44)
OR (NEW.financeline_type = 45)
OR (NEW.financeline_type = 48)
OR (NEW.financeline_type = 49)
OR (NEW.financeline_type = 50)
OR (NEW.financeline_type = 51) THEN
SET NEW.financeline_vector = -1;
END IF;
SET NEW.financeline_totalvalue = NEW.financeline_total;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.financeline_before_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER financeline_before_update BEFORE
UPDATE ON financeline FOR EACH ROW BEGIN IF (NEW.financeline_type = 4)
	OR (NEW.financeline_type = 7)
	OR (NEW.financeline_type = 11)
	OR (NEW.financeline_type = 16)
	OR (NEW.financeline_type = 19)
	OR (NEW.financeline_type = 23)
	OR (NEW.financeline_type = 34)
	OR (NEW.financeline_type = 38)
	OR (NEW.financeline_type = 46)
	OR (NEW.financeline_type = 47) THEN
SET NEW.financeline_vector = 1;
ELSEIF (NEW.financeline_type = 5)
OR (NEW.financeline_type = 6)
OR (NEW.financeline_type = 17)
OR (NEW.financeline_type = 18)
OR (NEW.financeline_type = 44)
OR (NEW.financeline_type = 45)
OR (NEW.financeline_type = 48)
OR (NEW.financeline_type = 49)
OR (NEW.financeline_type = 50)
OR (NEW.financeline_type = 51) THEN
SET NEW.financeline_vector = -1;
END IF;
SET NEW.financeline_totalvalue = NEW.financeline_total;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.glline_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER glline_before_insert BEFORE
INSERT ON glline FOR EACH ROW BEGIN IF NEW.glline_exchangevalue IS NULL THEN
SET NEW.glline_exchangevalue = 1;
SET NEW.glline_amountvalue = NEW.glline_amount * NEW.glline_exchangevalue;
ELSE
SET NEW.glline_amountvalue = NEW.glline_amount * NEW.glline_exchangevalue;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.glline_before_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER glline_before_update BEFORE
UPDATE ON glline FOR EACH ROW BEGIN IF NEW.glline_exchangevalue IS NULL THEN
SET NEW.glline_exchangevalue = 1;
SET NEW.glline_amountvalue = NEW.glline_amount * NEW.glline_exchangevalue;
ELSE
SET NEW.glline_amountvalue = NEW.glline_amount;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccountclass_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccountclass_after_delete
AFTER DELETE ON masteraccountclass FOR EACH ROW BEGIN
INSERT INTO masteraccountclasshistory
VALUES(
		(
			SELECT UUID()
		),
		'D',
		OLD.masteraccountclass_id,
		OLD.masteraccountclass_categoryclass,
		OLD.masteraccountclass_categoryclasscode,
		OLD.masteraccountclass_aktivapasiva,
		OLD.masteraccountclass_description,
		OLD.masteraccountclass_alias,
		OLD.masteraccountclass_neraca,
		OLD.masteraccountclass_profitloss,
		OLD.masteraccountclass_active,
		OLD.masteraccountclass_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccountclass_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccountclass_after_insert
AFTER
INSERT ON masteraccountclass FOR EACH ROW BEGIN
INSERT INTO masteraccountclasshistory
VALUES(
		(
			SELECT UUID()
		),
		'I',
		NEW.masteraccountclass_id,
		NEW.masteraccountclass_categoryclass,
		NEW.masteraccountclass_categoryclasscode,
		NEW.masteraccountclass_aktivapasiva,
		NEW.masteraccountclass_description,
		NEW.masteraccountclass_alias,
		NEW.masteraccountclass_neraca,
		NEW.masteraccountclass_profitloss,
		NEW.masteraccountclass_active,
		NEW.masteraccountclass_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccountclass_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccountclass_after_update
AFTER
UPDATE ON masteraccountclass FOR EACH ROW BEGIN
INSERT INTO masteraccountclasshistory
VALUES(
		(
			SELECT UUID()
		),
		'U',
		NEW.masteraccountclass_id,
		NEW.masteraccountclass_categoryclass,
		NEW.masteraccountclass_categoryclasscode,
		NEW.masteraccountclass_aktivapasiva,
		NEW.masteraccountclass_description,
		NEW.masteraccountclass_alias,
		NEW.masteraccountclass_neraca,
		NEW.masteraccountclass_profitloss,
		NEW.masteraccountclass_active,
		NEW.masteraccountclass_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccountsubclass_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccountsubclass_after_delete
AFTER DELETE ON masteraccountsubclass FOR EACH ROW BEGIN
INSERT INTO masteraccountsubclasshistory
VALUES(
		(
			SELECT UUID()
		),
		'D',
		OLD.masteraccountsubclass_id,
		OLD.masteraccountclass_id,
		OLD.masteraccountsubclass_cashflow,
		OLD.masteraccountsubclass_subcashflow,
		OLD.masteraccountsubclass_neraca,
		OLD.masteraccountsubclass_labarugi,
		OLD.masteraccountsubclass_description,
		OLD.masteraccountsubclass_alias,
		OLD.masteraccountsubclass_active,
		OLD.masteraccountsubclass_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccountsubclass_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccountsubclass_after_insert
AFTER
INSERT ON masteraccountsubclass FOR EACH ROW BEGIN
INSERT INTO masteraccountsubclasshistory
VALUES(
		(
			SELECT UUID()
		),
		'I',
		NEW.masteraccountsubclass_id,
		NEW.masteraccountclass_id,
		NEW.masteraccountsubclass_cashflow,
		NEW.masteraccountsubclass_subcashflow,
		NEW.masteraccountsubclass_neraca,
		NEW.masteraccountsubclass_labarugi,
		NEW.masteraccountsubclass_description,
		NEW.masteraccountsubclass_alias,
		NEW.masteraccountsubclass_active,
		NEW.masteraccountsubclass_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccountsubclass_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccountsubclass_after_update
AFTER
UPDATE ON masteraccountsubclass FOR EACH ROW BEGIN
INSERT INTO masteraccountsubclasshistory
VALUES(
		(
			SELECT UUID()
		),
		'U',
		NEW.masteraccountsubclass_id,
		NEW.masteraccountclass_id,
		NEW.masteraccountsubclass_cashflow,
		NEW.masteraccountsubclass_subcashflow,
		NEW.masteraccountsubclass_neraca,
		NEW.masteraccountsubclass_labarugi,
		NEW.masteraccountsubclass_description,
		NEW.masteraccountsubclass_alias,
		NEW.masteraccountsubclass_active,
		NEW.masteraccountsubclass_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccount_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccount_after_delete
AFTER DELETE ON masteraccount FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masteraccount_id,
		'MASTER AKUN',
		'masteraccount',
		'menghapus akun',
		CONCAT(
			OLD.masteraccount_description,
			" - ",
			OLD.masteraccount_alias
		),
		OLD.masterbussiness_id,
		'D',
		OLD.masteraccount_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteraccounthistory
VALUES(
		myid,
		'D',
		OLD.masteraccount_id,
		OLD.masteraccountsubclass_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masteraccount_description,
		OLD.masteraccount_alias,
		OLD.masteraccount_restrict,
		OLD.masteraccount_active,
		OLD.masteraccount_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccount_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccount_after_insert
AFTER
INSERT ON masteraccount FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masteraccount_id,
		'MASTER AKUN',
		'masteraccount',
		'menambahkan akun',
		CONCAT(
			NEW.masteraccount_description,
			" - ",
			NEW.masteraccount_alias
		),
		NEW.masterbussiness_id,
		'I',
		NEW.masteraccount_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteraccounthistory
VALUES(
		myid,
		'I',
		NEW.masteraccount_id,
		NEW.masteraccountsubclass_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masteraccount_description,
		NEW.masteraccount_alias,
		NEW.masteraccount_restrict,
		NEW.masteraccount_active,
		NEW.masteraccount_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteraccount_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteraccount_after_update
AFTER
UPDATE ON masteraccount FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masteraccount_id,
		'MASTER AKUN',
		'masteraccount',
		'merubah akun',
		CONCAT(
			NEW.masteraccount_description,
			" - ",
			NEW.masteraccount_alias
		),
		NEW.masterbussiness_id,
		'U',
		NEW.masteraccount_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteraccounthistory
VALUES(
		myid,
		'U',
		NEW.masteraccount_id,
		NEW.masteraccountsubclass_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masteraccount_description,
		NEW.masteraccount_alias,
		NEW.masteraccount_restrict,
		NEW.masteraccount_active,
		NEW.masteraccount_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterbussiness_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterbussiness_after_delete
AFTER DELETE ON masterbussiness FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterbussiness_id,
		'masterbussiness',
		OLD.masterbussiness_id,
		'D',
		OLD.masterbussiness_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterbussinesshistory
VALUES(
		myid,
		'D',
		OLD.masterbussiness_id,
		OLD.masterindustri_id,
		OLD.mastertipeusaha_id,
		OLD.masterjumlahkaryawan_id,
		OLD.masterbussiness_active,
		OLD.masterbussiness_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterbussiness_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterbussiness_after_insert
AFTER
INSERT ON masterbussiness FOR EACH ROW BEGIN
DECLARE keymasteruserbussiness CHAR(36);
DECLARE myid,
	myidbilling VARCHAR(255);
SET myid = UUID();
SET myidbilling =(
		SELECT UUID()
	);
INSERT INTO transbilling
VALUES(
		myidbilling,
		NEW.masterbussiness_id,
(
			SELECT Y_KeyBilling()
		),
(NULL),
(NULL),
(NULL),
		UNIX_TIMESTAMP() * 1000
	);
#INSERT INTO transbillingline VALUES(UUID(),myidbilling,NEW.masterbussiness_id,30,0,0,0);
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterbussiness_id,
		'masterbussiness',
		NEW.masterbussiness_id,
		'I',
		NEW.masterbussiness_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterbussinesshistory
VALUES(
		myid,
		'I',
		NEW.masterbussiness_id,
		NEW.masterindustri_id,
		NEW.mastertipeusaha_id,
		NEW.masterjumlahkaryawan_id,
		NEW.masterbussiness_active,
		NEW.masterbussiness_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteraccount
VALUES (
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '110'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'11000',
		'Kas',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '110'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'11010',
		'Kas Kecil',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '120'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'12000',
		'Bank',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '130'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'13000',
		'Piutang Usaha',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '130'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'13001',
		'Piutang Belum Ditagih',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '131'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'13100',
		'Piutang Giro',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '132'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'13200',
		'Piutang Karyawan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '132'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'13299',
		'Piutang Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '133'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'13300',
		'Cadangan Piutang Tak tertagih',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '140'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'14000',
		'Persediaan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '140'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'14010',
		'Persediaan Diterima Belum Ditagihkan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '141'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'14100',
		'Persediaan Barang Setengah Jadi',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '142'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'14200',
		'Persediaan Bahan Baku',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '150'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15000',
		'Pendapatan Yang Masih Harus Diterima',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '151'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15100',
		'Uang Muka Pembelian',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '151'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15110',
		'Uang Muka Pembelian Harta Tetap',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '152'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15200',
		'Beban Dibayar Dimuka',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '153'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15300',
		'PPh 21 Dibayar Dimuka',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '153'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15301',
		'PPh 22 Dibayar Dimuka',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '153'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15302',
		'PPh 23 Dibayar Dimuka',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '153'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15303',
		'PPh 25 Dibayar Dimuka',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '154'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15400',
		'PPN Masukan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '155'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15500',
		'Investasi Jangka Pendek',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '159'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'15900',
		'Aktiva Lancar Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '160'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'16000',
		'Tanah',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '161'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'16100',
		'Bangunan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '162'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'16200',
		'Kendaraan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '163'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'16300',
		'Mesin dan Peralatan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '164'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'16400',
		'Peralatan Kantor',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '169'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'16900',
		'Harta Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '171'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'17100',
		'Akumulasi Penyusutan Bangunan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '172'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'17200',
		'Akumulasi Penyusutan Kendaraan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '173'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'17300',
		'Akumulasi Penyusutan Mesin dan Peralatan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '174'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'17400',
		'Akumulasi Penyusutan Peralatan Kantor',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '179'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'17900',
		'Akumulasi Penyusutan Harta Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '180'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'18000',
		'Investasi Jangka Panjang',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '190'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'19000',
		'Goodwill',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '199'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'19900',
		'Aktiva Tidak Berwujud Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '210'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'21000',
		'Hutang Usaha',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '210'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'21001',
		'Hutang Belum Ditagih',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '211'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'21100',
		'Hutang Giro',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '212'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'21200',
		'Utang Gaji dan Upah',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '220'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'22000',
		'Pendapatan Diterima Dimuka',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '220'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'22010',
		'Persediaan Dikirim Belum Ditagihkan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '221'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'22100',
		'Uang Muka Penjualan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '222'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'22200',
		'Beban Yang Masih Harus Dibayar',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '230'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'23000',
		'Utang PPh 21',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '230'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'23001',
		'Utang PPh 22',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '230'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'23002',
		'Utang PPh 23',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '230'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'23003',
		'Utang PPh 29',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '230'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'23099',
		'Utang Pajak Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '231'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'23100',
		'PPN Keluaran',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '249'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'24900',
		'Utang Dividen',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '249'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'24999',
		'Utang Jangka Pendek Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '250'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'25000',
		'Utang Bank',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '299'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'29900',
		'Utang Jangka Panjang Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '310'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'31000',
		'Modal Disetor',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '320'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'32000',
		'Laba Ditahan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '330'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'33000',
		'Dividen',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '399'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'39900',
		'Laba Periode Berjalan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '410'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'41000',
		'Penjualan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '410'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'41001',
		'Pendapatan Belum Ditagih',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '420'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'42000',
		'Retur Penjualan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '430'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'43000',
		'Diskon Penjualan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '510'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'51000',
		'Harga Pokok Penjualan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '511'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'51100',
		'Beban Pengiriman',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '511'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'51101',
		'Beban Parkir',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '519'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'51900',
		'Penyesuaian Persediaan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '520'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'52000',
		'Retur Pembelian',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '530'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'53000',
		'Diskon Pembelian',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '540'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'54000',
		'Beban Atas Pembelian',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '550'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'55000',
		'Beban Tenaga Kerja Lansung',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '560'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'56000',
		'Beban Overhead Pabrik',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '610'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'61000',
		'Beban Iklan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '610'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'61001',
		'Beban Promosi',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '610'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'61002',
		'Beban Transportasi Sales',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '610'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'61003',
		'Beban Komunikasi Sales',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '610'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'61004',
		'Beban Komisi Sales',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '610'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'61099',
		'Beban Sales Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '620'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'62000',
		'Beban Upah dan Gaji',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '620'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'62001',
		'Beban Tunjangan Hari Raya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '620'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'62002',
		'Beban Tunjangan Makan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '620'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'62003',
		'Beban Tunjangan Transportasi',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '620'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'62004',
		'Beban BPJS Kesehatan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '620'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'62005',
		'Beban BPJS Ketenagakerjaan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '620'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'62099',
		'Beban Tenaga Kerja Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '630'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'63000',
		'Beban Air',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '630'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'63001',
		'Beban Listrik',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '630'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'63002',
		'Beban Telepon',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '630'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'63003',
		'Beban Internet',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '630'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'63004',
		'Beban Berlanggan Aplikasi',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '630'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'63005',
		'Beban Iuran',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '630'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'63099',
		'Beban Utilitas Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '640'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'64000',
		'Beban Pemeliharran Kendaraan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '640'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'64001',
		'Beban Pemeliharaan Bangunan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '640'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'64002',
		'Beban Pemeliharaan Mesin',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '640'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'64099',
		'Beban Pemeliharaan Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '650'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'65000',
		'Beban Sewa Kendaraan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '650'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'65001',
		'Beban Sewa Tanah dan Bangunan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '650'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'65002',
		'Beban Sewa Mesin',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '650'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'65099',
		'Beban Sewa Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '660'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'66000',
		'Beban Perijinan dan Lisensi',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '670'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'67100',
		'Beban Penyusutan Bangunan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '670'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'67200',
		'Beban Penyusutan Kendaraan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '670'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'67300',
		'Beban Penyusutan Mesin dan Peralatan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '670'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'67400',
		'Beban Penyusutan Peralatan Kantor',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '670'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'67500',
		'Beban Penyusutan Harta Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '680'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'68000',
		'Beban Piutang Tak tertagih',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '690'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'69000',
		'Beban Merchant Discount Rate ((NULL)DR)',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '690'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'69999',
		'Beban Operasional Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '710'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'71000',
		'Pendapatan Dividen',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '711'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'71100',
		'Pendapatan Bunga Bank',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '720'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'72000',
		'Laba ((NULL)ugi) Penjualan Aktiva Tetap',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '730'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'73000',
		'Selisih Kurs',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '740'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'74000',
		'Selisih Nilai Investasi',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '799'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'79900',
		'Pendapatan Non Operasional Lainnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '810'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'81000',
		'Beban Administrasi Bank',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '810'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'81001',
		'Beban Denda Bank',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '810'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'81002',
		'Beban Provisi dan Administrasi Bank atas Pinjaman',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '810'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'81003',
		'Beban Bunga',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '899'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'89900',
		'Beban Non Operasional Lainnnya',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '910'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'91000',
		'Pajak Penghasilan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '910'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'91001',
		'Pajak Penghasilan Ditangguhkan',
		0,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masteraccountsubclass_id
			FROM masteraccountsubclass
			WHERE masteraccountsubclass_description = '920'
		),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'92000',
		'Beban Pajak Lainnya',
		0,
		1,
		'system'
	);
INSERT INTO masterother
VALUES (
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'SUPER ADMIN',
		NULL,
		'11',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		1,
		1,
		0,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'PUSAT',
		NULL,
		'10',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'PCS',
		NULL,
		'7',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'PAK',
		NULL,
		'7',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'PPN',
		NULL,
		'8',
		NULL,
		NULL,
		NULL,
		NULL,
		11,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'NON PPN',
		NULL,
		'8',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'IDR',
		NULL,
		'9',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'UMUM',
		NULL,
		'1',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'Scrap',
		NULL,
		'4',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'Hilang',
		NULL,
		'4',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'Koreksi',
		NULL,
		'4',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'CASH',
		NULL,
		'6',
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		0,
		0,
		0,
		0,
		NULL,
		NULL,
		1,
		'system'
	),
	(
		UUID(),
		(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'30 HARI',
		NULL,
		'6',
		NULL,
		NULL,
		30,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		1,
		'system'
	);
INSERT INTO masterusercategoryrule
VALUES(
		UUID(),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterother_type = 11
				AND masterbussiness_id = NEW.masterbussiness_id
		),
		NEW.masterbussiness_id,
		'Semua'
	);
INSERT INTO price
VALUES(
		UUID(),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterother_type IN (9)
				AND masterbussiness_id = NEW.masterbussiness_id
				AND masterother_exchangevalue = 1
		),
		NEW.masterbussiness_id,
		'STANDARD',
		1,
		0,
(NULL),
(NULL),
		1,
		1,
		1,
		'system',
		1
	);
INSERT INTO masterwarehouse
VALUES(
		UUID(),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterbussiness_id = NEW.masterbussiness_id
				AND masterother_type IN (10)
		),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'PUSAT',
		1,
		'system'
	);
SET keymasteruserbussiness = UUID();
INSERT INTO masteruserbussiness
VALUES(
		keymasteruserbussiness,
(
			SELECT masteruser_id
			FROM masteruser
			where masteruser_username = NEW.masterbussiness_oleh
		),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterbussiness_id = NEW.masterbussiness_id
				AND masterother_type IN (11)
				AND masterother_issuperadmin = 1
		),
		NEW.masterbussiness_id,
		1
	);
INSERT INTO masteruserbussinessline
VALUES(
		UUID(),
		keymasteruserbussiness,
(
			SELECT masterwarehouse_id
			FROM masterwarehouse
			WHERE masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterbussiness_id = NEW.masterbussiness_id
				AND masterother_type IN (10)
		),
		NEW.masterbussiness_id,
		1
	);
INSERT INTO masterprefix
VALUES (
		UUID(),
		NEW.masterbussiness_id,
		'PQ',
		8,
		1,
		'PEMBELIAN',
		'Quote Pembelian'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'PO',
		8,
		2,
		'PEMBELIAN',
		'Order Pembelian'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'PD',
		8,
		3,
		'PEMBELIAN',
		'Delivery Pembelian'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'PI',
		8,
		4,
		'PEMBELIAN',
		'Invoice Pembelian'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'PR',
		8,
		5,
		'PEMBELIAN',
		'Retur Pembelian'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'BHU',
		8,
		6,
		'PEMBELIAN',
		'Bayar Hutang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'DPP',
		8,
		7,
		'PEMBELIAN',
		'Down Payment Payable'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'BGHC',
		8,
		8,
		'PEMBELIAN',
		'Giro Hutang Cair'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'PODP',
		8,
		9,
		'PEMBELIAN',
		'Down Payment Order Pembelian'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'PORF',
		8,
		10,
		'PEMBELIAN',
		'Refund Order Pembelian'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SAH',
		8,
		11,
		'SALDO AWAL',
		'Saldo Awal Hutang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SAB',
		8,
		12,
		'SALDO AWAL',
		'Saldo Awal Barang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SQ',
		8,
		13,
		'PENJUALAN',
		'Quote Penjualan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SO',
		8,
		14,
		'PENJUALAN',
		'Order Penjualan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SD',
		8,
		15,
		'PENJUALAN',
		'Delivery Penjualan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SI',
		8,
		16,
		'PENJUALAN',
		'Invoice Penjualan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SR',
		8,
		17,
		'PENJUALAN',
		'Retur Penjualan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'BPU',
		8,
		18,
		'PENJUALAN',
		'Bayar Piutang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'DPR',
		8,
		19,
		'PENJUALAN',
		'Down Payment RECEIVABLE'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'BGPC',
		8,
		20,
		'PENJUALAN',
		'Giro Piutang Cair'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SODP',
		8,
		21,
		'PENJUALAN',
		'Down Payment Order Penjualan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SORF',
		8,
		22,
		'PENJUALAN',
		'Refund Order Penjualan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SAP',
		8,
		23,
		'SALDO AWAL',
		'Saldo Awal Piutang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ADJ',
		8,
		24,
		'INVENTORY',
		'Stok Adjustment'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ASMQ',
		8,
		25,
		'PRODUCTION',
		'Quote Assembly'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ASMO',
		8,
		26,
		'PRODUCTION',
		'Order Assembly'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ASM',
		8,
		27,
		'PRODUCTION',
		'Assembly'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'DSMQ',
		8,
		28,
		'PRODUCTION',
		'Quote Dissasembly'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'DSMO',
		8,
		29,
		'PRODUCTION',
		'Order Dissasembly'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'DSM',
		8,
		30,
		'PRODUCTION',
		'Dissasembly'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'OUQ',
		8,
		31,
		'PRODUCTION',
		'Quote Transfer Gudang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'OUO',
		8,
		32,
		'PRODUCTION',
		'Order Transfer Gudang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'OUT',
		8,
		33,
		'INVENTORY',
		'Transfer Gudang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ATB',
		8,
		34,
		'AKTIVA TETAP',
		'Aktiva Tetap Beli'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ATS',
		8,
		35,
		'AKTIVA TETAP',
		'Aktiva Tetap Susut'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ATP',
		8,
		36,
		'AKTIVA TETAP',
		'Aktiva Tetap Perawatan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ATD',
		8,
		37,
		'AKTIVA TETAP',
		'Aktiva Tetap Di Sewakan'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ATJ',
		8,
		38,
		'AKTIVA TETAP',
		'Aktiva Tetap Jual'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'GEN',
		8,
		39,
		'JURNAL',
		'Jurnal Umum'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'REVE',
		8,
		40,
		'JURNAL',
		'Revenue'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'EXPE',
		8,
		41,
		'JURNAL',
		'Expense'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'PB',
		8,
		42,
		'JURNAL',
		'Setoran'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SOP',
		8,
		43,
		'INVENTORY',
		'Stok Opnam'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'PIP',
		8,
		44,
		'PEMBELIAN',
		'Pembayaran Pembelian Tunai Langsung'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'SIP',
		8,
		45,
		'PENJUALAN',
		'Pembayaran Penjualan Tunai Langsung'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'UNPA',
		8,
		46,
		'PEMBELIAN',
		'Unapplied Hutang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'UNRE',
		8,
		47,
		'PENJUALAN',
		'Unapplied Piutang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'RFP',
		8,
		48,
		'PEMBELIAN',
		'Refund Paybale Payment'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'RFR',
		8,
		49,
		'PEMBELIAN',
		'Refund Receivable Payment'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'WHU',
		8,
		50,
		'PEMBELIAN',
		'Write Off Hutang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'WPU',
		8,
		51,
		'PENJUALAN',
		'Write Off Piutang'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ASMMQ',
		8,
		52,
		'PRODUCTION',
		'Assembly Massal Quote'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ASMMO',
		8,
		53,
		'PRODUCTION',
		'Assembly Massal Order'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'ASMM',
		8,
		54,
		'PRODUCTION',
		'Assembly Massal'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'QADJ',
		8,
		55,
		'INVENTORY',
		'Quote Stok Adjustment'
	),
	(
		UUID(),
		NEW.masterbussiness_id,
		'OADJ',
		8,
		56,
		'INVENTORY',
		'Order Stok Adjustment'
	);
INSERT INTO masteritemtype
VALUES(
		UUID(),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'TRADING',
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		1,
		'system'
	);
INSERT INTO masteritemtype
VALUES(
		UUID(),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'SERVICES',
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		1,
		'system'
	);
INSERT INTO masterpartnercategory
VALUES(
		UUID(),
(NULL),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'KATEGORI PEMASOK',
		1,
		0,
		0,
		1,
		'system'
	);
INSERT INTO masterpartnercategory
VALUES(
		UUID(),
(NULL),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'KATEGORI PELANGGAN',
		0,
		1,
		0,
		1,
		'system'
	);
INSERT INTO masterpartnercategory
VALUES(
		UUID(),
(NULL),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'KATEGORI EMPLOYEE',
		0,
		0,
		1,
		1,
		'system'
	);
INSERT INTO masterpartner(
		masterpartner_id,
		masterpartnercategory_id,
		mastercreditterm_id,
		masterexchange_id,
		masterplatform_id,
		masterbussiness_id,
		masterpartner_description,
		masterpartner_alias,
		masterpartner_limittransaksi,
		masterpartner_oleh,
		masterpartner_active
	)
VALUES(
		UUID(),
(
			SELECT masterpartnercategory_id
			FROM masterpartnercategory
			WHERE masterpartnercategory_description = 'KATEGORI PEMASOK'
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterother_description = '30 HARI'
				AND masterother_type = 6
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterother_description = 'IDR'
				AND masterother_type = 9
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'S000001',
		'UMUM',
		100000000,
		'system',
		1
	);
INSERT INTO masterpartner(
		masterpartner_id,
		masterpartnercategory_id,
		mastercreditterm_id,
		masterexchange_id,
		masterplatform_id,
		masterbussiness_id,
		masterpartner_description,
		masterpartner_alias,
		masterpartner_limittransaksi,
		masterpartner_oleh,
		masterpartner_active
	)
VALUES(
		UUID(),
(
			SELECT masterpartnercategory_id
			FROM masterpartnercategory
			WHERE masterpartnercategory_description = 'KATEGORI PELANGGAN'
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterother_description = '30 HARI'
				AND masterother_type = 6
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterother_description = 'IDR'
				AND masterother_type = 9
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'C000001',
		'UMUM',
		100000000,
		'system',
		1
	);
INSERT INTO masterpartner(
		masterpartner_id,
		masterpartnercategory_id,
		mastercreditterm_id,
		masterexchange_id,
		masteruser_id,
		masterplatform_id,
		masterbussiness_id,
		masterpartner_description,
		masterpartner_alias,
		masterpartner_limittransaksi,
		masterpartner_oleh,
		masterpartner_active
	)
VALUES(
		UUID(),
(
			SELECT masterpartnercategory_id
			FROM masterpartnercategory
			WHERE masterpartnercategory_description = 'KATEGORI EMPLOYEE'
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterother_description = '30 HARI'
				AND masterother_type = 6
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masterother_id
			FROM masterother
			WHERE masterother_description = 'IDR'
				AND masterother_type = 9
				AND masterbussiness_id = NEW.masterbussiness_id
		),
(
			SELECT masteruser_id
			FROM masteruser
			WHERE masteruser_username = NEW.masterbussiness_oleh
		),
(
			SELECT masterplatform_id
			FROM masterplatform
			WHERE masterplatform_description = 'gogabook system'
		),
		NEW.masterbussiness_id,
		'E000001',
		'UMUM',
		100000000,
		'system',
		1
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterbussiness_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterbussiness_after_update
AFTER
UPDATE ON masterbussiness FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterbussiness_id,
		'masterbussiness',
		NEW.masterbussiness_id,
		'U',
		NEW.masterbussiness_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterbussinesshistory
VALUES(
		myid,
		'U',
		NEW.masterbussiness_id,
		NEW.masterindustri_id,
		NEW.mastertipeusaha_id,
		NEW.masterjumlahkaryawan_id,
		NEW.masterbussiness_active,
		NEW.masterbussiness_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterbussiness_before_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterbussiness_before_delete BEFORE DELETE ON masterbussiness FOR EACH ROW BEGIN
DELETE FROM trans
WHERE masterbussiness_id = OLD.masterbussiness_id;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterfixassetcategory_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterfixassetcategory_after_delete
AFTER DELETE ON masterfixassetcategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterfixassetcategory_id,
		'MASTER KATEGORI ASSET',
		'masterfixassetcategory',
		'menghapus kategori asset tetap',
		OLD.masterbussiness_id,
		'D',
		OLD.masterfixassetcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterfixassetcategoryhistory
VALUES(
		myid,
		'D',
		OLD.masterfixassetcategory_id,
		OLD.masterfixassetcategory_accountasset,
		OLD.masterfixassetcategory_accountexpense,
		OLD.masterfixassetcategory_accountaccumulation,
		OLD.masterfixassetcategory_accountkeuntungan,
		OLD.masterfixassetcategory_accountkerugian,
		OLD.masterfixassetcategory_accountperawatan,
		OLD.masterfixassetcategory_accountmasukan,
		OLD.masterfixassetcategory_accountkeluaran,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masterfixassetcategory_description,
		OLD.masterfixassetcategory_active,
		OLD.masterfixassetcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterfixassetcategory_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterfixassetcategory_after_insert
AFTER
INSERT ON masterfixassetcategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterfixassetcategory_id,
		'MASTER KATEGORI ASSET',
		'masterfixassetcategory',
		'menambahkan kategori asset tetap',
		NEW.masterbussiness_id,
		'I',
		NEW.masterfixassetcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterfixassetcategoryhistory
VALUES(
		myid,
		'I',
		NEW.masterfixassetcategory_id,
		NEW.masterfixassetcategory_accountasset,
		NEW.masterfixassetcategory_accountexpense,
		NEW.masterfixassetcategory_accountaccumulation,
		NEW.masterfixassetcategory_accountkeuntungan,
		NEW.masterfixassetcategory_accountkerugian,
		NEW.masterfixassetcategory_accountperawatan,
		NEW.masterfixassetcategory_accountmasukan,
		NEW.masterfixassetcategory_accountkeluaran,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterfixassetcategory_description,
		NEW.masterfixassetcategory_active,
		NEW.masterfixassetcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterfixassetcategory_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterfixassetcategory_after_update
AFTER
UPDATE ON masterfixassetcategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterfixassetcategory_id,
		'MASTER KATEGORI ASSET',
		'masterfixassetcategory',
		'merubah kategori asset tetap',
		NEW.masterbussiness_id,
		'U',
		NEW.masterfixassetcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterfixassetcategoryhistory
VALUES(
		myid,
		'U',
		NEW.masterfixassetcategory_id,
		NEW.masterfixassetcategory_accountasset,
		NEW.masterfixassetcategory_accountexpense,
		NEW.masterfixassetcategory_accountaccumulation,
		NEW.masterfixassetcategory_accountkeuntungan,
		NEW.masterfixassetcategory_accountkerugian,
		NEW.masterfixassetcategory_accountperawatan,
		NEW.masterfixassetcategory_accountmasukan,
		NEW.masterfixassetcategory_accountkeluaran,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterfixassetcategory_description,
		NEW.masterfixassetcategory_active,
		NEW.masterfixassetcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterfixassetcategory_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterfixassetcategory_before_insert BEFORE
INSERT ON masterfixassetcategory FOR EACH ROW BEGIN IF NEW.masterfixassetcategory_accountasset IS NULL THEN
SET NEW.masterfixassetcategory_accountasset =(
		SELECT accdefaultasset_id
		FROM generalsetting
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masterfixassetcategory_accountexpense IS NULL THEN
SET NEW.masterfixassetcategory_accountexpense =(
		SELECT accdefaultassetexpense_id
		FROM generalsetting
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masterfixassetcategory_accountaccumulation IS NULL THEN
SET NEW.masterfixassetcategory_accountaccumulation =(
		SELECT accdefaultassetakumulasi_id
		FROM generalsetting
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masterfixassetcategory_accountkeuntungan IS NULL THEN
SET NEW.masterfixassetcategory_accountkeuntungan =(
		SELECT accdefaultassetkeuntungan_id
		FROM generalsetting
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masterfixassetcategory_accountkerugian IS NULL THEN
SET NEW.masterfixassetcategory_accountkerugian =(
		SELECT accdefaultassetkerugian_id
		FROM generalsetting
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masterfixassetcategory_accountperawatan IS NULL THEN
SET NEW.masterfixassetcategory_accountperawatan =(
		SELECT accdefaultassetperawatan_id
		FROM generalsetting
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masterfixassetcategory_accountmasukan IS NULL THEN
SET NEW.masterfixassetcategory_accountmasukan =(
		SELECT accdefaultassetppnmasuk
		FROM generalsetting
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masterfixassetcategory_accountkeluaran IS NULL THEN
SET NEW.masterfixassetcategory_accountkeluaran =(
		SELECT accdefaultassetppnkeluar
		FROM generalsetting
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterfixasset_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterfixasset_after_delete
AFTER DELETE ON masterfixasset FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterfixasset_id,
		'MASTER ASSET',
		'masterfixasset',
		'menghapus asset tetap',
		OLD.masterbussiness_id,
		'D',
		OLD.masterfixasset_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterfixassethistory
VALUES(
		myid,
		'D',
		OLD.masterfixasset_id,
		OLD.masterfixassetcategory_id,
		OLD.masterpartner_id,
		OLD.masterpartnerjual_id,
		OLD.masterstore_id,
		OLD.mastertax_id,
		OLD.mastertaxjual_id,
		OLD.mastercreditterm_id,
		OLD.mastercredittermjual_id,
		OLD.masteraccountbeli_id,
		OLD.masteraccountjual_id,
		OLD.trans_id,
		OLD.transjual_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masterfixasset_description,
		OLD.masterfixasset_modepenyusutan,
		OLD.masterfixasset_serialno,
		OLD.masterfixasset_tanggalperolehan,
		OLD.masterfixasset_tanggalmulaipenyusutan,
		OLD.masterfixasset_tanggalterjual,
		OLD.masterfixasset_taxrate,
		OLD.masterfixasset_taxratejual,
		OLD.masterfixasset_jangkawaktupenyusutan,
		OLD.masterfixasset_ratepenyusutan,
		OLD.masterfixasset_perolehanvalue,
		OLD.masterfixasset_susutvalue,
		OLD.masterfixasset_taxvalue,
		OLD.masterfixasset_taxvaluejual,
		OLD.masterfixasset_salvagevalue,
		OLD.masterfixasset_active,
		OLD.masterfixasset_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterfixasset_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterfixasset_after_insert
AFTER
INSERT ON masterfixasset FOR EACH ROW BEGIN
DECLARE qCTR BIGINT;
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterfixasset_id,
		'MASTER ASSET',
		'masterfixasset',
		'menambahkan asset tetap',
		NEW.masterbussiness_id,
		'I',
		NEW.masterfixasset_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterfixassethistory
VALUES(
		myid,
		'I',
		NEW.masterfixasset_id,
		NEW.masterfixassetcategory_id,
		NEW.masterpartner_id,
		NEW.masterpartnerjual_id,
		NEW.masterstore_id,
		NEW.mastertax_id,
		NEW.mastertaxjual_id,
		NEW.mastercreditterm_id,
		NEW.mastercredittermjual_id,
		NEW.masteraccountbeli_id,
		NEW.masteraccountjual_id,
		NEW.trans_id,
		NEW.transjual_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterfixasset_description,
		NEW.masterfixasset_modepenyusutan,
		NEW.masterfixasset_serialno,
		NEW.masterfixasset_tanggalperolehan,
		NEW.masterfixasset_tanggalmulaipenyusutan,
		NEW.masterfixasset_tanggalterjual,
		NEW.masterfixasset_taxrate,
		NEW.masterfixasset_taxratejual,
		NEW.masterfixasset_jangkawaktupenyusutan,
		NEW.masterfixasset_ratepenyusutan,
		NEW.masterfixasset_perolehanvalue,
		NEW.masterfixasset_susutvalue,
		NEW.masterfixasset_taxvalue,
		NEW.masterfixasset_taxvaluejual,
		NEW.masterfixasset_salvagevalue,
		NEW.masterfixasset_active,
		NEW.masterfixasset_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
IF NOT NEW.masterfixasset_perolehanvalue IS NULL THEN IF NOT NEW.masterfixasset_tanggalmulaipenyusutan IS NULL THEN
SET qCTR = 0;
WHILE qCTR <=(NEW.masterfixasset_jangkawaktupenyusutan * 12) -1 DO IF (NEW.masterfixasset_modepenyusutan = '1') THEN
INSERT INTO masterfixassetsusut
VALUES(
		UUID(),
		NEW.masterfixasset_id,
(NULL),
		NEW.masterbussiness_id,
(
			SELECT `Y_Key`(
					0,
					NEW.masterbussiness_id,
					35,
					UNIX_TIMESTAMP(
						LAST_DAY(
							FROM_UNIXTIME(
								UNIX_TIMESTAMP(
									LAST_DAY(
										FROM_UNIXTIME(
											NEW.masterfixasset_tanggalmulaipenyusutan DIV 1000
										) + INTERVAL qCTR MONTH
									)
								)
							)
						)
					) * 1000,
					"N",
					0
				)
		),
		35,
		UNIX_TIMESTAMP(
			LAST_DAY(
				FROM_UNIXTIME(
					NEW.masterfixasset_tanggalmulaipenyusutan DIV 1000
				) + INTERVAL qCTR MONTH
			)
		) * 1000,
		NEW.masterfixasset_susutvalue,
		1,
		NEW.masterfixasset_oleh
	);
END IF;
SET qCTR = qCTR + 1;
END WHILE;
END IF;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterfixasset_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterfixasset_after_update
AFTER
UPDATE ON masterfixasset FOR EACH ROW BEGIN
DECLARE qCTR BIGINT;
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterfixasset_id,
		'MASTER ASSET',
		'masterfixasset',
		'merubah asset tetap',
		NEW.masterbussiness_id,
		'U',
		NEW.masterfixasset_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterfixassethistory
VALUES(
		myid,
		'U',
		NEW.masterfixasset_id,
		NEW.masterfixassetcategory_id,
		NEW.masterpartner_id,
		NEW.masterpartnerjual_id,
		NEW.masterstore_id,
		NEW.mastertax_id,
		NEW.mastertaxjual_id,
		NEW.mastercreditterm_id,
		NEW.mastercredittermjual_id,
		NEW.masteraccountbeli_id,
		NEW.masteraccountjual_id,
		NEW.trans_id,
		NEW.transjual_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterfixasset_description,
		NEW.masterfixasset_modepenyusutan,
		NEW.masterfixasset_serialno,
		NEW.masterfixasset_tanggalperolehan,
		NEW.masterfixasset_tanggalmulaipenyusutan,
		NEW.masterfixasset_tanggalterjual,
		NEW.masterfixasset_taxrate,
		NEW.masterfixasset_taxratejual,
		NEW.masterfixasset_jangkawaktupenyusutan,
		NEW.masterfixasset_ratepenyusutan,
		NEW.masterfixasset_perolehanvalue,
		NEW.masterfixasset_susutvalue,
		NEW.masterfixasset_taxvalue,
		NEW.masterfixasset_taxvaluejual,
		NEW.masterfixasset_salvagevalue,
		NEW.masterfixasset_active,
		NEW.masterfixasset_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
IF (COALESCE(OLD.masterfixasset_perolehanvalue, 0) = 0)
AND (COALESCE(NEW.masterfixasset_perolehanvalue, 0) > 0) THEN DELETE H.*
FROM masterfixassetsusut s,
	trans h
WHERE s.trans_id = h.trans_id
	AND s.masterfixasset_id = NEW.masterfixasset_id;
DELETE FROM masterfixassetsusut
WHERE masterfixasset_id = NEW.masterfixasset_id;
IF NOT NEW.masterfixasset_tanggalmulaipenyusutan IS NULL THEN
SET qCTR = 0;
WHILE qCTR <=(NEW.masterfixasset_jangkawaktupenyusutan * 12) -1 DO IF (NEW.masterfixasset_modepenyusutan = '1') THEN
INSERT INTO masterfixassetsusut
VALUES(
		UUID(),
		NEW.masterfixasset_id,
(NULL),
		NEW.masterbussiness_id,
(
			SELECT `Y_Key`(
					0,
					NEW.masterbussiness_id,
					35,
					UNIX_TIMESTAMP(
						LAST_DAY(
							FROM_UNIXTIME(
								UNIX_TIMESTAMP(
									LAST_DAY(
										FROM_UNIXTIME(
											NEW.masterfixasset_tanggalmulaipenyusutan DIV 1000
										) + INTERVAL qCTR MONTH
									)
								)
							)
						)
					) * 1000,
					"N",
					0
				)
		),
		35,
		UNIX_TIMESTAMP(
			LAST_DAY(
				FROM_UNIXTIME(
					NEW.masterfixasset_tanggalmulaipenyusutan DIV 1000
				) + INTERVAL qCTR MONTH
			)
		) * 1000,
		NEW.masterfixasset_susutvalue,
		1,
		NEW.masterfixasset_oleh
	);
END IF;
SET qCTR = qCTR + 1;
END WHILE;
END IF;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterfixasset_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterfixasset_before_insert BEFORE
INSERT ON masterfixasset FOR EACH ROW BEGIN
SET NEW.masterfixasset_taxrate =(
		SELECT masterother_taxrate
		FROM masterother
		WHERE masterother_id = NEW.mastertax_id
	);
SET NEW.masterfixasset_ratepenyusutan = 100 / NEW.masterfixasset_jangkawaktupenyusutan;
IF (NEW.masterfixasset_modepenyusutan = '0')
OR(NEW.masterfixasset_modepenyusutan = '1') THEN
SET NEW.masterfixasset_susutvalue = NEW.masterfixasset_perolehanvalue * NEW.masterfixasset_ratepenyusutan / 100 / 12;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritembilling_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritembilling_before_insert BEFORE
INSERT ON masteritembilling FOR EACH ROW BEGIN
SET NEW.masteritembilling_waktu = UNIX_TIMESTAMP() * 1000;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritemcategory_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritemcategory_after_delete
AFTER DELETE ON masteritemcategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masteritemcategory_id,
		'MASTER KATEGORI ITEM',
		'masteritemcategory',
		'menghapus kategori produk',
		OLD.masteritemcategory_description,
		OLD.masterbussiness_id,
		'D',
		OLD.masteritemcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemcategoryhistory
VALUES(
		myid,
		'D',
		OLD.masteritemcategory_id,
		OLD.masteritemtype_id,
		OLD.masteritemcategory_accountpersediaan,
		OLD.masteritemcategory_accounthpp,
		OLD.masteritemcategory_accountsales,
		OLD.masteritemcategory_accountsalesretur,
		OLD.masteritemcategory_accountsalesdisc,
		OLD.masteritemcategory_accountvatmasuk,
		OLD.masteritemcategory_accountvatkeluar,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masteritemcategory_description,
		OLD.masteritemcategory_active,
		OLD.masteritemcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritemcategory_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritemcategory_after_insert
AFTER
INSERT ON masteritemcategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masteritemcategory_id,
		'MASTER KATEGORI ITEM',
		'masteritemcategory',
		'menambahkan kategori produk',
		NEW.masteritemcategory_description,
		NEW.masterbussiness_id,
		'I',
		NEW.masteritemcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemcategoryhistory
VALUES(
		myid,
		'I',
		NEW.masteritemcategory_id,
		NEW.masteritemtype_id,
		NEW.masteritemcategory_accountpersediaan,
		NEW.masteritemcategory_accounthpp,
		NEW.masteritemcategory_accountsales,
		NEW.masteritemcategory_accountsalesretur,
		NEW.masteritemcategory_accountsalesdisc,
		NEW.masteritemcategory_accountvatmasuk,
		NEW.masteritemcategory_accountvatkeluar,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masteritemcategory_description,
		NEW.masteritemcategory_active,
		NEW.masteritemcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritemcategory_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritemcategory_after_update
AFTER
UPDATE ON masteritemcategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masteritemcategory_id,
		'MASTER KATEGORI ITEM',
		'masteritemcategory',
		'merubah kategori produk',
		NEW.masteritemcategory_description,
		NEW.masterbussiness_id,
		'U',
		NEW.masteritemcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemcategoryhistory
VALUES(
		myid,
		'U',
		NEW.masteritemcategory_id,
		NEW.masteritemtype_id,
		NEW.masteritemcategory_accountpersediaan,
		NEW.masteritemcategory_accounthpp,
		NEW.masteritemcategory_accountsales,
		NEW.masteritemcategory_accountsalesretur,
		NEW.masteritemcategory_accountsalesdisc,
		NEW.masteritemcategory_accountvatmasuk,
		NEW.masteritemcategory_accountvatkeluar,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masteritemcategory_description,
		NEW.masteritemcategory_active,
		NEW.masteritemcategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritemcategory_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritemcategory_before_insert BEFORE
INSERT ON masteritemcategory FOR EACH ROW BEGIN IF NEW.masteritemcategory_accountpersediaan IS NULL THEN
SET NEW.masteritemcategory_accountpersediaan =(
		SELECT generalsettingdefault_persediaan_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masteritemcategory_accounthpp IS NULL THEN
SET NEW.masteritemcategory_accounthpp =(
		SELECT generalsettingdefault_hpp_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masteritemcategory_accountsales IS NULL THEN
SET NEW.masteritemcategory_accountsales =(
		SELECT generalsettingdefault_penjualan_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masteritemcategory_accountsalesretur IS NULL THEN
SET NEW.masteritemcategory_accountsalesretur =(
		SELECT generalsettingdefault_returpenjualan_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masteritemcategory_accountsalesdisc IS NULL THEN
SET NEW.masteritemcategory_accountsalesdisc =(
		SELECT generalsettingdefault_discpenjualan_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masteritemcategory_accountvatmasuk IS NULL THEN
SET NEW.masteritemcategory_accountvatmasuk =(
		SELECT generalsettingdefault_vatmasuk_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masteritemcategory_accountvatkeluar IS NULL THEN
SET NEW.masteritemcategory_accountvatkeluar =(
		SELECT generalsettingdefault_vatkeluar_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritemtype_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritemtype_after_delete
AFTER DELETE ON masteritemtype FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masteritemtype_id,
		'MASTER TIPE ITEM',
		'masteritemtype',
		'menghapus tipe produk',
		OLD.masteritemtype_description,
		OLD.masterbussiness_id,
		'D',
		OLD.masteritemtype_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemtypehistory
VALUES(
		myid,
		'D',
		OLD.masteritemtype_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masteritemtype_description,
		OLD.masteritemtype_isstock,
		OLD.masteritemtype_issold,
		OLD.masteritemtype_ispurchase,
		OLD.masteritemtype_isassembly,
		OLD.masteritemtype_isdissassembly,
		OLD.masteritemtype_istransfer,
		OLD.masteritemtype_isbeginbalance,
		OLD.masteritemtype_isadjustment,
		OLD.masteritemtype_isformula,
		OLD.masteritemtype_iscomponent,
		OLD.masteritemtype_seconduom,
		OLD.masteritemtype_isautoassembly,
		OLD.masteritemtype_ismodifier,
		OLD.masteritemtype_active,
		OLD.masteritemtype_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritemtype_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritemtype_after_insert
AFTER
INSERT ON masteritemtype FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masteritemtype_id,
		'MASTER TIPE ITEM',
		'masteritemtype',
		'menambahkan tipe produk',
		NEW.masteritemtype_description,
		NEW.masterbussiness_id,
		'I',
		NEW.masteritemtype_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemtypehistory
VALUES(
		myid,
		'I',
		NEW.masteritemtype_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masteritemtype_description,
		NEW.masteritemtype_isstock,
		NEW.masteritemtype_issold,
		NEW.masteritemtype_ispurchase,
		NEW.masteritemtype_isassembly,
		NEW.masteritemtype_isdissassembly,
		NEW.masteritemtype_istransfer,
		NEW.masteritemtype_isbeginbalance,
		NEW.masteritemtype_isadjustment,
		NEW.masteritemtype_isformula,
		NEW.masteritemtype_iscomponent,
		NEW.masteritemtype_seconduom,
		NEW.masteritemtype_isautoassembly,
		NEW.masteritemtype_ismodifier,
		NEW.masteritemtype_active,
		NEW.masteritemtype_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritemtype_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritemtype_after_update
AFTER
UPDATE ON masteritemtype FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masteritemtype_id,
		'MASTER TIPE ITEM',
		'masteritemtype',
		'merubah tipe produk',
		NEW.masteritemtype_description,
		NEW.masterbussiness_id,
		'U',
		NEW.masteritemtype_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemtypehistory
VALUES(
		myid,
		'U',
		NEW.masteritemtype_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masteritemtype_description,
		NEW.masteritemtype_isstock,
		NEW.masteritemtype_issold,
		NEW.masteritemtype_ispurchase,
		NEW.masteritemtype_isassembly,
		NEW.masteritemtype_isdissassembly,
		NEW.masteritemtype_istransfer,
		NEW.masteritemtype_isbeginbalance,
		NEW.masteritemtype_isadjustment,
		NEW.masteritemtype_isformula,
		NEW.masteritemtype_iscomponent,
		NEW.masteritemtype_seconduom,
		NEW.masteritemtype_isautoassembly,
		NEW.masteritemtype_ismodifier,
		NEW.masteritemtype_active,
		NEW.masteritemtype_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritem_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritem_after_delete
AFTER DELETE ON masteritem FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
IF COALESCE(OLD.masteritemparent_id, 0) = 0 THEN
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masteritem_id,
		'MASTER ITEM',
		'masteritem',
		'menghapus produk',
		CONCAT(
			OLD.masteritem_description,
			" - ",
			OLD.masteritem_alias
		),
		OLD.masterbussiness_id,
		'D',
		OLD.masteritem_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemhistory
VALUES(
		myid,
		'D',
		OLD.masteritem_id,
		OLD.masteritemparent_id,
		OLD.masteritemcategory_id,
		OLD.mastertax_id,
		OLD.masteruom_id,
		OLD.masterbrand_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masteritem_description,
		OLD.masteritem_alias,
		OLD.masteritem_catatan,
		OLD.masteritem_barcode,
		OLD.masteritem_variantparent,
		OLD.masteritem_variantcontent,
		OLD.masteritem_isserialbatch,
		OLD.masteritem_istara,
		OLD.masteritem_isvariant,
		OLD.masteritem_stockmin,
		OLD.masteritem_stockmax,
		OLD.masteritem_qtysellmin,
		OLD.masteritem_qtysellmax,
		OLD.masteritem_priceinputdefault,
		OLD.masteritem_active,
		OLD.masteritem_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritem_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritem_after_insert
AFTER
INSERT ON masteritem FOR EACH ROW BEGIN
DECLARE idmasteritemuom CHAR(36);
DECLARE myid VARCHAR(255);
SET myid = UUID();
SET idmasteritemuom =(
		SELECT UUID()
	);
IF COALESCE(NEW.masteritemparent_id, 0) = 0 THEN
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masteritem_id,
		'MASTER ITEM',
		'masteritem',
		'menambahkan produk',
		CONCAT(
			NEW.masteritem_description,
			" - ",
			NEW.masteritem_alias
		),
		NEW.masterbussiness_id,
		'I',
		NEW.masteritem_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemhistory
VALUES(
		myid,
		'I',
		NEW.masteritem_id,
		NEW.masteritemparent_id,
		NEW.masteritemcategory_id,
		NEW.mastertax_id,
		NEW.masteruom_id,
		NEW.masterbrand_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masteritem_description,
		NEW.masteritem_alias,
		NEW.masteritem_catatan,
		NEW.masteritem_barcode,
		NEW.masteritem_variantparent,
		NEW.masteritem_variantcontent,
		NEW.masteritem_isserialbatch,
		NEW.masteritem_istara,
		NEW.masteritem_isvariant,
		NEW.masteritem_stockmin,
		NEW.masteritem_stockmax,
		NEW.masteritem_qtysellmin,
		NEW.masteritem_qtysellmax,
		NEW.masteritem_priceinputdefault,
		NEW.masteritem_active,
		NEW.masteritem_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END IF;
INSERT INTO masteritemuom(
		masteritemuom_id,
		masteritem_id,
		masteruom_id,
		masterbussiness_id,
		masteritemuom_barcode,
		masteritemuom_convertionqty,
		masteritemuom_oleh
	)
VALUES(
		idmasteritemuom,
		NEW.masteritem_id,
		NEW.masteruom_id,
		NEW.masterbussiness_id,
		NEW.masteritem_barcode,
		1,
		NEW.masteritem_oleh
	);
INSERT INTO priceline(
		priceline_id,
		price_id,
		masteritemuom_id,
		masterbussiness_id,
		priceline_convertionqty,
		priceline_qtyinput,
		priceline_valueinput,
		priceline_oleh,
		priceline_active
	)
VALUES(
		UUID(),
(
			SELECT price_id
			FROM price
			WHERE masterbussiness_id = NEW.masterbussiness_id
				AND price_default = TRUE
		),
		idmasteritemuom,
		NEW.masterbussiness_id,
		1,
		1,
		NEW.masteritem_priceinputdefault,
		NEW.masteritem_oleh,
		TRUE
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritem_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritem_after_update
AFTER
UPDATE ON masteritem FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
IF COALESCE(NEW.masteritemparent_id, 0) = 0 THEN
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masteritem_id,
		'MASTER ITEM',
		'masteritem',
		'merubah produk',
		CONCAT(
			NEW.masteritem_description,
			" - ",
			NEW.masteritem_alias
		),
		NEW.masterbussiness_id,
		'U',
		NEW.masteritem_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masteritemhistory
VALUES(
		myid,
		'U',
		NEW.masteritem_id,
		NEW.masteritemparent_id,
		NEW.masteritemcategory_id,
		NEW.mastertax_id,
		NEW.masteruom_id,
		NEW.masterbrand_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masteritem_description,
		NEW.masteritem_alias,
		NEW.masteritem_catatan,
		NEW.masteritem_barcode,
		NEW.masteritem_variantparent,
		NEW.masteritem_variantcontent,
		NEW.masteritem_isserialbatch,
		NEW.masteritem_istara,
		NEW.masteritem_isvariant,
		NEW.masteritem_stockmin,
		NEW.masteritem_stockmax,
		NEW.masteritem_qtysellmin,
		NEW.masteritem_qtysellmax,
		NEW.masteritem_priceinputdefault,
		NEW.masteritem_active,
		NEW.masteritem_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masteritem_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masteritem_before_insert BEFORE
INSERT ON masteritem FOR EACH ROW BEGIN IF NEW.masteritemparent_id IS NULL THEN IF NEW.masteritem_barcode IS NULL THEN
SET NEW.masteritem_barcode =(ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000));
END IF;
END IF;
IF NEW.masteritemcategory_id IS NULL THEN
SET NEW.masteritemcategory_id =(
		SELECT generalsettingdefault_masteritemcategory_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.mastertax_id IS NULL THEN
SET NEW.mastertax_id =(
		SELECT generalsettingdefault_mastertax_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masteruom_id IS NULL THEN
SET NEW.masteruom_id =(
		SELECT COALESCE(generalsettingdefault_masteruom_id,(NULL))
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterother_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterother_after_delete
AFTER DELETE ON masterother FOR EACH ROW BEGIN
DECLARE nmalias,
	nmentity,
	myid VARCHAR(255);
SET myid = UUID();
IF OLD.masterother_type = 1 THEN
SET nmalias = 'menghapus brand';
SET nmentity = 'MASTER BRAND';
ELSEIF OLD.masterother_type = 2 THEN
SET nmalias = 'menghapus kemasan';
SET nmentity = 'MASTER KEMASAN';
ELSEIF OLD.masterother_type = 3 THEN
SET nmalias = 'menghapus expedisi';
SET nmentity = 'MASTER EXPEDISI';
ELSEIF OLD.masterother_type = 4 THEN
SET nmalias = 'menghapus alasan';
SET nmentity = 'MASTER ALASAN';
ELSEIF OLD.masterother_type = 5 THEN
SET nmalias = 'menghapus jabatan';
SET nmentity = 'MASTER JABATAN';
ELSEIF OLD.masterother_type = 6 THEN
SET nmalias = 'menghapus termin';
SET nmentity = 'MASTER JABATAN';
ELSEIF OLD.masterother_type = 7 THEN
SET nmalias = 'menghapus satuan';
SET nmentity = 'MASTER SATUAN UKUR';
ELSEIF OLD.masterother_type = 8 THEN
SET nmalias = 'menghapus pajak';
SET nmentity = 'MASTER PAJAK';
ELSEIF OLD.masterother_type = 9 THEN
SET nmalias = 'menghapus mata uang';
SET nmentity = 'MASTER MATA UANG';
ELSEIF OLD.masterother_type = 10 THEN
SET nmalias = 'menghapus toko ';
SET nmentity = 'MASTER STORE';
ELSEIF OLD.masterother_type = 11 THEN
SET nmalias = 'menghapus kategori user';
SET nmentity = 'MASTER KATEGORI PENGGUNA';
END IF;
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterother_id,
		nmentity,
		'masterother',
		nmalias,
		OLD.masterother_description,
		OLD.masterbussiness_id,
		'D',
		OLD.masterother_type,
		OLD.masterother_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterotherhistory
VALUES(
		myid,
		'D',
		OLD.masterother_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masterother_description,
		OLD.masterother_alias,
		OLD.masterother_type,
		OLD.masterother_tunjanganjabatan,
		OLD.masterother_iscbd,
		OLD.masterother_creditperiod,
		OLD.masterother_ispecahan,
		OLD.masterother_taxrate,
		OLD.masterother_tara,
		OLD.masterother_exchangevalue,
		OLD.masterother_issuperadmin,
		OLD.masterother_isallowhpp,
		OLD.masterother_isallowsalesprice,
		OLD.masterother_modemelihatinputan,
		OLD.masterother_startstring,
		OLD.masterother_endstring,
		OLD.masterother_active,
		OLD.masterother_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterother_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterother_after_insert
AFTER
INSERT ON masterother FOR EACH ROW BEGIN
DECLARE nmalias,
	nmentity,
	myid VARCHAR(255);
SET myid = UUID();
IF NEW.masterother_type = 1 THEN
SET nmalias = 'menambahkan brand';
SET nmentity = 'MASTER BRAND';
ELSEIF NEW.masterother_type = 2 THEN
SET nmalias = 'menambahkan kemasan';
SET nmentity = 'MASTER KEMASAN';
ELSEIF NEW.masterother_type = 3 THEN
SET nmalias = 'menambahkan expedisi';
SET nmentity = 'MASTER EXPEDISI';
ELSEIF NEW.masterother_type = 4 THEN
SET nmalias = 'menambahkan alasan';
SET nmentity = 'MASTER ALASAN';
ELSEIF NEW.masterother_type = 5 THEN
SET nmalias = 'menambahkan jabatan';
SET nmentity = 'MASTER JABATAN';
ELSEIF NEW.masterother_type = 6 THEN
SET nmalias = 'menambahkan termin';
SET nmentity = 'MASTER JABATAN';
ELSEIF NEW.masterother_type = 7 THEN
SET nmalias = 'menambahkan satuan';
SET nmentity = 'MASTER SATUAN UKUR';
ELSEIF NEW.masterother_type = 8 THEN
SET nmalias = 'menambahkan pajak';
SET nmentity = 'MASTER PAJAK';
ELSEIF NEW.masterother_type = 9 THEN
SET nmalias = 'menambahkan mata uang';
SET nmentity = 'MASTER MATA UANG';
ELSEIF NEW.masterother_type = 10 THEN
SET nmalias = 'menambahkan toko ';
SET nmentity = 'MASTER STORE';
ELSEIF NEW.masterother_type = 11 THEN
SET nmalias = 'menambahkan kategori user';
SET nmentity = 'MASTER KATEGORI PENGGUNA';
END IF;
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterother_id,
		nmentity,
		'masterother',
		nmalias,
		NEW.masterother_description,
		NEW.masterbussiness_id,
		'I',
		NEW.masterother_type,
		NEW.masterother_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterotherhistory
VALUES(
		myid,
		'I',
		NEW.masterother_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterother_description,
		NEW.masterother_alias,
		NEW.masterother_type,
		NEW.masterother_tunjanganjabatan,
		NEW.masterother_iscbd,
		NEW.masterother_creditperiod,
		NEW.masterother_ispecahan,
		NEW.masterother_taxrate,
		NEW.masterother_tara,
		NEW.masterother_exchangevalue,
		NEW.masterother_issuperadmin,
		NEW.masterother_isallowhpp,
		NEW.masterother_isallowsalesprice,
		NEW.masterother_modemelihatinputan,
		NEW.masterother_startstring,
		NEW.masterother_endstring,
		NEW.masterother_active,
		NEW.masterother_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterother_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterother_after_update
AFTER
UPDATE ON masterother FOR EACH ROW BEGIN
DECLARE nmalias,
	nmentity,
	myid VARCHAR(255);
SET myid = UUID();
IF NEW.masterother_type = 1 THEN
SET nmalias = 'merubah brand';
SET nmentity = 'MASTER BRAND';
ELSEIF NEW.masterother_type = 2 THEN
SET nmalias = 'merubah kemasan';
SET nmentity = 'MASTER KEMASAN';
ELSEIF NEW.masterother_type = 3 THEN
SET nmalias = 'merubah expedisi';
SET nmentity = 'MASTER EXPEDISI';
ELSEIF NEW.masterother_type = 4 THEN
SET nmalias = 'merubah alasan';
SET nmentity = 'MASTER ALASAN';
ELSEIF NEW.masterother_type = 5 THEN
SET nmalias = 'merubah jabatan';
SET nmentity = 'MASTER JABATAN';
ELSEIF NEW.masterother_type = 6 THEN
SET nmalias = 'merubah termin';
SET nmentity = 'MASTER JABATAN';
ELSEIF NEW.masterother_type = 7 THEN
SET nmalias = 'merubah satuan';
SET nmentity = 'MASTER SATUAN UKUR';
ELSEIF NEW.masterother_type = 8 THEN
SET nmalias = 'merubah pajak';
SET nmentity = 'MASTER PAJAK';
ELSEIF NEW.masterother_type = 9 THEN
SET nmalias = 'merubah mata uang';
SET nmentity = 'MASTER MATA UANG';
ELSEIF NEW.masterother_type = 10 THEN
SET nmalias = 'merubah toko ';
SET nmentity = 'MASTER STORE';
ELSEIF NEW.masterother_type = 11 THEN
SET nmalias = 'merubah kategori user';
SET nmentity = 'MASTER KATEGORI PENGGUNA';
END IF;
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterother_id,
		nmentity,
		'masterother',
		nmalias,
		NEW.masterother_description,
		NEW.masterbussiness_id,
		'U',
		NEW.masterother_type,
		NEW.masterother_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterotherhistory
VALUES(
		myid,
		'U',
		NEW.masterother_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterother_description,
		NEW.masterother_alias,
		NEW.masterother_type,
		NEW.masterother_tunjanganjabatan,
		NEW.masterother_iscbd,
		NEW.masterother_creditperiod,
		NEW.masterother_ispecahan,
		NEW.masterother_taxrate,
		NEW.masterother_tara,
		NEW.masterother_exchangevalue,
		NEW.masterother_issuperadmin,
		NEW.masterother_isallowhpp,
		NEW.masterother_isallowsalesprice,
		NEW.masterother_modemelihatinputan,
		NEW.masterother_startstring,
		NEW.masterother_endstring,
		NEW.masterother_active,
		NEW.masterother_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartnercategory_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartnercategory_after_delete
AFTER DELETE ON masterpartnercategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterpartnercategory_id,
		'MASTER KATEGORI PARTNER',
		'masterpartnercategory',
		'menghapus kategori partner',
		OLD.masterpartnercategory_description,
		OLD.masterbussiness_id,
		'D',
		OLD.masterpartnercategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnercategoryhistory
VALUES(
		myid,
		'D',
		OLD.masterpartnercategory_id,
		OLD.masterjabatan_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masterpartnercategory_description,
		OLD.masterpartnercategory_supplier,
		OLD.masterpartnercategory_customer,
		OLD.masterpartnercategory_karyawan,
		OLD.masterpartnercategory_active,
		OLD.masterpartnercategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartnercategory_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartnercategory_after_insert
AFTER
INSERT ON masterpartnercategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterpartnercategory_id,
		'MASTER KATEGORI PARTNER',
		'masterpartnercategory',
		'menambahkan kategori partner',
		NEW.masterpartnercategory_description,
		NEW.masterbussiness_id,
		'I',
		NEW.masterpartnercategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnercategoryhistory
VALUES(
		myid,
		'I',
		NEW.masterpartnercategory_id,
		NEW.masterjabatan_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterpartnercategory_description,
		NEW.masterpartnercategory_supplier,
		NEW.masterpartnercategory_customer,
		NEW.masterpartnercategory_karyawan,
		NEW.masterpartnercategory_active,
		NEW.masterpartnercategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartnercategory_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartnercategory_after_update
AFTER
UPDATE ON masterpartnercategory FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterpartnercategory_id,
		'MASTER KATEGORI PARTNER',
		'masterpartnercategory',
		'merubah kategori partner',
		NEW.masterpartnercategory_description,
		NEW.masterbussiness_id,
		'U',
		NEW.masterpartnercategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnercategoryhistory
VALUES(
		myid,
		'U',
		NEW.masterpartnercategory_id,
		NEW.masterjabatan_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterpartnercategory_description,
		NEW.masterpartnercategory_supplier,
		NEW.masterpartnercategory_customer,
		NEW.masterpartnercategory_karyawan,
		NEW.masterpartnercategory_active,
		NEW.masterpartnercategory_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartnersupport_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartnersupport_after_delete
AFTER DELETE ON masterpartnersupport FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterpartnersupport_id,
		'masterpartnersupport',
		'menghapus attribut partner',
		OLD.masterpartnersupport_description,
		OLD.masterbussiness_id,
		'D',
		OLD.masterpartnersupport_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnersupporthistory
VALUES(
		myid,
		'D',
		OLD.masterpartnersupport_id,
		OLD.masterpartner_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masterpartnersupport_type,
		OLD.masterpartnersupport_description,
		OLD.masterpartnersupport_blok,
		OLD.masterpartnersupport_nomor,
		OLD.masterpartnersupport_rt,
		OLD.masterpartnersupport_rw,
		OLD.masterpartnersupport_kecamatan,
		OLD.masterpartnersupport_kelurahan,
		OLD.masterpartnersupport_kabupaten,
		OLD.masterpartnersupport_provinsi,
		OLD.masterpartnersupport_kodepos,
		OLD.masterpartnersupport_active,
		OLD.masterpartnersupport_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartnersupport_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartnersupport_after_insert
AFTER
INSERT ON masterpartnersupport FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterpartnersupport_id,
		'masterpartnersupport',
		'menambahkan attribut partner',
		NEW.masterpartnersupport_description,
		NEW.masterbussiness_id,
		'I',
		NEW.masterpartnersupport_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnersupporthistory
VALUES(
		myid,
		'I',
		NEW.masterpartnersupport_id,
		NEW.masterpartner_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterpartnersupport_type,
		NEW.masterpartnersupport_description,
		NEW.masterpartnersupport_blok,
		NEW.masterpartnersupport_nomor,
		NEW.masterpartnersupport_rt,
		NEW.masterpartnersupport_rw,
		NEW.masterpartnersupport_kecamatan,
		NEW.masterpartnersupport_kelurahan,
		NEW.masterpartnersupport_kabupaten,
		NEW.masterpartnersupport_provinsi,
		NEW.masterpartnersupport_kodepos,
		NEW.masterpartnersupport_active,
		NEW.masterpartnersupport_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartnersupport_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartnersupport_after_update
AFTER
UPDATE ON masterpartnersupport FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterpartnersupport_id,
		'masterpartnersupport',
		'merubah attribut partner',
		NEW.masterpartnersupport_description,
		NEW.masterbussiness_id,
		'U',
		NEW.masterpartnersupport_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnersupporthistory
VALUES(
		myid,
		'U',
		NEW.masterpartnersupport_id,
		NEW.masterpartner_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterpartnersupport_type,
		NEW.masterpartnersupport_description,
		NEW.masterpartnersupport_blok,
		NEW.masterpartnersupport_nomor,
		NEW.masterpartnersupport_rt,
		NEW.masterpartnersupport_rw,
		NEW.masterpartnersupport_kecamatan,
		NEW.masterpartnersupport_kelurahan,
		NEW.masterpartnersupport_kabupaten,
		NEW.masterpartnersupport_provinsi,
		NEW.masterpartnersupport_kodepos,
		NEW.masterpartnersupport_active,
		NEW.masterpartnersupport_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartner_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartner_after_delete
AFTER DELETE ON masterpartner FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterpartner_id,
		'MASTER PARTNER',
		'masterpartner',
		'menghapus partner',
		CONCAT(
			OLD.masterpartner_description,
			" - ",
			OLD.masterpartner_alias
		),
		OLD.masterbussiness_id,
		'D',
		OLD.masterpartner_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnerhistory
VALUES(
		myid,
		'D',
		OLD.masterpartner_id,
		OLD.masterpartnercategory_id,
		OLD.mastercreditterm_id,
		OLD.masterexchange_id,
		OLD.masterpartner_staff,
		OLD.masterstore_id,
		OLD.masterfinger_id,
		OLD.masterareakota_id,
		OLD.masteruser_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masterpartner_description,
		OLD.masterpartner_alias,
		OLD.masterpartner_email,
		OLD.masterpartner_limittransaksi,
		OLD.masterpartner_limitqtynotaunpaid,
		OLD.masterpartner_limitmaxhari,
		OLD.masterpartner_includeppn,
		OLD.masterpartner_active,
		OLD.masterpartner_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartner_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartner_after_insert
AFTER
INSERT ON masterpartner FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterpartner_id,
		'MASTER PARTNER',
		'masterpartner',
		'menambahkan partner',
		CONCAT(
			NEW.masterpartner_description,
			" - ",
			NEW.masterpartner_alias
		),
		NEW.masterbussiness_id,
		'I',
		NEW.masterpartner_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnerhistory
VALUES(
		myid,
		'I',
		NEW.masterpartner_id,
		NEW.masterpartnercategory_id,
		NEW.mastercreditterm_id,
		NEW.masterexchange_id,
		NEW.masterpartner_staff,
		NEW.masterstore_id,
		NEW.masterfinger_id,
		NEW.masterareakota_id,
		NEW.masteruser_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterpartner_description,
		NEW.masterpartner_alias,
		NEW.masterpartner_email,
		NEW.masterpartner_limittransaksi,
		NEW.masterpartner_limitqtynotaunpaid,
		NEW.masterpartner_limitmaxhari,
		NEW.masterpartner_includeppn,
		NEW.masterpartner_active,
		NEW.masterpartner_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartner_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartner_after_update
AFTER
UPDATE ON masterpartner FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterpartner_id,
		'MASTER PARTNER',
		'masterpartner',
		'merubah partner',
		CONCAT(
			NEW.masterpartner_description,
			" - ",
			NEW.masterpartner_alias
		),
		NEW.masterbussiness_id,
		'U',
		NEW.masterpartner_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterpartnerhistory
VALUES(
		myid,
		'U',
		NEW.masterpartner_id,
		NEW.masterpartnercategory_id,
		NEW.mastercreditterm_id,
		NEW.masterexchange_id,
		NEW.masterpartner_staff,
		NEW.masterstore_id,
		NEW.masterfinger_id,
		NEW.masterareakota_id,
		NEW.masteruser_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterpartner_description,
		NEW.masterpartner_alias,
		NEW.masterpartner_email,
		NEW.masterpartner_limittransaksi,
		NEW.masterpartner_limitqtynotaunpaid,
		NEW.masterpartner_limitmaxhari,
		NEW.masterpartner_includeppn,
		NEW.masterpartner_active,
		NEW.masterpartner_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterpartner_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterpartner_before_insert BEFORE
INSERT ON masterpartner FOR EACH ROW BEGIN IF NEW.mastercreditterm_id IS NULL THEN
SET NEW.mastercreditterm_id =(
		SELECT generalsettingdefault_mastercreditterm_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
IF NEW.masterexchange_id IS NULL THEN
SET NEW.masterexchange_id =(
		SELECT generalsettingdefault_exchangecode_id
		FROM generalsettingdefault
		WHERE masterbussiness_id = NEW.masterbussiness_id
	);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterplatform_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterplatform_after_delete
AFTER DELETE ON masterplatform FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterplatform_id,
		'masterplatform',
(NULL),
		'D',
		OLD.masterplatform_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterplatformhistory
VALUES(
		myid,
		'D',
		OLD.masterplatform_id,
		OLD.masterplatform_description,
		OLD.masterplatform_active,
		OLD.masterplatform_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterplatform_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterplatform_after_insert
AFTER
INSERT ON masterplatform FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterplatform_id,
		'masterplatform',
(NULL),
		'I',
		NEW.masterplatform_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterplatformhistory
VALUES(
		myid,
		'I',
		NEW.masterplatform_id,
		NEW.masterplatform_description,
		NEW.masterplatform_active,
		NEW.masterplatform_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterplatform_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterplatform_after_update
AFTER
UPDATE ON masterplatform FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterplatform_id,
		'masterplatform',
(NULL),
		'U',
		NEW.masterplatform_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterplatformhistory
VALUES(
		myid,
		'U',
		NEW.masterplatform_id,
		NEW.masterplatform_description,
		NEW.masterplatform_active,
		NEW.masterplatform_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterroleother_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterroleother_before_insert BEFORE
INSERT ON masterroleother FOR EACH ROW BEGIN #SET NEW.masterroleother_id=UUID();
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterwarehouse_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterwarehouse_after_delete
AFTER DELETE ON masterwarehouse FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.masterwarehouse_id,
		'MASTER GUDANG',
		'masterwarehouse',
		'menghapus gudang',
		OLD.masterwarehouse_description,
		OLD.masterbussiness_id,
		'D',
		OLD.masterwarehouse_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterwarehousehistory
VALUES(
		myid,
		'D',
		OLD.masterwarehouse_id,
		OLD.masterstore_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.masterwarehouse_description,
		OLD.masterwarehouse_active,
		OLD.masterwarehouse_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterwarehouse_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterwarehouse_after_insert
AFTER
INSERT ON masterwarehouse FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterwarehouse_id,
		'MASTER GUDANG',
		'masterwarehouse',
		'menambahkan gudang',
		NEW.masterwarehouse_description,
		NEW.masterbussiness_id,
		'I',
		NEW.masterwarehouse_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterwarehousehistory
VALUES(
		myid,
		'I',
		NEW.masterwarehouse_id,
		NEW.masterstore_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterwarehouse_description,
		NEW.masterwarehouse_active,
		NEW.masterwarehouse_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.masterwarehouse_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER masterwarehouse_after_update
AFTER
UPDATE ON masterwarehouse FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.masterwarehouse_id,
		'MASTER GUDANG',
		'masterwarehouse',
		'merubah gudang',
		NEW.masterwarehouse_description,
		NEW.masterbussiness_id,
		'U',
		NEW.masterwarehouse_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO masterwarehousehistory
VALUES(
		myid,
		'U',
		NEW.masterwarehouse_id,
		NEW.masterstore_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.masterwarehouse_description,
		NEW.masterwarehouse_active,
		NEW.masterwarehouse_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.priceline_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER priceline_after_delete
AFTER DELETE ON priceline FOR EACH ROW BEGIN
DECLARE qqNoHistory TEXT;
SET qqNoHistory =(
		SELECT pricehistory_id
		FROM pricehistory
		WHERE price_id = OLD.price_id
			AND pricehistory_mode = 'U'
		ORDER BY pricehistory_waktu DESC
		LIMIT 1
	);
INSERT INTO pricelinehistory
VALUES(
		UUID(),
		qqNoHistory,
		'D',
		OLD.priceline_id,
		OLD.price_id,
		OLD.masteritemuom_id,
		OLD.masteraccountincomecashback_id,
		OLD.masteraccountpiutangcashback_id,
		OLD.masterbussiness_id,
		OLD.priceline_description,
		OLD.priceline_mode,
		OLD.priceline_qtyinput,
		OLD.priceline_convertionqty,
		OLD.priceline_qty,
		OLD.priceline_valueinput,
		OLD.priceline_valuemininput,
		OLD.priceline_valuemaxinput,
		OLD.priceline_price,
		OLD.priceline_discinput,
		OLD.priceline_disc,
		OLD.priceline_maxdiscinput,
		OLD.priceline_maxdisc,
		OLD.priceline_active,
		OLD.priceline_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.priceline_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER priceline_after_insert
AFTER
INSERT ON priceline FOR EACH ROW BEGIN
DECLARE qqNoHistory TEXT;
SET qqNoHistory =(
		SELECT pricehistory_id
		FROM pricehistory
		WHERE price_id = NEW.price_id
			AND pricehistory_mode = 'I'
	);
INSERT INTO pricelinehistory
VALUES(
		UUID(),
		qqNoHistory,
		'I',
		NEW.priceline_id,
		NEW.price_id,
		NEW.masteritemuom_id,
		NEW.masteraccountincomecashback_id,
		NEW.masteraccountpiutangcashback_id,
		NEW.masterbussiness_id,
		NEW.priceline_description,
		NEW.priceline_mode,
		NEW.priceline_qtyinput,
		NEW.priceline_convertionqty,
		NEW.priceline_qty,
		NEW.priceline_valueinput,
		NEW.priceline_valuemininput,
		NEW.priceline_valuemaxinput,
		NEW.priceline_price,
		NEW.priceline_discinput,
		NEW.priceline_disc,
		NEW.priceline_maxdiscinput,
		NEW.priceline_maxdisc,
		NEW.priceline_active,
		NEW.priceline_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.priceline_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER priceline_after_update
AFTER
UPDATE ON priceline FOR EACH ROW BEGIN
DECLARE qqNoHistory TEXT;
SET qqNoHistory =(
		SELECT pricehistory_id
		FROM pricehistory
		WHERE price_id = NEW.price_id
			AND pricehistory_mode = 'U'
		ORDER BY pricehistory_waktu DESC
		LIMIT 1
	);
IF (
	NEW.priceline_valueinput <> OLD.priceline_valueinput
)
OR (NEW.priceline_discinput) <>(OLD.priceline_discinput)
OR (NEW.priceline_active <> OLD.priceline_active)
OR (
	NEW.priceline_description <> OLD.priceline_description
) THEN
INSERT INTO pricelinehistory
VALUES(
		UUID(),
		qqNoHistory,
		'U',
		NEW.priceline_id,
		NEW.price_id,
		NEW.masteritemuom_id,
		NEW.masteraccountincomecashback_id,
		NEW.masteraccountpiutangcashback_id,
		NEW.masterbussiness_id,
		NEW.priceline_description,
		NEW.priceline_mode,
		NEW.priceline_qtyinput,
		NEW.priceline_convertionqty,
		NEW.priceline_qty,
		NEW.priceline_valueinput,
		NEW.priceline_valuemininput,
		NEW.priceline_valuemaxinput,
		NEW.priceline_price,
		NEW.priceline_discinput,
		NEW.priceline_disc,
		NEW.priceline_maxdiscinput,
		NEW.priceline_maxdisc,
		NEW.priceline_active,
		NEW.priceline_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.priceline_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER priceline_before_insert BEFORE
INSERT ON priceline FOR EACH ROW BEGIN
SET NEW.priceline_convertionqty =(
		SELECT masteritemuom_convertionqty
		FROM masteritemuom
		WHERE masteritemuom_id = NEW.masteritemuom_id
	);
SET NEW.priceline_qty = COALESCE(NEW.priceline_qtyinput, 0) * COALESCE(NEW.priceline_convertionqty, 0);
SET NEW.priceline_price = COALESCE(NEW.priceline_valueinput, 0) / COALESCE(NEW.priceline_convertionqty, 0);
SET NEW.priceline_disc = COALESCE(NEW.priceline_discinput, 0) / COALESCE(NEW.priceline_convertionqty, 0);
SET NEW.priceline_maxdisc = COALESCE(NEW.priceline_maxdiscinput, 0) / COALESCE(NEW.priceline_convertionqty, 0);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.priceline_before_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER priceline_before_update BEFORE
UPDATE ON priceline FOR EACH ROW BEGIN
SET NEW.priceline_convertionqty =(
		SELECT masteritemuom_convertionqty
		FROM masteritemuom
		WHERE masteritemuom_id = NEW.masteritemuom_id
	);
SET NEW.priceline_qty = COALESCE(NEW.priceline_qtyinput, 0) * COALESCE(NEW.priceline_convertionqty, 0);
SET NEW.priceline_price = COALESCE(NEW.priceline_valueinput, 0) / COALESCE(NEW.priceline_convertionqty, 0);
SET NEW.priceline_disc = COALESCE(NEW.priceline_discinput, 0) / COALESCE(NEW.priceline_convertionqty, 0);
SET NEW.priceline_maxdisc = COALESCE(NEW.priceline_maxdiscinput, 0) / COALESCE(NEW.priceline_convertionqty, 0);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.price_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER price_after_delete
AFTER DELETE ON price FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.price_id,
		'BUKU HARGA',
		'price',
		'menghapus buku harga',
		OLD.price_description,
		OLD.masterbussiness_id,
		'D',
		NULL,
		OLD.price_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO pricehistory
VALUES(
		myid,
		'D',
		OLD.price_id,
		OLD.masterexchange_id,
		OLD.masterbussiness_id,
		OLD.price_description,
		OLD.price_mode,
		OLD.price_ispersen,
		OLD.price_start,
		OLD.price_end,
		OLD.price_default,
		OLD.price_issemuastore,
		OLD.price_issemuapartnercategory,
		OLD.price_oleh,
		OLD.price_active,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.price_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER price_after_insert
AFTER
INSERT ON price FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.price_id,
		'BUKU HARGA',
		'price',
		'menambahkan buku harga',
		NEW.price_description,
		NEW.masterbussiness_id,
		'I',
		NULL,
		NEW.price_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO pricehistory
VALUES(
		myid,
		'I',
		NEW.price_id,
		NEW.masterexchange_id,
		NEW.masterbussiness_id,
		NEW.price_description,
		NEW.price_mode,
		NEW.price_ispersen,
		NEW.price_start,
		NEW.price_end,
		NEW.price_default,
		NEW.price_issemuastore,
		NEW.price_issemuapartnercategory,
		NEW.price_oleh,
		NEW.price_active,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.price_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER price_after_update
AFTER
UPDATE ON price FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.price_id,
		'BUKU HARGA',
		'price',
		'merubah buku harga',
		NEW.price_description,
		NEW.masterbussiness_id,
		'U',
		NULL,
		NEW.price_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO pricehistory
VALUES(
		myid,
		'U',
		NEW.price_id,
		NEW.masterexchange_id,
		NEW.masterbussiness_id,
		NEW.price_description,
		NEW.price_mode,
		NEW.price_ispersen,
		NEW.price_start,
		NEW.price_end,
		NEW.price_default,
		NEW.price_issemuastore,
		NEW.price_issemuapartnercategory,
		NEW.price_oleh,
		NEW.price_active,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.prodline_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER prodline_after_delete
AFTER DELETE ON prodline FOR EACH ROW BEGIN
DECLARE qqNoHistory CHAR(36);
SET qqNoHistory =(
		SELECT prodhistory_id
		FROM prodhistory
		WHERE prod_id = OLD.prod_id
		ORDER BY prodhistory_waktu DESC
		LIMIT 1
	);
INSERT INTO prodlinehistory
VALUES(
		UUID(),
		'D',
		qqNoHistory,
		OLD.prodline_id,
		OLD.prod_id,
		OLD.masteritemuom_id,
		OLD.masterbussiness_id,
		OLD.prodline_qtyused,
		OLD.prodline_maxqtyused,
		OLD.prodline_distribusidisassembly,
		OLD.prodline_uncertainty,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.prodline_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER prodline_after_insert
AFTER
INSERT ON prodline FOR EACH ROW BEGIN
DECLARE qqNoHistory CHAR(36);
SET qqNoHistory =(
		SELECT prodhistory_id
		FROM prodhistory
		WHERE prod_id = NEW.prod_id
		ORDER BY prodhistory_waktu DESC
		LIMIT 1
	);
INSERT INTO prodlinehistory
VALUES(
		UUID(),
		'I',
		qqNoHistory,
		NEW.prodline_id,
		NEW.prod_id,
		NEW.masteritemuom_id,
		NEW.masterbussiness_id,
		NEW.prodline_qtyused,
		NEW.prodline_maxqtyused,
		NEW.prodline_distribusidisassembly,
		NEW.prodline_uncertainty,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.prodline_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER prodline_after_update
AFTER
UPDATE ON prodline FOR EACH ROW BEGIN
DECLARE qqNoHistory CHAR(36);
SET qqNoHistory =(
		SELECT prodhistory_id
		FROM prodhistory
		WHERE prod_id = NEW.prod_id
		ORDER BY prodhistory_waktu DESC
		LIMIT 1
	);
INSERT INTO prodlinehistory
VALUES(
		UUID(),
		'U',
		qqNoHistory,
		NEW.prodline_id,
		NEW.prod_id,
		NEW.masteritemuom_id,
		NEW.masterbussiness_id,
		NEW.prodline_qtyused,
		NEW.prodline_maxqtyused,
		NEW.prodline_distribusidisassembly,
		NEW.prodline_uncertainty,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.prod_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER prod_after_delete
AFTER DELETE ON prod FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.prod_id,
		'prod',
		'menghapus resep',
(
			SELECT CONCAT(masteritem_description, " - ", masteritem_alias)
			FROM masteritem
			WHERE masteritem_id = OLD.masteritem_id
		),
		OLD.masterbussiness_id,
		'I',
		OLD.prod_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO prodhistory
VALUES(
		myid,
		'D',
		OLD.prod_id,
		OLD.masteritem_id,
		OLD.masteritemuom_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.prod_qtyinput,
		OLD.prod_isallowadditem,
		OLD.prod_isjumlahkan,
		OLD.prod_active,
		OLD.prod_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.prod_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER prod_after_insert
AFTER
INSERT ON prod FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.prod_id,
		'prod',
		'menambahkan resep',
(
			SELECT CONCAT(masteritem_description, " - ", masteritem_alias)
			FROM masteritem
			WHERE masteritem_id = NEW.masteritem_id
		),
		NEW.masterbussiness_id,
		'I',
		NEW.prod_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO prodhistory
VALUES(
		myid,
		'I',
		NEW.prod_id,
		NEW.masteritem_id,
		NEW.masteritemuom_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.prod_qtyinput,
		NEW.prod_isallowadditem,
		NEW.prod_isjumlahkan,
		NEW.prod_active,
		NEW.prod_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.prod_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER prod_after_update
AFTER
UPDATE ON prod FOR EACH ROW BEGIN
DECLARE myid VARCHAR(255);
SET myid = UUID();
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.prod_id,
		'prod',
		'merubah resep',
(
			SELECT CONCAT(masteritem_description, " - ", masteritem_alias)
			FROM masteritem
			WHERE masteritem_id = NEW.masteritem_id
		),
		NEW.masterbussiness_id,
		'U',
		NEW.prod_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO prodhistory
VALUES(
		myid,
		'U',
		NEW.prod_id,
		NEW.masteritem_id,
		NEW.masteritemuom_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.prod_qtyinput,
		NEW.prod_isallowadditem,
		NEW.prod_isjumlahkan,
		NEW.prod_active,
		NEW.prod_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transapprove_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transapprove_before_insert BEFORE
INSERT ON transapprove FOR EACH ROW BEGIN
SET NEW.transapprove_waktu = ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transapprove_before_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transapprove_before_update BEFORE
UPDATE ON transapprove FOR EACH ROW BEGIN
SET NEW.transapprove_waktuubah = ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transbilling_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transbilling_after_insert
AFTER
INSERT ON transbilling FOR EACH ROW BEGIN IF NEW.transbilling_status = 'TRIAL' THEN
UPDATE masterbussiness
SET masterbussiness_endbilling =(
		(
			SELECT UNIX_TIMESTAMP() + 86400
		) * 1000
	),
	masterbussiness_jumuser = 2
WHERE masterbussiness_id = NEW.masterbussiness_id;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transbilling_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transbilling_after_update
AFTER
UPDATE ON transbilling FOR EACH ROW BEGIN IF (OLD.transbilling_status = 'pending')
	AND (NEW.transbilling_status = 'settlement') THEN
UPDATE masterbussiness
SET masterbussiness_endbilling =(
		(
			SELECT UNIX_TIMESTAMP() + 86400
		) * 1000
	),
	masterbussiness_jumuser = 2
WHERE masterbussiness_id = NEW.masterbussiness_id;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transbilling_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transbilling_before_insert BEFORE
INSERT ON transbilling FOR EACH ROW BEGIN
SET NEW.transbilling_waktu = UNIX_TIMESTAMP() * 1000;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transfaktur_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transfaktur_after_insert
AFTER
INSERT ON transfaktur FOR EACH ROW BEGIN
DECLARE ctr,
	awal,
	akhir BIGINT;
SET awal =(
		SELECT LPAD(CAST(RIGHT(transfaktur_awal, 13) AS SIGNED), 13, 0)
		FROM transfaktur
		WHERE transfaktur_id = NEW.transfaktur_id
	);
SET akhir =(
		SELECT LPAD(CAST(RIGHT(transfaktur_akhir, 13) AS SIGNED), 13, 0)
		FROM transfaktur
		WHERE transfaktur_id = NEW.transfaktur_id
	);
SET ctr = 0;
WHILE awal + ctr <= akhir DO
INSERT INTO transfakturline
VALUES(
		(UUID()),
		NEW.transfaktur_id,
		NEW.masterbussiness_id,
		0,
		LPAD(awal + ctr, 13, 0)
	);
SET ctr = ctr + 1;
END WHILE;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transfaktur_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transfaktur_before_insert BEFORE
INSERT ON transfaktur FOR EACH ROW BEGIN
SET NEW.transfaktur_nomorawal =(
		SELECT LEFT(NEW.transfaktur_awal, 2)
	);
SET NEW.transfaktur_event =(
		SELECT ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transfaktur_before_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transfaktur_before_update BEFORE
UPDATE ON transfaktur FOR EACH ROW BEGIN
SET NEW.transfaktur_nomorawal =(
		SELECT LEFT(NEW.transfaktur_awal, 2)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.translinebilling_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER translinebilling_before_insert BEFORE
INSERT ON translinebilling FOR EACH ROW BEGIN #SET NEW.translinebilling_valueinput=(SELECT masteritembilling_valueinput FROM masteritembilling WHERE masteritembilling_id=NEW.masteritembilling_id);
	#SET NEW.translinebilling_discinput=(SELECT masteritembilling_discinput FROM masteritembilling WHERE masteritembilling_id=NEW.masteritembilling_id);
	#SET NEW.translinebilling_netvalue=COALESCE(NEW.translinebilling_valueinput,0)-COALESCE(NEW.translinebilling_discinput,0);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transline_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transline_after_delete
AFTER DELETE ON transline FOR EACH ROW BEGIN
DECLARE myResultQty DECIMAL(33, 15);
DECLARE qqNoHistory CHAR(36);
IF (COALESCE(OLD.transline_ishide, 0) = 0) THEN
SET qqNoHistory =(
		SELECT transhistory_id
		FROM transhistory
		WHERE trans_id = OLD.trans_id
			AND transhistory_mode = 'U'
		ORDER BY transhistory_waktu DESC
		LIMIT 1
	);
INSERT INTO translinehistory
VALUES(
		UUID(),
		qqNoHistory,
		'D',
		OLD.transline_id,
		OLD.trans_id,
		OLD.transparentpayment_id,
		OLD.translineparent_id,
		OLD.translineparentcombine_id,
		OLD.masteritem_id,
		OLD.masteritemuom_id,
		OLD.masterwarehouse_id,
		OLD.masterstore_id,
		OLD.mastertax_id,
		OLD.masteraccount_id,
		OLD.masteraccountincomecashback_id,
		OLD.masteraccountpiutangcashback_id,
		OLD.masterpayment_id,
		OLD.masterkemasan_id,
		OLD.transbsline_id,
		OLD.masterbussiness_id,
		OLD.transline_barcode,
		OLD.transline_description,
		OLD.transline_alias,
		OLD.transline_nourut,
		OLD.transline_nourutinduk,
		OLD.transline_taxrate,
		OLD.transline_distribusipersen,
		OLD.transline_qtyinput,
		OLD.transline_qtyinputfly,
		OLD.transline_qtyrealize,
		OLD.transline_qtysystem,
		OLD.transline_qtyadjust,
		OLD.transline_convertionqty,
		OLD.transline_vector,
		OLD.transline_tara,
		OLD.transline_qty,
		OLD.transline_qtyfly,
		OLD.transline_tarafly,
		OLD.transline_defaultbahan,
		OLD.transline_priceinput,
		OLD.transline_price,
		OLD.transline_pricefly,
		OLD.transline_discinput,
		OLD.transline_disc,
		OLD.transline_discotherinput,
		OLD.transline_discother,
		OLD.transline_discgroupline,
		OLD.transline_discgrouplinevalue,
		OLD.transline_totaldiscvalue,
		OLD.transline_netraw,
		OLD.transline_net,
		OLD.transline_netvalue,
		OLD.transline_tax,
		OLD.transline_taxvalue,
		OLD.transline_komisi,
		OLD.transline_nettotalkomisi,
		OLD.transline_cardcharges,
		OLD.transline_cardchargesvalue,
		OLD.transline_pointperqty,
		OLD.transline_minqtyused,
		OLD.transline_maxqtyused,
		OLD.transline_uncertainty,
		OLD.transline_ishide,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END IF;
IF OLD.masteritem_id IS NOT NULL THEN
UPDATE stockcard
SET stockcard_onhand =(
		SELECT COALESCE(SUM(d.transline_qty), 0)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (4, 5, 12, 16, 17, 24, 27, 30, 33)
			AND t.masteritemtype_isstock = 1
			AND d.masteritem_id = OLD.masteritem_id
			AND d.masterwarehouse_id = OLD.masterwarehouse_id
			AND d.masterstore_id = OLD.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_onpurchase =(
		SELECT SUM(
				COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
			) * d.transline_convertionqty
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (2)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = OLD.masteritem_id
			AND d.masterwarehouse_id = OLD.masterwarehouse_id
			AND d.masterstore_id = OLD.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_inassembly =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (26, 29)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.transline_vector = -1
			AND d.masteritem_id = OLD.masteritem_id
			AND d.masterwarehouse_id = OLD.masterwarehouse_id
			AND d.masterstore_id = OLD.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_onassembly =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (26, 29)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.transline_vector = 1
			AND d.masteritem_id = OLD.masteritem_id
			AND d.masterwarehouse_id = OLD.masterwarehouse_id
			AND d.masterstore_id = OLD.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_onorder =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (14, 15)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = OLD.masteritem_id
			AND d.masterwarehouse_id = OLD.masterwarehouse_id
			AND d.masterstore_id = OLD.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_ontransfer =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (32)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = OLD.masteritem_id
			AND d.masterwarehouse_id = OLD.masterwarehouse_id
			AND d.masterstore_id = OLD.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_onquote =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (1, 13, 25, 28, 31)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = OLD.masteritem_id
			AND d.masterwarehouse_id = OLD.masterwarehouse_id
			AND d.masterstore_id = OLD.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	)
WHERE masteritem_id = OLD.masteritem_id
	AND masterwarehouse_id = OLD.masterwarehouse_id
	AND masterstore_id = OLD.masterstore_id;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transline_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = '';
DELIMITER / / CREATE TRIGGER `transline_after_insert`
AFTER
INSERT ON `transline` FOR EACH ROW BEGIN
DECLARE qqNoHistory TEXT;
DECLARE qqTransTypeCode INT;
DECLARE qqhpp,
	qqtotalhpp,
	qqkurs DECIMAL(33, 15);
SET qqkurs =(
		SELECT trans_exchangevalue
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET qqTransTypeCode =(
		SELECT trans_type
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
IF (qqTransTypeCode = 4)
OR (qqTransTypeCode = 12) THEN
SET qqhpp =(
		(
			COALESCE(NEW.transline_price, 0) - COALESCE(NEW.transline_disc, 0) - COALESCE(NEW.transline_discgrouplinevalue, 0)
		) / NULLIF(COALESCE(NEW.transline_convertionqty, 0), 0)
	) * qqkurs;
SET qqtotalhpp = qqhpp * NEW.transline_qtyinput * NEW.transline_convertionqty;
INSERT INTO translinehpp
VALUES(
		UUID(),
		NEW.transline_id,
		NEW.masterbussiness_id,
		qqhpp,
		qqtotalhpp
	);
END IF;
IF (COALESCE(NEW.transline_ishide, 0) = 0) THEN
SET qqNoHistory =(
		SELECT transhistory_id
		FROM transhistory
		WHERE trans_id = NEW.trans_id
			AND transhistory_mode = 'I'
	);
INSERT INTO translinehistory
VALUES(
		(
			SELECT UUID()
		),
		qqNoHistory,
		'I',
		NEW.transline_id,
		NEW.trans_id,
		NEW.transparentpayment_id,
		NEW.translineparent_id,
		NEW.translineparentcombine_id,
		NEW.masteritem_id,
		NEW.masteritemuom_id,
		NEW.masterwarehouse_id,
		NEW.masterstore_id,
		NEW.mastertax_id,
		NEW.masteraccount_id,
		NEW.masteraccountincomecashback_id,
		NEW.masteraccountpiutangcashback_id,
		NEW.masterpayment_id,
		NEW.masterkemasan_id,
		NEW.transbsline_id,
		NEW.masterbussiness_id,
		NEW.transline_barcode,
		NEW.transline_description,
		NEW.transline_alias,
		NEW.transline_nourut,
		NEW.transline_nourutinduk,
		NEW.transline_taxrate,
		NEW.transline_distribusipersen,
		NEW.transline_qtyinput,
		NEW.transline_qtyinputfly,
		NEW.transline_qtyrealize,
		NEW.transline_qtysystem,
		NEW.transline_qtyadjust,
		NEW.transline_convertionqty,
		NEW.transline_vector,
		NEW.transline_tara,
		NEW.transline_qty,
		NEW.transline_qtyfly,
		NEW.transline_tarafly,
		NEW.transline_defaultbahan,
		NEW.transline_priceinput,
		NEW.transline_price,
		NEW.transline_pricefly,
		NEW.transline_discinput,
		NEW.transline_disc,
		NEW.transline_discotherinput,
		NEW.transline_discother,
		NEW.transline_discgroupline,
		NEW.transline_discgrouplinevalue,
		NEW.transline_totaldiscvalue,
		NEW.transline_netraw,
		NEW.transline_net,
		NEW.transline_netvalue,
		NEW.transline_tax,
		NEW.transline_taxvalue,
		NEW.transline_komisi,
		NEW.transline_nettotalkomisi,
		NEW.transline_cardcharges,
		NEW.transline_cardchargesvalue,
		NEW.transline_pointperqty,
		NEW.transline_minqtyused,
		NEW.transline_maxqtyused,
		NEW.transline_uncertainty,
		NEW.transline_ishide,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END IF;
IF NEW.masteritem_id IS NOT NULL THEN
INSERT INTO stockcard
SELECT UUID(),
	d.masteritem_id,
	d.masterwarehouse_id,
	d.masterstore_id,
	d.masterbussiness_id,
	(
		SELECT COALESCE(SUM(d.transline_qty), 0)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (4, 5, 12, 16, 17, 24, 27, 30, 33)
			AND t.masteritemtype_isstock = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	(
		SELECT SUM(
				COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
			) * d.transline_convertionqty
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (2)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (26, 29)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.transline_vector = -1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (26, 29)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.transline_vector = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (14, 15)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (32)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (1, 13, 25, 28, 31)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	)
FROM trans h,
	transline d,
	masteritem i,
	masteritemcategory c,
	masteritemtype t
WHERE h.trans_id = d.trans_id
	AND d.masteritem_id = i.masteritem_id
	AND i.masteritemcategory_id = c.masteritemcategory_id
	AND c.masteritemtype_id = t.masteritemtype_id
	AND h.trans_status NOT IN ("C")
	AND h.trans_type IN (1, 2, 3, 4, 5, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30)
	AND t.masteritemtype_isstock = 1
	AND d.masteritem_id = NEW.masteritem_id
	AND d.masterwarehouse_id = NEW.masterwarehouse_Id
	AND d.masterstore_id = NEW.masterstore_id
GROUP BY d.masteritem_id,
	d.masterwarehouse_id,
	d.masterstore_id ON DUPLICATE KEY
UPDATE stockcard_onhand =
VALUES(stockcard_onhand),
	stockcard_onpurchase =
VALUES(stockcard_onpurchase),
	stockcard_inassembly =
VALUES(stockcard_inassembly),
	stockcard_onassembly =
VALUES(stockcard_onassembly),
	stockcard_onorder =
VALUES(stockcard_onorder),
	stockcard_ontransfer =
VALUES(stockcard_ontransfer),
	stockcard_onquote =
VALUES(stockcard_onquote);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transline_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = '';
DELIMITER / / CREATE TRIGGER `transline_after_update`
AFTER
UPDATE ON `transline` FOR EACH ROW BEGIN
DECLARE myResultQty,
	qqhpp,
	qqtotalhpp,
	qqkurs DECIMAL(33, 15);
DECLARE qqNoHistory TEXT;
DECLARE qqTransTypeCode INT;
SET qqkurs =(
		SELECT trans_exchangevalue
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET qqTransTypeCode =(
		SELECT trans_type
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
IF (qqTransTypeCode = 4)
OR (qqTransTypeCode = 12) THEN
SET qqhpp =(
		(
			COALESCE(NEW.transline_price, 0) - COALESCE(NEW.transline_disc, 0) - COALESCE(NEW.transline_discgrouplinevalue, 0)
		) / NULLIF(COALESCE(NEW.transline_convertionqty, 0), 0)
	) * qqkurs;
SET qqtotalhpp = qqhpp * NEW.transline_qtyinput * NEW.transline_convertionqty;
UPDATE translinehpp
SET translinehpp_hpp = qqhpp,
	translinehpp_totalhpp = qqtotalhpp
WHERE transline_id = NEW.transline_id;
INSERT INTO translinehpp
VALUES(
		UUID(),
		NEW.transline_id,
		NEW.masterbussiness_id,
		qqhpp,
		qqtotalhpp
	) ON DUPLICATE KEY
UPDATE translinehpp_hpp = qqhpp,
	translinehpp_totalhpp = qqtotalhpp;
END IF;
IF (COALESCE(NEW.transline_ishide, 0) = 0) THEN
SET qqNoHistory =(
		SELECT transhistory_id
		FROM transhistory
		WHERE trans_id = NEW.trans_id
			AND transhistory_mode = 'U'
		ORDER BY transhistory_waktu DESC
		LIMIT 1
	);
INSERT INTO translinehistory
VALUES(
		UUID(),
		qqNoHistory,
		'U',
		NEW.transline_id,
		NEW.trans_id,
		NEW.transparentpayment_id,
		NEW.translineparent_id,
		NEW.translineparentcombine_id,
		NEW.masteritem_id,
		NEW.masteritemuom_id,
		NEW.masterwarehouse_id,
		NEW.masterstore_id,
		NEW.mastertax_id,
		NEW.masteraccount_id,
		NEW.masteraccountincomecashback_id,
		NEW.masteraccountpiutangcashback_id,
		NEW.masterpayment_id,
		NEW.masterkemasan_id,
		NEW.transbsline_id,
		NEW.masterbussiness_id,
		NEW.transline_barcode,
		NEW.transline_description,
		NEW.transline_alias,
		NEW.transline_nourut,
		NEW.transline_nourutinduk,
		NEW.transline_taxrate,
		NEW.transline_distribusipersen,
		NEW.transline_qtyinput,
		NEW.transline_qtyinputfly,
		NEW.transline_qtyrealize,
		NEW.transline_qtysystem,
		NEW.transline_qtyadjust,
		NEW.transline_convertionqty,
		NEW.transline_vector,
		NEW.transline_tara,
		NEW.transline_qty,
		NEW.transline_qtyfly,
		NEW.transline_tarafly,
		NEW.transline_defaultbahan,
		NEW.transline_priceinput,
		NEW.transline_price,
		NEW.transline_pricefly,
		NEW.transline_discinput,
		NEW.transline_disc,
		NEW.transline_discotherinput,
		NEW.transline_discother,
		NEW.transline_discgroupline,
		NEW.transline_discgrouplinevalue,
		NEW.transline_totaldiscvalue,
		NEW.transline_netraw,
		NEW.transline_net,
		NEW.transline_netvalue,
		NEW.transline_tax,
		NEW.transline_taxvalue,
		NEW.transline_komisi,
		NEW.transline_nettotalkomisi,
		NEW.transline_cardcharges,
		NEW.transline_cardchargesvalue,
		NEW.transline_pointperqty,
		NEW.transline_minqtyused,
		NEW.transline_maxqtyused,
		NEW.transline_uncertainty,
		NEW.transline_ishide,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END IF;
IF NEW.masteritem_id IS NOT NULL THEN
UPDATE stockcard
SET stockcard_onhand =(
		SELECT COALESCE(SUM(d.transline_qty), 0)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (4, 5, 12, 16, 17, 24, 27, 30, 33)
			AND t.masteritemtype_isstock = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_onpurchase =(
		SELECT SUM(
				COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
			) * d.transline_convertionqty
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (2)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_inassembly =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (26, 29)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.transline_vector = -1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_onassembly =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (26, 29)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.transline_vector = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_onorder =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (14, 15)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_ontransfer =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (32)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	),
	stockcard_onquote =(
		SELECT SUM(
				(
					COALESCE(d.transline_qtyinput, 0) - COALESCE(d.transline_qtyrealize, 0) - COALESCE(d.transline_qtyadjust, 0)
				) * d.transline_convertionqty * d.transline_vector
			)
		FROM trans h,
			transline d,
			masteritem i,
			masteritemcategory c,
			masteritemtype t
		WHERE h.trans_id = d.trans_id
			AND d.masteritem_id = i.masteritem_id
			AND i.masteritemcategory_id = c.masteritemcategory_id
			AND c.masteritemtype_id = t.masteritemtype_id
			AND h.trans_status NOT IN ("C")
			AND h.trans_type IN (1, 13, 25, 28, 31)
			AND t.masteritemtype_isstock = 1
			AND h.trans_isallocation = 1
			AND d.masteritem_id = NEW.masteritem_id
			AND d.masterwarehouse_id = NEW.masterwarehouse_id
			AND d.masterstore_id = NEW.masterstore_id
		GROUP BY d.masteritem_id,
			d.masterwarehouse_id,
			d.masterstore_id,
			d.masterbussiness_id
	)
WHERE masteritem_id = NEW.masteritem_id
	AND masterwarehouse_id = NEW.masterwarehouse_id
	AND masterstore_id = NEW.masterstore_id;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transline_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = '';
DELIMITER / / CREATE TRIGGER `transline_before_insert` BEFORE
INSERT ON `transline` FOR EACH ROW BEGIN
DECLARE qqincludeVAT,
	qqispricepiece BOOLEAN;
DECLARE qqDiscGroup,
	qqExchangeValue DECIMAL(33, 15);
DECLARE qqTransTypeCode INT;
SET qqTransTypeCode =(
		SELECT trans_type
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET qqispricepiece =(
		SELECT trans_priceperpiece
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
IF (qqTransTypeCode = 1)
OR (qqTransTypeCode = 2)
OR (qqTransTypeCode = 3)
OR (qqTransTypeCode = 4)
OR (qqTransTypeCode = 7)
OR (qqTransTypeCode = 11)
OR (qqTransTypeCode = 12)
OR (qqTransTypeCode = 17)
OR (qqTransTypeCode = 23)
OR (qqTransTypeCode = 46)
OR (qqTransTypeCode = 47) THEN
SET NEW.transline_vector = 1;
ELSEIF (qqTransTypeCode = 5)
OR (qqTransTypeCode = 13)
OR (qqTransTypeCode = 14)
OR (qqTransTypeCode = 15)
OR (qqTransTypeCode = 16)
OR (qqTransTypeCode = 19) THEN
SET NEW.transline_vector = -1;
END IF;
SET qqincludeVAT =(
		SELECT trans_isincludevat
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET qqDiscGroup =(
		SELECT COALESCE(trans_discgroup, 0)
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET qqExchangeValue =(
		SELECT COALESCE(trans_exchangevalue, 0)
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
IF NEW.transline_taxrate IS NULL THEN
SET NEW.transline_taxrate =(
		SELECT COALESCE(masterother_taxrate, 0)
		FROM masterother
		WHERE masterother_id = NEW.mastertax_id
	);
END IF;
SET NEW.transline_convertionqty =(
		SELECT COALESCE(masteritemuom_convertionqty, 0)
		FROM masteritemuom
		WHERE masteritemuom_id = NEW.masteritemuom_id
	);
SET NEW.transline_qty = NEW.transline_qtyinput * NEW.transline_convertionqty * NEW.transline_vector;
IF qqincludeVAT = True THEN IF NEW.transline_discgroupline IS NULL THEN IF qqDiscGroup > 0 THEN
SET NEW.transline_discgroupline =(
		(
			qqDiscGroup /((100 + NEW.transline_taxrate) / NULLIF(100, 0))
		) * NEW.transline_distribusipersen
	) / NULLIF(NEW.transline_qtyinput, 0);
SET NEW.transline_discgrouplinevalue = NEW.transline_discgroupline * qqExchangeValue;
END IF;
ELSE
SET NEW.transline_discgrouplinevalue = NEW.transline_discgroupline * qqExchangeValue;
END IF;
IF qqispricepiece = True THEN
SET NEW.transline_price =(
		NEW.transline_priceinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0)
	) * NEW.transline_convertionqty;
ELSE
SET NEW.transline_price = NEW.transline_priceinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0);
END IF;
SET NEW.transline_disc = NEW.transline_discinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0);
SET NEW.transline_discother = NEW.transline_discotherinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0);
ELSE IF NEW.transline_discgroupline IS NULL THEN IF qqDiscGroup > 0 THEN
SET NEW.transline_discgroupline = qqDiscGroup * NEW.transline_distribusipersen / NULLIF(NEW.transline_qtyinput, 0);
SET NEW.transline_discgrouplinevalue = NEW.transline_discgroupline * qqExchangeValue;
END IF;
ELSE
SET NEW.transline_discgrouplinevalue = NEW.transline_discgroupline * qqExchangeValue;
END IF;
IF qqispricepiece = TRUE THEN
SET NEW.transline_price = NEW.transline_priceinput * NEW.transline_convertionqty;
ELSE
SET NEW.transline_price = NEW.transline_priceinput;
END IF;
SET NEW.transline_disc = NEW.transline_discinput;
SET NEW.transline_discother = NEW.transline_discotherinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0);
END IF;
SET NEW.transline_totaldiscvalue =(
		(
			COALESCE(NEW.transline_disc, 0) + COALESCE(NEW.transline_discother, 0) + COALESCE(NEW.transline_discgroupline, 0)
		) * COALESCE(NEW.transline_qtyinput, 0)
	);
SET NEW.transline_netraw =(
		COALESCE(NEW.transline_price, 0) - COALESCE(NEW.transline_disc, 0) - COALESCE(NEW.transline_discother, 0) - COALESCE(NEW.transline_discgroupline, 0)
	) * COALESCE(NEW.transline_qtyinput, 0);
SET NEW.transline_net = NEW.transline_netraw;
SET NEW.transline_netvalue = COALESCE(NEW.transline_net, 0) * qqExchangeValue;
SET NEW.transline_tax = COALESCE(NEW.transline_netraw, 0) * COALESCE(NEW.transline_taxrate, 0) / 100;
SET NEW.transline_taxvalue = NEW.transline_tax * qqExchangeValue;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transline_before_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = '';
DELIMITER / / CREATE TRIGGER `transline_before_update` BEFORE
UPDATE ON `transline` FOR EACH ROW BEGIN
DECLARE qqincludeVAT,
	qqispricepiece BOOLEAN;
DECLARE qqDiscGroup,
	qqExchangeValue DECIMAL(33, 15);
DECLARE qqTransTypeCode INT;
SET qqTransTypeCode =(
		SELECT trans_type
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET qqispricepiece =(
		SELECT trans_priceperpiece
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
IF (qqTransTypeCode = 1)
OR (qqTransTypeCode = 2)
OR (qqTransTypeCode = 3)
OR (qqTransTypeCode = 4)
OR (qqTransTypeCode = 7)
OR (qqTransTypeCode = 11)
OR (qqTransTypeCode = 12)
OR (qqTransTypeCode = 17)
OR (qqTransTypeCode = 23)
OR (qqTransTypeCode = 46)
OR (qqTransTypeCode = 47) THEN
SET NEW.transline_vector = 1;
ELSEIF (qqTransTypeCode = 5)
OR (qqTransTypeCode = 13)
OR (qqTransTypeCode = 14)
OR (qqTransTypeCode = 15)
OR (qqTransTypeCode = 16)
OR (qqTransTypeCode = 19) THEN
SET NEW.transline_vector = -1;
END IF;
SET qqincludeVAT =(
		SELECT trans_isincludevat
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET qqDiscGroup =(
		SELECT COALESCE(trans_discgroup, 0)
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET qqExchangeValue =(
		SELECT COALESCE(trans_exchangevalue, 0)
		FROM trans
		WHERE trans_id = NEW.trans_id
	);
SET NEW.transline_taxrate =(
		SELECT COALESCE(masterother_taxrate, 0)
		FROM masterother
		WHERE masterother_id = NEW.mastertax_id
	);
SET NEW.transline_convertionqty =(
		SELECT COALESCE(masteritemuom_convertionqty, 0)
		FROM masteritemuom
		WHERE masteritemuom_id = NEW.masteritemuom_id
	);
SET NEW.transline_qty = NEW.transline_qtyinput * NEW.transline_convertionqty * NEW.transline_vector;
IF qqincludeVAT = True THEN IF NEW.transline_discgroupline IS NULL THEN IF qqDiscGroup > 0 THEN
SET NEW.transline_discgroupline =(
		(
			qqDiscGroup / NULLIF(((100 + NEW.transline_taxrate) / 100), 0)
		) * NEW.transline_distribusipersen
	) / NULLIF(NEW.transline_qtyinput, 0);
SET NEW.transline_discgrouplinevalue = NEW.transline_discgroupline * qqExchangeValue;
END IF;
ELSE
SET NEW.transline_discgrouplinevalue = NEW.transline_discgroupline * qqExchangeValue;
END IF;
IF qqispricepiece = True THEN
SET NEW.transline_price =(
		NEW.transline_priceinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0)
	) * NEW.transline_convertionqty;
ELSE
SET NEW.transline_price = NEW.transline_priceinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0);
END IF;
SET NEW.transline_disc = NEW.transline_discinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0);
SET NEW.transline_discother = NEW.transline_discotherinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0);
ELSE IF NEW.transline_discgroupline IS NULL THEN IF qqDiscGroup > 0 THEN
SET NEW.transline_discgroupline = qqDiscGroup * NEW.transline_distribusipersen / NULLIF(NEW.transline_qtyinput, 0);
SET NEW.transline_discgrouplinevalue = NEW.transline_discgroupline * qqExchangeValue;
END IF;
ELSE
SET NEW.transline_discgrouplinevalue = NEW.transline_discgroupline * qqExchangeValue;
END IF;
IF qqispricepiece = TRUE THEN
SET NEW.transline_price = NEW.transline_priceinput * NEW.transline_convertionqty;
ELSE
SET NEW.transline_price = NEW.transline_priceinput;
END IF;
SET NEW.transline_disc = NEW.transline_discinput;
SET NEW.transline_discother = NEW.transline_discotherinput / NULLIF(((100 + COALESCE(NEW.transline_taxrate, 0)) / 100), 0);
END IF;
SET NEW.transline_totaldiscvalue =(
		(
			COALESCE(NEW.transline_disc, 0) + COALESCE(NEW.transline_discother, 0) + COALESCE(NEW.transline_discgroupline, 0)
		) * COALESCE(NEW.transline_qtyinput, 0)
	);
SET NEW.transline_netraw =(
		COALESCE(NEW.transline_price, 0) - COALESCE(NEW.transline_disc, 0) - COALESCE(NEW.transline_discother, 0) - COALESCE(NEW.transline_discgroupline, 0)
	) * COALESCE(NEW.transline_qtyinput, 0);
SET NEW.transline_net = NEW.transline_netraw;
SET NEW.transline_netvalue = COALESCE(NEW.transline_net, 0) * qqExchangeValue;
SET NEW.transline_tax = COALESCE(NEW.transline_netraw, 0) * COALESCE(NEW.transline_taxrate, 0) / 100;
SET NEW.transline_taxvalue = NEW.transline_tax * qqExchangeValue;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transserialbatch_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transserialbatch_before_insert BEFORE
INSERT ON transserialbatch FOR EACH ROW BEGIN
SET NEW.transserialbatch_qty = COALESCE(NEW.transserialbatch_vector, 0) * COALESCE(NEW.transserialbatch_qtyinput, 0);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.transserialbatch_before_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER transserialbatch_before_update BEFORE
UPDATE ON transserialbatch FOR EACH ROW BEGIN
SET NEW.transserialbatch_qty = COALESCE(NEW.transserialbatch_vector, 0) * COALESCE(NEW.transserialbatch_qtyinput, 0);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.trans_after_delete
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER trans_after_delete
AFTER DELETE ON trans FOR EACH ROW BEGIN
DECLARE qqketerangan,
	qqentitas,
	myid VARCHAR(255);
SET myid = UUID();
IF OLD.trans_type = 1 THEN
SET qqentitas = 'TRANS QUOTE BELI';
ELSEIF OLD.trans_type = 2 THEN
SET qqentitas = 'TRANS ORDER BELI';
ELSEIF OLD.trans_type = 3 THEN
SET qqentitas = 'TRANS DELIVERY BELI';
ELSEIF OLD.trans_type = 4 THEN
SET qqentitas = 'TRANS INVOICE BELI';
ELSEIF OLD.trans_type = 5 THEN
SET qqentitas = 'TRANS RETUR BELI';
ELSEIF OLD.trans_type = 6 THEN
SET qqentitas = 'TRANS BAYAR HUTANG';
ELSEIF OLD.trans_type = 7 THEN
SET qqentitas = 'TRANS UANG MUKA PEMBELIAN';
ELSEIF OLD.trans_type = 8 THEN
SET qqentitas = 'TRANS GIRO HUTANG CAIR';
ELSEIF OLD.trans_type = 9 THEN
SET qqentitas = 'TRANS UANG MUKA ORDER BELI';
ELSEIF OLD.trans_type = 10 THEN
SET qqentitas = 'TRANS REFUND ORDER BELI';
ELSEIF OLD.trans_type = 11 THEN
SET qqentitas = 'TRANS SALDO AWAL HUTANG';
ELSEIF OLD.trans_type = 12 THEN
SET qqentitas = 'TRANS SALDO AWAL BARANG';
ELSEIF OLD.trans_type = 13 THEN
SET qqentitas = 'TRANS QUOTE JUAL';
ELSEIF OLD.trans_type = 14 THEN
SET qqentitas = 'TRANS ORDER JUAL';
ELSEIF OLD.trans_type = 15 THEN
SET qqentitas = 'TRANS DELIVERY JUAL';
ELSEIF OLD.trans_type = 16 THEN
SET qqentitas = 'TRANS INVOICE JUAL';
ELSEIF OLD.trans_type = 17 THEN
SET qqentitas = 'TRANS RETUR JUAL';
ELSEIF OLD.trans_type = 18 THEN
SET qqentitas = 'TRANS BAYAR PIUTANG';
ELSEIF OLD.trans_type = 19 THEN
SET qqentitas = 'TRANS UANG MUKA JUAL';
ELSEIF OLD.trans_type = 20 THEN
SET qqentitas = 'TRANS GIRO PIUTANG CAIR';
ELSEIF OLD.trans_type = 21 THEN
SET qqentitas = 'TRANS UANG MUKA ORDER JUAL';
ELSEIF OLD.trans_type = 22 THEN
SET qqentitas = 'TRANS REFUND ORDER JUAL';
ELSEIF OLD.trans_type = 23 THEN
SET qqentitas = 'TRANS SALDO AWAL PIUTANG';
ELSEIF OLD.trans_type = 24 THEN
SET qqentitas = 'TRANS STOK ADJUSTMENT';
ELSEIF OLD.trans_type = 25 THEN
SET qqentitas = 'TRANS QUOTE ASSEMBLY';
ELSEIF OLD.trans_type = 26 THEN
SET qqentitas = 'TRANS ORDER ASSEMBLY';
ELSEIF OLD.trans_type = 27 THEN
SET qqentitas = 'TRANS ASSEMBLY';
ELSEIF OLD.trans_type = 28 THEN
SET qqentitas = 'TRANS QUOTE DISSASEMBLY';
ELSEIF OLD.trans_type = 29 THEN
SET qqentitas = 'TRANS ORDER DISSASEMBLY';
ELSEIF OLD.trans_type = 30 THEN
SET qqentitas = 'TRANS DISASSEMBLY';
ELSEIF OLD.trans_type = 31 THEN
SET qqentitas = 'TRANS QUOTE PINDAH GUDANG';
ELSEIF OLD.trans_type = 32 THEN
SET qqentitas = 'TRANS ORDER PINDAH GUDANG';
ELSEIF OLD.trans_type = 33 THEN
SET qqentitas = 'TRANS PINDAH GUDANG';
ELSEIF OLD.trans_type = 34 THEN
SET qqentitas = 'TRANS AKTIVA TETAP BELI';
ELSEIF OLD.trans_type = 36 THEN
SET qqentitas = 'TRANS AKTIVA PERAWATAN';
ELSEIF OLD.trans_type = 37 THEN
SET qqentitas = 'TRANS AKTIVA DISEWAKAN';
ELSEIF OLD.trans_type = 38 THEN
SET qqentitas = 'TRANS AKTIVA JUAL';
ELSEIF OLD.trans_type = 39 THEN
SET qqentitas = 'TRANS JURNAL UMUM';
ELSEIF OLD.trans_type = 40 THEN
SET qqentitas = 'TRANS ARUS MASUK';
ELSEIF OLD.trans_type = 41 THEN
SET qqentitas = 'TRANS ARUS KELUAR';
ELSEIF OLD.trans_type = 42 THEN
SET qqentitas = 'TRANS SETORAN DANA';
ELSEIF OLD.trans_type = 43 THEN
SET qqentitas = 'TRANS STOK OPNAM';
ELSEIF OLD.trans_type = 48 THEN
SET qqentitas = 'TRANS REFUND HUTANG';
ELSEIF OLD.trans_type = 49 THEN
SET qqentitas = 'TRANS REFUND PIUTANG';
ELSEIF OLD.trans_type = 50 THEN
SET qqentitas = 'TRANS HAPUS HUTANG';
ELSEIF OLD.trans_type = 51 THEN
SET qqentitas = 'TRANS HAPUS PIUTANG';
END IF;
SET qqketerangan = CONCAT(
		'menghapus ',
(
			SELECT masterprefix_description
			FROM masterprefix
			WHERE masterprefix_type = OLD.trans_type
				AND masterbussiness_id = OLD.masterbussiness_id
		)
	);
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		OLD.trans_id,
		qqentitas,
		'trans',
		qqketerangan,
		OLD.trans_text,
		OLD.masterbussiness_id,
		'D',
		OLD.trans_type,
		OLD.trans_olehubah,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO transhistory
VALUES(
		myid,
		'D',
		OLD.trans_id,
		OLD.transparent_id,
		OLD.masterwarehouse_id,
		OLD.masterstore_id,
		OLD.masteraccount_id,
		OLD.masterpartner_id,
		OLD.masterpartnerstaff_id,
		OLD.mastercreditterm_id,
		OLD.masterexpedisi_id,
		OLD.masterreason_id,
		OLD.masterwarehousetujuan_id,
		OLD.masterstoretujuan_id,
		OLD.masterexchange_id,
		OLD.masterfixasset_id,
		OLD.masterfixassetsusut_id,
		OLD.masterpartnersupport_id,
		OLD.transfakturline_id,
		OLD.masterpinjaman_id,
		OLD.masterplatform_id,
		OLD.masterbussiness_id,
		OLD.trans_text,
		OLD.trans_type,
		OLD.trans_status,
		OLD.trans_entrydate,
		OLD.trans_tanggalnotapembelian,
		OLD.trans_nomorgiro,
		OLD.trans_girojatem,
		OLD.trans_girocair,
		OLD.trans_identitas,
		OLD.trans_nama,
		OLD.trans_telp,
		OLD.trans_email,
		OLD.trans_alamat,
		OLD.trans_description,
		OLD.trans_nomornota,
		OLD.trans_exchangevalue,
		OLD.trans_creditperiod,
		OLD.trans_discgroup,
		OLD.trans_administrasi,
		OLD.trans_provisi,
		OLD.trans_lainnya,
		OLD.trans_isincludevat,
		OLD.trans_isdiscpersen,
		OLD.trans_isdiscpersendiscgroup,
		OLD.trans_isallocation,
		OLD.trans_syncstatus,
		OLD.trans_pemberidisc,
		OLD.trans_noresi,
		OLD.trans_mintafaktur,
		OLD.trans_isallowadditem,
		OLD.trans_isjumlahkan,
		OLD.trans_priceperpiece,
		OLD.trans_terupload,
		OLD.trans_olehubah,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.trans_after_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER trans_after_insert
AFTER
INSERT ON trans FOR EACH ROW BEGIN
DECLARE qqketerangan,
	qqentitas,
	myid VARCHAR(255);
SET myid = UUID();
IF NEW.trans_type = 1 THEN
SET qqentitas = 'TRANS QUOTE BELI';
ELSEIF NEW.trans_type = 2 THEN
SET qqentitas = 'TRANS ORDER BELI';
ELSEIF NEW.trans_type = 3 THEN
SET qqentitas = 'TRANS DELIVERY BELI';
ELSEIF NEW.trans_type = 4 THEN
SET qqentitas = 'TRANS INVOICE BELI';
ELSEIF NEW.trans_type = 5 THEN
SET qqentitas = 'TRANS RETUR BELI';
ELSEIF NEW.trans_type = 6 THEN
SET qqentitas = 'TRANS BAYAR HUTANG';
ELSEIF NEW.trans_type = 7 THEN
SET qqentitas = 'TRANS UANG MUKA PEMBELIAN';
ELSEIF NEW.trans_type = 8 THEN
SET qqentitas = 'TRANS GIRO HUTANG CAIR';
ELSEIF NEW.trans_type = 9 THEN
SET qqentitas = 'TRANS UANG MUKA ORDER BELI';
ELSEIF NEW.trans_type = 10 THEN
SET qqentitas = 'TRANS REFUND ORDER BELI';
ELSEIF NEW.trans_type = 11 THEN
SET qqentitas = 'TRANS SALDO AWAL HUTANG';
ELSEIF NEW.trans_type = 12 THEN
SET qqentitas = 'TRANS SALDO AWAL BARANG';
ELSEIF NEW.trans_type = 13 THEN
SET qqentitas = 'TRANS QUOTE JUAL';
ELSEIF NEW.trans_type = 14 THEN
SET qqentitas = 'TRANS ORDER JUAL';
ELSEIF NEW.trans_type = 15 THEN
SET qqentitas = 'TRANS DELIVERY JUAL';
ELSEIF NEW.trans_type = 16 THEN
SET qqentitas = 'TRANS INVOICE JUAL';
ELSEIF NEW.trans_type = 17 THEN
SET qqentitas = 'TRANS RETUR JUAL';
ELSEIF NEW.trans_type = 18 THEN
SET qqentitas = 'TRANS BAYAR PIUTANG';
ELSEIF NEW.trans_type = 19 THEN
SET qqentitas = 'TRANS UANG MUKA JUAL';
ELSEIF NEW.trans_type = 20 THEN
SET qqentitas = 'TRANS GIRO PIUTANG CAIR';
ELSEIF NEW.trans_type = 21 THEN
SET qqentitas = 'TRANS UANG MUKA ORDER JUAL';
ELSEIF NEW.trans_type = 22 THEN
SET qqentitas = 'TRANS REFUND ORDER JUAL';
ELSEIF NEW.trans_type = 23 THEN
SET qqentitas = 'TRANS SALDO AWAL PIUTANG';
ELSEIF NEW.trans_type = 24 THEN
SET qqentitas = 'TRANS STOK ADJUSTMENT';
ELSEIF NEW.trans_type = 25 THEN
SET qqentitas = 'TRANS QUOTE ASSEMBLY';
ELSEIF NEW.trans_type = 26 THEN
SET qqentitas = 'TRANS ORDER ASSEMBLY';
ELSEIF NEW.trans_type = 27 THEN
SET qqentitas = 'TRANS ASSEMBLY';
ELSEIF NEW.trans_type = 28 THEN
SET qqentitas = 'TRANS QUOTE DISSASEMBLY';
ELSEIF NEW.trans_type = 29 THEN
SET qqentitas = 'TRANS ORDER DISSASEMBLY';
ELSEIF NEW.trans_type = 30 THEN
SET qqentitas = 'TRANS DISASSEMBLY';
ELSEIF NEW.trans_type = 31 THEN
SET qqentitas = 'TRANS QUOTE PINDAH GUDANG';
ELSEIF NEW.trans_type = 32 THEN
SET qqentitas = 'TRANS ORDER PINDAH GUDANG';
ELSEIF NEW.trans_type = 33 THEN
SET qqentitas = 'TRANS PINDAH GUDANG';
ELSEIF NEW.trans_type = 34 THEN
SET qqentitas = 'TRANS AKTIVA TETAP BELI';
ELSEIF NEW.trans_type = 36 THEN
SET qqentitas = 'TRANS AKTIVA PERAWATAN';
ELSEIF NEW.trans_type = 37 THEN
SET qqentitas = 'TRANS AKTIVA DISEWAKAN';
ELSEIF NEW.trans_type = 38 THEN
SET qqentitas = 'TRANS AKTIVA JUAL';
ELSEIF NEW.trans_type = 39 THEN
SET qqentitas = 'TRANS JURNAL UMUM';
ELSEIF NEW.trans_type = 40 THEN
SET qqentitas = 'TRANS ARUS MASUK';
ELSEIF NEW.trans_type = 41 THEN
SET qqentitas = 'TRANS ARUS KELUAR';
ELSEIF NEW.trans_type = 42 THEN
SET qqentitas = 'TRANS SETORAN DANA';
ELSEIF NEW.trans_type = 43 THEN
SET qqentitas = 'TRANS STOK OPNAM';
ELSEIF NEW.trans_type = 48 THEN
SET qqentitas = 'TRANS REFUND HUTANG';
ELSEIF NEW.trans_type = 49 THEN
SET qqentitas = 'TRANS REFUND PIUTANG';
ELSEIF NEW.trans_type = 50 THEN
SET qqentitas = 'TRANS HAPUS HUTANG';
ELSEIF NEW.trans_type = 51 THEN
SET qqentitas = 'TRANS HAPUS PIUTANG';
END IF;
SET qqketerangan = CONCAT(
		'menambahkan ',
(
			SELECT masterprefix_description
			FROM masterprefix
			WHERE masterprefix_type = NEW.trans_type
				AND masterbussiness_id = NEW.masterbussiness_id
		)
	);
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.trans_id,
		qqentitas,
		'trans',
		qqketerangan,
		NEW.trans_text,
		NEW.masterbussiness_id,
		'I',
		NEW.trans_type,
		NEW.trans_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO transhistory
VALUES(
		myid,
		'I',
		NEW.trans_id,
		NEW.transparent_id,
		NEW.masterwarehouse_id,
		NEW.masterstore_id,
		NEW.masteraccount_id,
		NEW.masterpartner_id,
		NEW.masterpartnerstaff_id,
		NEW.mastercreditterm_id,
		NEW.masterexpedisi_id,
		NEW.masterreason_id,
		NEW.masterwarehousetujuan_id,
		NEW.masterstoretujuan_id,
		NEW.masterexchange_id,
		NEW.masterfixasset_id,
		NEW.masterfixassetsusut_id,
		NEW.masterpartnersupport_id,
		NEW.transfakturline_id,
		NEW.masterpinjaman_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.trans_text,
		NEW.trans_type,
		NEW.trans_status,
		NEW.trans_entrydate,
		NEW.trans_tanggalnotapembelian,
		NEW.trans_nomorgiro,
		NEW.trans_girojatem,
		NEW.trans_girocair,
		NEW.trans_identitas,
		NEW.trans_nama,
		NEW.trans_telp,
		NEW.trans_email,
		NEW.trans_alamat,
		NEW.trans_description,
		NEW.trans_nomornota,
		NEW.trans_exchangevalue,
		NEW.trans_creditperiod,
		NEW.trans_discgroup,
		NEW.trans_administrasi,
		NEW.trans_provisi,
		NEW.trans_lainnya,
		NEW.trans_isincludevat,
		NEW.trans_isdiscpersen,
		NEW.trans_isdiscpersendiscgroup,
		NEW.trans_isallocation,
		NEW.trans_syncstatus,
		NEW.trans_pemberidisc,
		NEW.trans_noresi,
		NEW.trans_mintafaktur,
		NEW.trans_isallowadditem,
		NEW.trans_isjumlahkan,
		NEW.trans_priceperpiece,
		NEW.trans_terupload,
		NEW.trans_oleh,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
IF EXISTS(
	SELECT b.masteruserbussiness_id
	FROM trans h,
		masterprefix f,
		generalsettingapprove a,
		generalsettingapproveline b
	WHERE h.trans_type = f.masterprefix_type
		AND f.masterprefix_id = a.masterprefix_id
		AND a.generalsettingapprove_id = b.generalsettingapprove_id
		AND h.trans_id = NEW.trans_id
		AND f.masterbussiness_id = NEW.masterbussiness_id
) THEN
INSERT INTO transapprove
SELECT UUID(),
	h.trans_id,
	b.masteruserbussiness_id,
	h.masterbussiness_id,
(NULL),
	0,
	0,
(NULL),
(NULL)
FROM trans h,
	masterprefix f,
	generalsettingapprove a,
	generalsettingapproveline b
WHERE h.trans_type = f.masterprefix_type
	AND f.masterprefix_id = a.masterprefix_id
	AND a.generalsettingapprove_id = b.generalsettingapprove_id
	AND h.trans_id = NEW.trans_id
	AND f.masterbussiness_id = NEW.masterbussiness_id;
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.trans_after_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER trans_after_update
AFTER
UPDATE ON trans FOR EACH ROW BEGIN
DECLARE qqketerangan,
	qqstatus,
	qqentitas,
	myid VARCHAR(255);
SET myid = UUID();
IF NEW.trans_status = 'C' THEN
SET qqketerangan = CONCAT(
		'menghapus ',
(
			SELECT masterprefix_description
			FROM masterprefix
			WHERE masterprefix_type = NEW.trans_type
				AND masterbussiness_id = NEW.masterbussiness_id
		)
	);
SET qqstatus = 'D';
ELSEIF NEW.trans_status = 'O' THEN
SET qqketerangan = CONCAT(
		'merubah ',
(
			SELECT masterprefix_description
			FROM masterprefix
			WHERE masterprefix_type = NEW.trans_type
				AND masterbussiness_id = NEW.masterbussiness_id
		)
	);
SET qqstatus = 'U';
ELSEIF NEW.trans_status = 'H' THEN
SET qqketerangan = CONCAT(
		'merubah ',
(
			SELECT masterprefix_description
			FROM masterprefix
			WHERE masterprefix_type = NEW.trans_type
				AND masterbussiness_id = NEW.masterbussiness_id
		)
	);
SET qqstatus = 'U';
ELSEIF NEW.trans_status = 'CT' THEN
SET qqketerangan = CONCAT(
		'merubah ',
(
			SELECT masterprefix_description
			FROM masterprefix
			WHERE masterprefix_type = NEW.trans_type
				AND masterbussiness_id = NEW.masterbussiness_id
		)
	);
SET qqstatus = 'U';
ELSEIF NEW.trans_status = 'OD' THEN
SET qqketerangan = CONCAT(
		'merubah ',
(
			SELECT masterprefix_description
			FROM masterprefix
			WHERE masterprefix_type = NEW.trans_type
				AND masterbussiness_id = NEW.masterbussiness_id
		)
	);
SET qqstatus = 'U';
ELSEIF NEW.trans_status = 'P' THEN
SET qqketerangan = CONCAT(
		'merubah ',
(
			SELECT masterprefix_description
			FROM masterprefix
			WHERE masterprefix_type = NEW.trans_type
				AND masterbussiness_id = NEW.masterbussiness_id
		)
	);
SET qqstatus = 'U';
END IF;
IF NEW.trans_type = 1 THEN
SET qqentitas = 'TRANS QUOTE BELI';
ELSEIF NEW.trans_type = 2 THEN
SET qqentitas = 'TRANS ORDER BELI';
ELSEIF NEW.trans_type = 3 THEN
SET qqentitas = 'TRANS DELIVERY BELI';
ELSEIF NEW.trans_type = 4 THEN
SET qqentitas = 'TRANS INVOICE BELI';
ELSEIF NEW.trans_type = 5 THEN
SET qqentitas = 'TRANS RETUR BELI';
ELSEIF NEW.trans_type = 6 THEN
SET qqentitas = 'TRANS BAYAR HUTANG';
ELSEIF NEW.trans_type = 7 THEN
SET qqentitas = 'TRANS UANG MUKA PEMBELIAN';
ELSEIF NEW.trans_type = 8 THEN
SET qqentitas = 'TRANS GIRO HUTANG CAIR';
ELSEIF NEW.trans_type = 9 THEN
SET qqentitas = 'TRANS UANG MUKA ORDER BELI';
ELSEIF NEW.trans_type = 10 THEN
SET qqentitas = 'TRANS REFUND ORDER BELI';
ELSEIF NEW.trans_type = 11 THEN
SET qqentitas = 'TRANS SALDO AWAL HUTANG';
ELSEIF NEW.trans_type = 12 THEN
SET qqentitas = 'TRANS SALDO AWAL BARANG';
ELSEIF NEW.trans_type = 13 THEN
SET qqentitas = 'TRANS QUOTE JUAL';
ELSEIF NEW.trans_type = 14 THEN
SET qqentitas = 'TRANS ORDER JUAL';
ELSEIF NEW.trans_type = 15 THEN
SET qqentitas = 'TRANS DELIVERY JUAL';
ELSEIF NEW.trans_type = 16 THEN
SET qqentitas = 'TRANS INVOICE JUAL';
ELSEIF NEW.trans_type = 17 THEN
SET qqentitas = 'TRANS RETUR JUAL';
ELSEIF NEW.trans_type = 18 THEN
SET qqentitas = 'TRANS BAYAR PIUTANG';
ELSEIF NEW.trans_type = 19 THEN
SET qqentitas = 'TRANS UANG MUKA JUAL';
ELSEIF NEW.trans_type = 20 THEN
SET qqentitas = 'TRANS GIRO PIUTANG CAIR';
ELSEIF NEW.trans_type = 21 THEN
SET qqentitas = 'TRANS UANG MUKA ORDER JUAL';
ELSEIF NEW.trans_type = 22 THEN
SET qqentitas = 'TRANS REFUND ORDER JUAL';
ELSEIF NEW.trans_type = 23 THEN
SET qqentitas = 'TRANS SALDO AWAL PIUTANG';
ELSEIF NEW.trans_type = 24 THEN
SET qqentitas = 'TRANS STOK ADJUSTMENT';
ELSEIF NEW.trans_type = 25 THEN
SET qqentitas = 'TRANS QUOTE ASSEMBLY';
ELSEIF NEW.trans_type = 26 THEN
SET qqentitas = 'TRANS ORDER ASSEMBLY';
ELSEIF NEW.trans_type = 27 THEN
SET qqentitas = 'TRANS ASSEMBLY';
ELSEIF NEW.trans_type = 28 THEN
SET qqentitas = 'TRANS QUOTE DISSASEMBLY';
ELSEIF NEW.trans_type = 29 THEN
SET qqentitas = 'TRANS ORDER DISSASEMBLY';
ELSEIF NEW.trans_type = 30 THEN
SET qqentitas = 'TRANS DISASSEMBLY';
ELSEIF NEW.trans_type = 31 THEN
SET qqentitas = 'TRANS QUOTE PINDAH GUDANG';
ELSEIF NEW.trans_type = 32 THEN
SET qqentitas = 'TRANS ORDER PINDAH GUDANG';
ELSEIF NEW.trans_type = 33 THEN
SET qqentitas = 'TRANS PINDAH GUDANG';
ELSEIF NEW.trans_type = 34 THEN
SET qqentitas = 'TRANS AKTIVA TETAP BELI';
ELSEIF NEW.trans_type = 36 THEN
SET qqentitas = 'TRANS AKTIVA PERAWATAN';
ELSEIF NEW.trans_type = 37 THEN
SET qqentitas = 'TRANS AKTIVA DISEWAKAN';
ELSEIF NEW.trans_type = 38 THEN
SET qqentitas = 'TRANS AKTIVA JUAL';
ELSEIF NEW.trans_type = 39 THEN
SET qqentitas = 'TRANS JURNAL UMUM';
ELSEIF NEW.trans_type = 40 THEN
SET qqentitas = 'TRANS ARUS MASUK';
ELSEIF NEW.trans_type = 41 THEN
SET qqentitas = 'TRANS ARUS KELUAR';
ELSEIF NEW.trans_type = 42 THEN
SET qqentitas = 'TRANS SETORAN DANA';
ELSEIF NEW.trans_type = 43 THEN
SET qqentitas = 'TRANS STOK OPNAM';
ELSEIF NEW.trans_type = 48 THEN
SET qqentitas = 'TRANS REFUND HUTANG';
ELSEIF NEW.trans_type = 49 THEN
SET qqentitas = 'TRANS REFUND PIUTANG';
ELSEIF NEW.trans_type = 50 THEN
SET qqentitas = 'TRANS HAPUS HUTANG';
ELSEIF NEW.trans_type = 51 THEN
SET qqentitas = 'TRANS HAPUS PIUTANG';
END IF;
IF NEW.trans_status = "C" THEN
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.trans_id,
		qqentitas,
		'trans',
		qqketerangan,
		NEW.trans_text,
		NEW.masterbussiness_id,
		qqstatus,
		NEW.trans_type,
		NEW.trans_olehubah,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO transhistory
VALUES(
		myid,
		'D',
		NEW.trans_id,
		NEW.transparent_id,
		NEW.masterwarehouse_id,
		NEW.masterstore_id,
		NEW.masteraccount_id,
		NEW.masterpartner_id,
		NEW.masterpartnerstaff_id,
		NEW.mastercreditterm_id,
		NEW.masterexpedisi_id,
		NEW.masterreason_id,
		NEW.masterwarehousetujuan_id,
		NEW.masterstoretujuan_id,
		NEW.masterexchange_id,
		NEW.masterfixasset_id,
		NEW.masterfixassetsusut_id,
		NEW.masterpartnersupport_id,
		NEW.transfakturline_id,
		NEW.masterpinjaman_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.trans_text,
		NEW.trans_type,
		NEW.trans_status,
		NEW.trans_entrydate,
		NEW.trans_tanggalnotapembelian,
		NEW.trans_nomorgiro,
		NEW.trans_girojatem,
		NEW.trans_girocair,
		NEW.trans_identitas,
		NEW.trans_nama,
		NEW.trans_telp,
		NEW.trans_email,
		NEW.trans_alamat,
		NEW.trans_description,
		NEW.trans_nomornota,
		NEW.trans_exchangevalue,
		NEW.trans_creditperiod,
		NEW.trans_discgroup,
		NEW.trans_administrasi,
		NEW.trans_provisi,
		NEW.trans_lainnya,
		NEW.trans_isincludevat,
		NEW.trans_isdiscpersen,
		NEW.trans_isdiscpersendiscgroup,
		NEW.trans_isallocation,
		NEW.trans_syncstatus,
		NEW.trans_pemberidisc,
		NEW.trans_noresi,
		NEW.trans_mintafaktur,
		NEW.trans_isallowadditem,
		NEW.trans_isjumlahkan,
		NEW.trans_priceperpiece,
		NEW.trans_terupload,
		NEW.trans_olehubah,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
ELSE
INSERT INTO historylog(
		historylog_id,
		historylog_keyunique,
		historylog_entitas,
		historylog_namatabel,
		historylog_alias,
		historylog_value,
		masterbussiness_id,
		historylog_mode,
		historylog_type,
		historylog_oleh,
		historylog_waktu
	)
VALUES(
		myid,
		NEW.trans_id,
		qqentitas,
		'trans',
		qqketerangan,
		NEW.trans_text,
		NEW.masterbussiness_id,
		qqstatus,
		NEW.trans_type,
		NEW.trans_olehubah,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
INSERT INTO transhistory
VALUES(
		myid,
		'U',
		NEW.trans_id,
		NEW.transparent_id,
		NEW.masterwarehouse_id,
		NEW.masterstore_id,
		NEW.masteraccount_id,
		NEW.masterpartner_id,
		NEW.masterpartnerstaff_id,
		NEW.mastercreditterm_id,
		NEW.masterexpedisi_id,
		NEW.masterreason_id,
		NEW.masterwarehousetujuan_id,
		NEW.masterstoretujuan_id,
		NEW.masterexchange_id,
		NEW.masterfixasset_id,
		NEW.masterfixassetsusut_id,
		NEW.masterpartnersupport_id,
		NEW.transfakturline_id,
		NEW.masterpinjaman_id,
		NEW.masterplatform_id,
		NEW.masterbussiness_id,
		NEW.trans_text,
		NEW.trans_type,
		NEW.trans_status,
		NEW.trans_entrydate,
		NEW.trans_tanggalnotapembelian,
		NEW.trans_nomorgiro,
		NEW.trans_girojatem,
		NEW.trans_girocair,
		NEW.trans_identitas,
		NEW.trans_nama,
		NEW.trans_telp,
		NEW.trans_email,
		NEW.trans_alamat,
		NEW.trans_description,
		NEW.trans_nomornota,
		NEW.trans_exchangevalue,
		NEW.trans_creditperiod,
		NEW.trans_discgroup,
		NEW.trans_administrasi,
		NEW.trans_provisi,
		NEW.trans_lainnya,
		NEW.trans_isincludevat,
		NEW.trans_isdiscpersen,
		NEW.trans_isdiscpersendiscgroup,
		NEW.trans_isallocation,
		NEW.trans_syncstatus,
		NEW.trans_pemberidisc,
		NEW.trans_noresi,
		NEW.trans_mintafaktur,
		NEW.trans_isallowadditem,
		NEW.trans_isjumlahkan,
		NEW.trans_priceperpiece,
		NEW.trans_terupload,
		NEW.trans_olehubah,
		ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
	);
END IF;
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.trans_before_insert
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER trans_before_insert BEFORE
INSERT ON trans FOR EACH ROW BEGIN IF COALESCE(NEW.trans_exchangevalue, 0) = 0 THEN
SET NEW.trans_exchangevalue =(
		SELECT COALESCE(masterother_exchangevalue, 0)
		FROM masterother
		WHERE masterother_id = NEW.masterexchange_id
	);
END IF;
IF (NEW.trans_type = 3)
OR(NEW.trans_type = 4)
OR(NEW.trans_type = 5)
OR(NEW.trans_type = 12)
OR(NEW.trans_type = 15)
OR(NEW.trans_type = 16)
OR(NEW.trans_type = 17)
OR(NEW.trans_type = 24)
OR(NEW.trans_type = 27)
OR(NEW.trans_type = 30)
OR(NEW.trans_type = 33)
OR(NEW.trans_type = 43) THEN
SET NEW.trans_isallocation = 1;
END IF;
SET NEW.trans_waktu = ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for trigger gogabook.trans_before_update
SET @OLDTMP_SQL_MODE = @@SQL_MODE,
	SQL_MODE = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
DELIMITER / / CREATE TRIGGER trans_before_update BEFORE
UPDATE ON trans FOR EACH ROW BEGIN IF (NEW.trans_type = 3)
	OR(NEW.trans_type = 4)
	OR(NEW.trans_type = 5)
	OR(NEW.trans_type = 12)
	OR(NEW.trans_type = 15)
	OR(NEW.trans_type = 16)
	OR(NEW.trans_type = 17)
	OR(NEW.trans_type = 24)
	OR(NEW.trans_type = 27)
	OR(NEW.trans_type = 30)
	OR(NEW.trans_type = 33)
	OR(NEW.trans_type = 43) THEN
SET NEW.trans_isallocation = 1;
END IF;
SET NEW.trans_waktuubah = ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000);
END / / DELIMITER;
SET SQL_MODE = @OLDTMP_SQL_MODE;
-- Dumping structure for view gogabook.v_approval
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_approval`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_approval` AS
select uuid() AS `id`,
	`h`.`trans_id` AS `trans_id`,
(
		case
			when (sum(`a`.`transapprove_status`) = 0) then 'BELUM DI APPROVE'
			when (sum(`a`.`transapprove_status`) >= count(0)) then 'APPROVED'
			when (
				(`b`.`generalsettingapprove_operator` = 0)
				and (sum(`a`.`transapprove_status`) > 0)
			) then 'APPROVED'
			when (
				(`b`.`generalsettingapprove_operator` = 1)
				and (sum(`a`.`transapprove_status`) = count(0))
			) then 'APPROVED'
			when (
				(`b`.`generalsettingapprove_operator` = 1)
				and (sum(`a`.`transapprove_status`) > 0)
			) then 'APPROVED PARTIAL'
		end
	) AS `statusapproval`
from (
		(
			(
				`trans` `h`
				join `transapprove` `a`
			)
			join `generalsettingapprove` `b`
		)
		join `masterprefix` `f`
	)
where (
		(`h`.`trans_id` = `a`.`trans_id`)
		and (
			`h`.`masterbussiness_id` = `b`.`masterbussiness_id`
		)
		and (`b`.`masterprefix_id` = `f`.`masterprefix_id`)
		and (`h`.`trans_type` = `f`.`masterprefix_type`)
		and (
			`h`.`masterbussiness_id` = `f`.`masterbussiness_id`
		)
	)
group by `h`.`trans_id`;
-- Dumping structure for view gogabook.v_cetak
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_cetak`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_cetak` AS
select `transprint`.`trans_id` AS `trans_id`,
	count(0) AS `trans_qtycetak`
from `transprint`
group by `transprint`.`trans_id`;
-- Dumping structure for view gogabook.v_estimasiproduksihpp
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_estimasiproduksihpp`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_estimasiproduksihpp` AS
select uuid() AS `id`,
	`h`.`prod_id` AS `prod_id`,
	`h`.`masteritem_id` AS `masteritem_id`,
	sum((`d`.`prodline_qtyused` * `hp`.`hpp`)) AS `totalhpp`
from (
		(
			(
				(
					`prod` `h`
					join `prodline` `d`
				)
				join `masteritem` `hi`
			)
			join `masteritemuom` `iu`
		)
		join (
			`masteritem` `i`
			left join `v_gethpp` `hp` on((`i`.`masteritem_id` = `hp`.`masteritem_id`))
		)
	)
where (
		(`h`.`prod_id` = `d`.`prod_id`)
		and (`h`.`masteritem_id` = `hi`.`masteritem_id`)
		and (`d`.`masteritemuom_id` = `iu`.`masteritemuom_id`)
		and (`iu`.`masteritem_id` = `i`.`masteritem_id`)
	)
group by `h`.`prod_id`;
-- Dumping structure for view gogabook.v_fakturpajak
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_fakturpajak`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_fakturpajak` AS
select uuid() AS `id`,
	`h`.`transfaktur_id` AS `transfaktur_id`,
	coalesce(`ft`.`jumlah`, 0) AS `jumlah`,
	coalesce(`fi`.`jumterisi`, 0) AS `jumterisi`,
(
		coalesce(`ft`.`jumlah`, 0) - coalesce(`fi`.`jumterisi`, 0)
	) AS `sisa`
from (
		(
			`gogabook`.`transfaktur` `h`
			left join (
				select `fd`.`transfaktur_id` AS `transfaktur_id`,
					count(0) AS `jumterisi`
				from (
						`gogabook`.`trans` `h`
						join `gogabook`.`transfakturline` `fd`
					)
				where (
						(
							`h`.`transfakturline_id` = `fd`.`transfakturline_id`
						)
						and (`h`.`trans_status` = 'P')
					)
				group by `fd`.`transfaktur_id`
			) `fi` on((`h`.`transfaktur_id` = `fi`.`transfaktur_id`))
		)
		join (
			select `gogabook`.`transfakturline`.`transfaktur_id` AS `transfaktur_id`,
				count(0) AS `jumlah`
			from `gogabook`.`transfakturline`
			group by `gogabook`.`transfakturline`.`transfaktur_id`
		) `ft`
	)
where (`h`.`transfaktur_id` = `ft`.`transfaktur_id`);
-- Dumping structure for view gogabook.v_gethpp
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_gethpp`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_gethpp` AS
select uuid() AS `id`,
	`d`.`masteritem_id` AS `masteritem_id`,
	coalesce(
		(
			sum(`dh`.`translinehpp_totalhpp`) / sum(`d`.`transline_qty`)
		),
		0
	) AS `hpp`
from (
		(
			(
				`trans` `h`
				join `transline` `d`
			)
			join `translinehpp` `dh`
		)
		join `masteritem` `i`
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`d`.`transline_id` = `dh`.`transline_id`)
		and (`d`.`masteritem_id` = `i`.`masteritem_id`)
		and (`d`.`transline_qtyinput` > 0)
		and (`h`.`trans_status` = 'P')
		and (`h`.`trans_type` <> 33)
	)
group by `d`.`masteritem_id`
order by `d`.`masteritem_id`;
-- Dumping structure for view gogabook.v_getlastbeli
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_getlastbeli`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_getlastbeli` AS
select uuid() AS `id`,
	`h`.`masterpartner_id` AS `masterpartner_id`,
	`h`.`trans_text` AS `trans_text`,
	`h`.`trans_entrydate` AS `trans_entrydate`,
	`d`.`masteritem_id` AS `masteritem_id`,
	`t`.`transline_qtyinput` AS `transline_qtyinput`,
	`t`.`masteruom_description` AS `masteruom_description`,
	`d`.`transline_convertionqty` AS `transline_convertionqty`,
	`d`.`transline_priceinput` AS `transline_priceinput`,
	`d`.`transline_price` AS `transline_price`,
	`d`.`transline_discinput` AS `transline_discinput`,
	`d`.`transline_disc` AS `transline_disc`
from (
		(
			`gogabook`.`trans` `h`
			join `gogabook`.`transline` `d`
		)
		join (
			select `d`.`masteritem_id` AS `masteritem_id`,
				max(`h`.`trans_entrydate`) AS `trans_entrydate`,
				`d`.`transline_qtyinput` AS `transline_qtyinput`,
				`d`.`masteritemuom_id` AS `masteritemuom_id`,
				`u`.`masterother_description` AS `masteruom_description`
			from (
					(
						(
							`gogabook`.`trans` `h`
							join `gogabook`.`transline` `d`
						)
						join `gogabook`.`masteritemuom` `iu`
					)
					join `gogabook`.`masterother` `u`
				)
			where (
					(`h`.`trans_id` = `d`.`trans_id`)
					and (`d`.`masteritemuom_id` = `iu`.`masteritemuom_id`)
					and (`iu`.`masteruom_id` = `u`.`masterother_id`)
					and (`h`.`trans_status` = 'P')
					and (`h`.`trans_type` in (3, 4))
				)
			group by `d`.`masteritem_id`
			order by `h`.`trans_entrydate`
		) `t`
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`d`.`masteritem_id` = `t`.`masteritem_id`)
		and (`h`.`trans_entrydate` = `t`.`trans_entrydate`)
		and (`h`.`trans_status` = 'P')
		and (`h`.`trans_type` = 4)
	)
group by `d`.`masteritem_id`
order by `d`.`masteritem_id`;
-- Dumping structure for view gogabook.v_getlastjual
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_getlastjual`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_getlastjual` AS
select uuid() AS `id`,
	`h`.`masterpartner_id` AS `masterpartner_id`,
	`h`.`trans_text` AS `trans_text`,
	`h`.`trans_entrydate` AS `trans_entrydate`,
	`h`.`trans_exchangevalue` AS `trans_exchangevalue`,
	`d`.`masteritem_id` AS `masteritem_id`,
	`d`.`transline_qtyinput` AS `transline_qtyinput`,
	`u`.`masterother_description` AS `masteruom_description`,
	`d`.`transline_convertionqty` AS `transline_convertionqty`,
	`d`.`transline_priceinput` AS `transline_priceinput`,
	`d`.`transline_price` AS `transline_price`,
	`d`.`transline_discinput` AS `transline_discinput`,
	`d`.`transline_disc` AS `transline_disc`
from (
		(
			(
				(
					(
						(
							`gogabook`.`trans` `h`
							join `gogabook`.`transline` `d`
						)
						join `gogabook`.`masteritem` `i`
					)
					join `gogabook`.`masteritemuom` `iu`
				)
				join `gogabook`.`masterother` `u`
			)
			join `gogabook`.`masterpartner` `p`
		)
		join (
			select `d`.`masteritem_id` AS `masteritem_id`,
				max(`h`.`trans_entrydate`) AS `trans_entrydate`
			from (
					`gogabook`.`trans` `h`
					join `gogabook`.`transline` `d`
				)
			where (
					(`h`.`trans_id` = `d`.`trans_id`)
					and (`h`.`trans_status` = 'P')
					and (`h`.`trans_type` = 16)
					and (`d`.`masteritem_id` is not null)
				)
			group by `d`.`masteritem_id`
		) `l`
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`d`.`masteritem_id` = `i`.`masteritem_id`)
		and (`d`.`masteritemuom_id` = `iu`.`masteritemuom_id`)
		and (`iu`.`masteruom_id` = `u`.`masterother_id`)
		and (`h`.`masterpartner_id` = `p`.`masterpartner_id`)
		and (`d`.`masteritem_id` = `l`.`masteritem_id`)
		and (`h`.`trans_entrydate` = `l`.`trans_entrydate`)
		and (`h`.`trans_status` = 'P')
		and (`h`.`trans_type` = 16)
	)
group by `d`.`masteritem_id`;
-- Dumping structure for view gogabook.v_gl
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_gl`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_gl` AS
select `h`.`gl_id` AS `gl_id`,
	`h`.`trans_id` AS `trans_id`,
	`h`.`gl_text` AS `gl_text`,
	`h`.`gl_description` AS `gl_description`,
	cast(
		from_unixtime((`h`.`gl_entrydate` DIV 1000)) as date
	) AS `gl_entrydate`,
	`e`.`masterother_description` AS `masterother_description`,
	`d`.`glline_exchangevalue` AS `glline_exchangevalue`,
(`d`.`glline_amountvalue` * `d`.`glline_vector`) AS `d.glline_amountvalue*d.glline_vector`
from (
		(
			(
				(
					(
						`trans` `hh`
						left join `gl` `h` on((`hh`.`trans_id` = `h`.`trans_id`))
					)
					left join `glline` `d` on((`h`.`gl_id` = `d`.`gl_id`))
				)
				left join `masteraccount` `a` on(
					(`d`.`masteraccount_id` = `a`.`masteraccount_id`)
				)
			)
			left join `masteritem` `i` on((`d`.`masteritem_id` = `i`.`masteritem_id`))
		)
		left join `masterother` `e` on((`d`.`masterexchange_id` = `e`.`masterother_id`))
	)
where (
		(`h`.`gl_id` = `d`.`gl_id`)
		and (
			`h`.`masterbussiness_id` = '44fd4330-8a62-11ed-b0c2-e59127f33fab'
		)
	)
order by `hh`.`trans_entrydate`;
-- Dumping structure for view gogabook.v_listakun
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_listakun`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_listakun` AS
select uuid() AS `id`,
	`hq`.`trans_id` AS `trans_id`,
	`h`.`gl_id` AS `gl_id`,
	`d`.`glline_id` AS `glline_id`,
	`d`.`masteraccount_id` AS `masteraccount_id`,
	`hq`.`masterpartner_id` AS `masterpartner_id`,
	`hq`.`masterbussiness_id` AS `masterbussiness_id`,
	`hq`.`trans_text` AS `trans_text`,
	`p`.`masterpartner_description` AS `masterpartner_description`,
	`p`.`masterpartner_alias` AS `masterpartner_alias`,
	`a`.`masteraccount_description` AS `masteraccount_description`,
	`a`.`masteraccount_alias` AS `masteraccount_alias`,
	`i`.`masteritem_description` AS `masteritem_description`,
	`i`.`masteritem_alias` AS `masteritem_alias`,
	`hq`.`trans_description` AS `trans_description`,
	`d`.`glline_description` AS `glline_description`,
	`hq`.`trans_type` AS `trans_type`,
	`hq`.`trans_oleh` AS `trans_oleh`,
	cast(
		from_unixtime((`hq`.`trans_entrydate` DIV 1000)) as date
	) AS `trans_entrydate`,
(
		case
			when (`d`.`glline_vector` = 1) then `d`.`glline_amountvalue`
			else 0
		end
	) AS `masuk`,
(
		case
			when (`d`.`glline_vector` = -(1)) then `d`.`glline_amountvalue`
			else 0
		end
	) AS `keluar`,
(`d`.`glline_amountvalue` * `d`.`glline_vector`) AS `nilai`
from (
		(
			(
				(
					`trans` `hq`
					left join `masterpartner` `p` on(
						(`hq`.`masterpartner_id` = `p`.`masterpartner_id`)
					)
				)
				join `gl` `h`
			)
			join (
				`glline` `d`
				left join `masteritem` `i` on((`d`.`masteritem_id` = `i`.`masteritem_id`))
			)
		)
		join `masteraccount` `a`
	)
where (
		(`hq`.`trans_id` = `h`.`trans_id`)
		and (`h`.`gl_id` = `d`.`gl_id`)
		and (`d`.`masteraccount_id` = `a`.`masteraccount_id`)
		and (`hq`.`trans_status` = 'P')
	)
order by `hq`.`masterbussiness_id`,
	`a`.`masteraccount_description`,
	`hq`.`trans_waktu`,
	`hq`.`trans_entrydate`;
-- Dumping structure for view gogabook.v_listavg
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_listavg`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_listavg` AS
select `d`.`masteritem_id` AS `masteritem_id`,
	`d`.`masterbussiness_id` AS `masterbussiness_id`,
	coalesce(
		(
			sum(`dh`.`translinehpp_totalhpp`) / sum(`d`.`transline_qty`)
		),
		0
	) AS `nilaiavg`
from (
		(
			(
				(
					`trans` `h`
					join (
						`transline` `d`
						left join `translinehpp` `dh` on((`d`.`transline_id` = `dh`.`transline_id`))
					)
				)
				join `masteritem` `i`
			)
			join `masteritemcategory` `c`
		)
		join `masteritemtype` `t`
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`d`.`masteritem_id` = `i`.`masteritem_id`)
		and (
			`i`.`masteritemcategory_id` = `c`.`masteritemcategory_id`
		)
		and (
			`c`.`masteritemtype_id` = `t`.`masteritemtype_id`
		)
		and (`t`.`masteritemtype_isstock` = 1)
		and (`h`.`trans_status` = 'P')
		and (`h`.`trans_type` in (4, 5, 12, 16, 17, 24, 27, 30))
	)
group by `d`.`masteritem_id`,
	`d`.`masterbussiness_id`
order by `d`.`masterbussiness_id`,
	`d`.`masteritem_id`;
-- Dumping structure for view gogabook.v_listbarang
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_listbarang`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_listbarang` AS
select `h`.`trans_id` AS `trans_id`,
	`i`.`masteritem_id` AS `masteritem_id`,
	`h`.`masterpartner_id` AS `masterpartner_id`,
	`h`.`masterbussiness_id` AS `masterbussiness_id`,
	`h`.`trans_text` AS `trans_text`,
	`h`.`trans_type` AS `trans_type`,
	`e`.`masterother_description` AS `nmkurs`,
	`i`.`masteritem_description` AS `masteritem_description`,
	`i`.`masteritem_alias` AS `masteritem_alias`,
	`w`.`masterwarehouse_description` AS `masterwarehouse_description`,
	`p`.`masterpartner_description` AS `masterpartner_description`,
	`p`.`masterpartner_alias` AS `masterpartner_alias`,
	`h`.`trans_entrydate` AS `trans_entrydateutc`,
	cast(
		from_unixtime((`h`.`trans_entrydate` DIV 1000)) as date
	) AS `trans_entrydate`,
	`h`.`trans_description` AS `trans_description`,
	`h`.`trans_nomornota` AS `trans_nomornota`,
	`d`.`transline_description` AS `transline_description`,
	coalesce(`d`.`transline_qtyinput`, 0) AS `transline_qtyinput`,
	`u`.`masterother_description` AS `nmsatuan`,
	coalesce(`d`.`transline_priceinput`, 0) AS `transline_priceinput`,
	coalesce(`d`.`transline_discinput`, 0) AS `transline_discinput`,
	coalesce(`d`.`transline_net`, 0) AS `transline_net`,
	coalesce(`d`.`transline_netvalue`, 0) AS `transline_netvalue`,
	coalesce(`h`.`trans_exchangevalue`, 0) AS `trans_exchangevalue`,
	coalesce(`hp`.`translinehpp_hpp`, 0) AS `hpp`,
	coalesce(`hp`.`translinehpp_totalhpp`, 0) AS `totalhpp`,
(
		case
			when (`d`.`transline_vector` = 1) then `d`.`transline_qty`
			else 0
		end
	) AS `masuk`,
(
		case
			when (`d`.`transline_vector` = -(1)) then -(`d`.`transline_qty`)
			else 0
		end
	) AS `keluar`,
	`d`.`transline_qty` AS `nilai`
from (
		(
			(
				(
					(
						(
							`trans` `h`
							left join `masterpartner` `p` on(
								(`h`.`masterpartner_id` = `p`.`masterpartner_id`)
							)
						)
						left join `masterother` `e` on((`h`.`masterexchange_id` = `e`.`masterother_id`))
					)
					join (
						(
							(
								(
									(
										`transline` `d`
										left join `masteritemuom` `iu` on(
											(`d`.`masteritemuom_id` = `iu`.`masteritemuom_id`)
										)
									)
									left join `masterother` `u` on((`iu`.`masteruom_id` = `u`.`masterother_id`))
								)
								left join `transserialbatch` `sb` on((`d`.`transline_id` = `sb`.`transline_id`))
							)
							left join `translinehpp` `hp` on((`hp`.`transline_id` = `d`.`transline_id`))
						)
						left join `masterwarehouse` `w` on(
							(
								`d`.`masterwarehouse_id` = `w`.`masterwarehouse_id`
							)
						)
					)
				)
				join `masteritem` `i`
			)
			join `masteritemcategory` `c`
		)
		join `masteritemtype` `t`
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`d`.`masteritem_id` = `i`.`masteritem_id`)
		and (
			`i`.`masteritemcategory_id` = `c`.`masteritemcategory_id`
		)
		and (
			`c`.`masteritemtype_id` = `t`.`masteritemtype_id`
		)
		and (`t`.`masteritemtype_isstock` = 1)
		and (`h`.`trans_status` = 'P')
		and (`h`.`trans_type` in (4, 5, 12, 16, 17, 24, 27, 30))
		and (`d`.`transline_qtyinput` <> 0)
	)
order by `i`.`masteritem_id`,
	`h`.`trans_entrydate`;
-- Dumping structure for view gogabook.v_listhutangpiutang
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_listhutangpiutang`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_listhutangpiutang` AS
select uuid() AS `id`,
	`h`.`trans_id` AS `trans_id`,
	`h`.`masterpartner_id` AS `masterpartner_id`,
	`fd`.`financeline_id` AS `financeline_id`,
	`h`.`masterbussiness_id` AS `masterbussiness_id`,
	`fd`.`financeline_text` AS `financeline_text`,
	`p`.`masterpartner_alias` AS `masterpartner_alias`,
	cast(
		from_unixtime((`h`.`trans_entrydate` DIV 1000)) as date
	) AS `trans_entrydate`,
	`h`.`trans_description` AS `trans_description`,
	`fd`.`financeline_description` AS `financeline_description`,
	`h`.`trans_oleh` AS `trans_oleh`,
(
		case
			when (`fd`.`financeline_vector` = 1) then `fd`.`financeline_totalvalue`
			else 0
		end
	) AS `masuk`,
(
		case
			when (`fd`.`financeline_vector` = -(1)) then `fd`.`financeline_totalvalue`
			else 0
		end
	) AS `keluar`,
(
		`fd`.`financeline_totalvalue` * `fd`.`financeline_vector`
	) AS `nilai`,
	`c`.`masterpartnercategory_supplier` AS `masterpartnercategory_supplier`,
	`c`.`masterpartnercategory_customer` AS `masterpartnercategory_customer`
from (
		(
			(
				`trans` `h`
				left join `financeline` `fd` on((`h`.`trans_id` = `fd`.`trans_id`))
			)
			join `masterpartner` `p`
		)
		join `masterpartnercategory` `c`
	)
where (
		(`h`.`masterpartner_id` = `p`.`masterpartner_id`)
		and (
			`p`.`masterpartnercategory_id` = `c`.`masterpartnercategory_id`
		)
		and (`h`.`trans_status` = 'P')
		and (coalesce(`fd`.`financeline_totalvalue`, 0) <> 0)
	)
order by `h`.`masterbussiness_id`,
	`h`.`masterpartner_id`,
	`h`.`trans_entrydate`;
-- Dumping structure for view gogabook.v_listtrans
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_listtrans`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_listtrans` AS
select `h`.`masterbussiness_id` AS `masterbussiness_id`,
	`h`.`trans_id` AS `trans_id`,
	`h`.`transparent_id` AS `transparent_id`,
	`pc`.`masterpartnercategory_id` AS `masterpartnercategory_id`,
	`h`.`masterpartner_id` AS `masterpartner_id`,
	`h`.`mastercreditterm_id` AS `mastercreditterm_id`,
	`h`.`masterfixasset_id` AS `masterfixasset_id`,
	`h`.`trans_text` AS `trans_text`,
	`h`.`trans_type` AS `trans_type`,
	`h`.`trans_entrydate` AS `trans_entrydateutc`,
	date_format(
		from_unixtime((`h`.`trans_entrydate` DIV 1000)),
		'%d-%b-%Y'
	) AS `trans_entrydate`,
	`h`.`trans_description` AS `trans_description`,
	`h`.`trans_nomornota` AS `trans_nomornota`,
	`h`.`trans_exchangevalue` AS `trans_exchangevalue`,
	`h`.`trans_discgroup` AS `trans_discgroup`,
	`h`.`trans_syncstatus` AS `trans_syncstatus`,
	`h`.`trans_oleh` AS `trans_oleh`,
	`pc`.`masterpartnercategory_description` AS `masterpartnercategory_description`,
	`p`.`masterpartner_description` AS `masterpartner_description`,
	`p`.`masterpartner_alias` AS `masterpartner_alias`,
	`fh`.`finance_duedate` AS `finance_duedateutc`,
	date_format(
		from_unixtime((`fh`.`finance_duedate` DIV 1000)),
		'%d-%b-%Y'
	) AS `finance_duedate`,
	coalesce(
		`i`.`masteritem_description`,
		`a`.`masteraccount_description`
	) AS `kode`,
	coalesce(`i`.`masteritem_alias`, `a`.`masteraccount_alias`) AS `produk`,
	`akt`.`masterfixasset_description` AS `masterfixasset_description`,
	`akt`.`masterfixasset_serialno` AS `masterfixasset_serialno`,
	`akt`.`masterfixasset_tanggalperolehan` AS `masterfixasset_tanggalperolehanutc`,
	date_format(
		from_unixtime(
			(`akt`.`masterfixasset_tanggalperolehan` DIV 1000)
		),
		'%d-%b-%Y'
	) AS `masterfixasset_tanggalperolehan`,
	`akt`.`masterfixasset_perolehanvalue` AS `masterfixasset_perolehanvalue`,
	`d`.`transline_id` AS `transline_id`,
	`d`.`masteritem_id` AS `masteritem_id`,
	`d`.`mastertax_id` AS `mastertax_id`,
	`d`.`masteraccount_id` AS `masteraccount_id`,
	`d`.`transline_description` AS `transline_description`,
	`d`.`transline_alias` AS `transline_alias`,
	`d`.`transline_nourut` AS `transline_nourut`,
	`d`.`transline_taxrate` AS `transline_taxrate`,
	`d`.`transline_qtyinput` AS `transline_qtyinput`,
	`d`.`transline_qtyrealize` AS `transline_qtyrealize`,
	`d`.`transline_convertionqty` AS `transline_convertionqty`,
	`d`.`transline_vector` AS `transline_vector`,
	`d`.`transline_qty` AS `transline_qty`,
	`d`.`transline_priceinput` AS `transline_priceinput`,
	`d`.`transline_price` AS `transline_price`,
	`d`.`transline_discinput` AS `transline_discinput`,
	`d`.`transline_disc` AS `transline_disc`,
	`d`.`transline_netraw` AS `transline_netraw`,
	`d`.`transline_net` AS `transline_net`,
	`d`.`transline_netvalue` AS `transline_netvalue`,
	`d`.`transline_tax` AS `transline_tax`,
	`d`.`transline_taxvalue` AS `transline_taxvalue`,
	`d`.`transline_ishide` AS `transline_ishide`
from (
		(
			(
				(
					(
						(
							(
								(
									(
										`trans` `h`
										left join `masterpartner` `p` on(
											(`h`.`masterpartner_id` = `p`.`masterpartner_id`)
										)
									)
									left join `masterpartnercategory` `pc` on(
										(
											`p`.`masterpartnercategory_id` = `pc`.`masterpartnercategory_id`
										)
									)
								)
								left join `masterother` `e` on((`h`.`masterexchange_id` = `e`.`masterother_id`))
							)
							left join `trans` `hh` on((`h`.`transparent_id` = `hh`.`trans_id`))
						)
						left join `finance` `fh` on((`h`.`trans_id` = `fh`.`trans_id`))
					)
					left join `masterfixasset` `akt` on(
						(
							`h`.`masterfixasset_id` = `akt`.`masterfixasset_id`
						)
					)
				)
				left join `masterother` `ct` on(
					(
						`h`.`mastercreditterm_id` = `ct`.`masterother_id`
					)
				)
			)
			left join `masterother` `ex` on(
				(`h`.`masterexpedisi_id` = `ex`.`masterother_id`)
			)
		)
		join (
			(
				(
					(
						(
							(
								(
									`transline` `d`
									left join `masteritemuom` `iu` on(
										(`d`.`masteritemuom_id` = `iu`.`masteritemuom_id`)
									)
								)
								left join `masteritem` `i` on((`iu`.`masteritem_id` = `i`.`masteritem_id`))
							)
							left join `masterother` `u` on((`iu`.`masteruom_id` = `u`.`masterother_id`))
						)
						left join `masteritemcategory` `c` on(
							(
								`i`.`masteritemcategory_id` = `c`.`masteritemcategory_id`
							)
						)
					)
					left join `masterwarehouse` `w` on(
						(
							`d`.`masterwarehouse_id` = `w`.`masterwarehouse_id`
						)
					)
				)
				left join `masterother` `t` on((`d`.`mastertax_id` = `t`.`masterother_id`))
			)
			left join `masteraccount` `a` on(
				(`a`.`masteraccount_id` = `d`.`masteraccount_id`)
			)
		)
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`h`.`trans_status` = 'P')
	)
order by `h`.`masterbussiness_id`,
	`h`.`trans_entrydate`,
	`h`.`trans_id`,
	`d`.`transline_nourut`,
	`h`.`trans_waktu`;
-- Dumping structure for view gogabook.v_rekonsilestatus
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_rekonsilestatus`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_rekonsilestatus` AS
select uuid() AS `id`,
	`a`.`trans_id` AS `trans_id`,
(
		case
			when (coalesce(`a`.`rekonsilied`, 0) = 0) then 'not reconciled'
			when (
				coalesce(`b`.`jumlahtotal`, 0) <> coalesce(`a`.`rekonsilied`, 0)
			) then 'partial reconciled'
			when (
				coalesce(`b`.`jumlahtotal`, 0) = coalesce(`a`.`rekonsilied`, 0)
			) then 'reconciled'
		end
	) AS `status`
from (
		(
			(
				select `h`.`trans_id` AS `trans_id`,
					`d`.`transline_id` AS `transline_id`,
					count(0) AS `rekonsilied`
				from (
						(
							(
								`gogabook`.`gl` `h`
								join `gogabook`.`glline` `d`
							)
							join `gogabook`.`transbs` `bs`
						)
						join `gogabook`.`transline` `dd`
					)
				where (
						(`h`.`gl_id` = `d`.`gl_id`)
						and (`d`.`masteraccount_id` = `bs`.`masteraccount_id`)
						and (`d`.`transline_id` = `dd`.`transline_id`)
						and (`dd`.`transbsline_id` is not null)
					)
				group by `h`.`trans_id`
			)
		) `a`
		left join (
			select `h`.`trans_id` AS `trans_id`,
				`d`.`transline_id` AS `transline_id`,
				count(0) AS `jumlahtotal`
			from (
					(
						`gogabook`.`gl` `h`
						join `gogabook`.`glline` `d`
					)
					join `gogabook`.`transbs` `bs`
				)
			where (
					(`h`.`gl_id` = `d`.`gl_id`)
					and (`d`.`masteraccount_id` = `bs`.`masteraccount_id`)
				)
			group by `h`.`gl_id`
		) `b` on((`a`.`trans_id` = `b`.`trans_id`))
	);
-- Dumping structure for view gogabook.v_stockcard
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_stockcard`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_stockcard` AS
select uuid() AS `id`,
	`d`.`masteritem_id` AS `masteritem_id`,
	`d`.`masterwarehouse_id` AS `masterwarehouse_id`,
	`d`.`masterstore_id` AS `masterstore_id`,
	`h`.`masterbussiness_id` AS `masterbussiness_id`,
	coalesce(
		sum(
			(
				case
					when (
						`h`.`trans_type` in (3, 4, 5, 12, 15, 16, 17, 24, 27, 30, 33)
					) then `d`.`transline_qty`
					else 0
				end
			)
		),
		0
	) AS `qtyonhand`,
	coalesce(
		sum(
			(
				case
					when (
						(`h`.`trans_type` in (2, 3))
						and (`h`.`trans_isallocation` = 1)
					) then (
						(
							(
								coalesce(`d`.`transline_qtyinput`, 0) - coalesce(`d`.`transline_qtyrealize`, 0)
							) - coalesce(`d`.`transline_qtyadjust`, 0)
						) * (
							`d`.`transline_convertionqty` * `d`.`transline_vector`
						)
					)
					else 0
				end
			)
		),
		0
	) AS `onpurchase`,
	coalesce(
		sum(
			(
				case
					when (
						(`h`.`trans_type` in (26, 29))
						and (`h`.`trans_isallocation` = 1)
						and (`d`.`transline_vector` = -(1))
					) then (
						(
							(
								coalesce(`d`.`transline_qtyinput`, 0) - coalesce(`d`.`transline_qtyrealize`, 0)
							) - coalesce(`d`.`transline_qtyadjust`, 0)
						) * (
							`d`.`transline_convertionqty` * `d`.`transline_vector`
						)
					)
					else 0
				end
			)
		),
		0
	) AS `inassembly`,
	coalesce(
		sum(
			(
				case
					when (
						(`h`.`trans_type` in (26, 29))
						and (`h`.`trans_isallocation` = 1)
						and (`d`.`transline_vector` = 1)
					) then (
						(
							(
								coalesce(`d`.`transline_qtyinput`, 0) - coalesce(`d`.`transline_qtyrealize`, 0)
							) - coalesce(`d`.`transline_qtyadjust`, 0)
						) * (
							`d`.`transline_convertionqty` * `d`.`transline_vector`
						)
					)
					else 0
				end
			)
		),
		0
	) AS `onassembly`,
	coalesce(
		sum(
			(
				case
					when (
						(`h`.`trans_type` in (14, 15))
						and (`h`.`trans_isallocation` = 1)
					) then (
						(
							(
								coalesce(`d`.`transline_qtyinput`, 0) - coalesce(`d`.`transline_qtyrealize`, 0)
							) - coalesce(`d`.`transline_qtyadjust`, 0)
						) * (
							`d`.`transline_convertionqty` * -(`d`.`transline_vector`)
						)
					)
					else 0
				end
			)
		),
		0
	) AS `onorder`,
	coalesce(
		sum(
			(
				case
					when (
						(`h`.`trans_type` = 32)
						and (`h`.`trans_isallocation` = 1)
					) then (
						(
							(
								coalesce(`d`.`transline_qtyinput`, 0) - coalesce(`d`.`transline_qtyrealize`, 0)
							) - coalesce(`d`.`transline_qtyadjust`, 0)
						) * (
							`d`.`transline_convertionqty` * `d`.`transline_vector`
						)
					)
					else 0
				end
			)
		),
		0
	) AS `ontransfer`,
	coalesce(
		sum(
			(
				case
					when (
						(`h`.`trans_type` in (1, 13, 25, 28, 31))
						and (`h`.`trans_isallocation` = 1)
					) then (
						(
							(
								coalesce(`d`.`transline_qtyinput`, 0) - coalesce(`d`.`transline_qtyrealize`, 0)
							) - coalesce(`d`.`transline_qtyadjust`, 0)
						) * (
							`d`.`transline_convertionqty` * `d`.`transline_vector`
						)
					)
					else 0
				end
			)
		),
		0
	) AS `onquote`,
	coalesce(
		sum(
			(
				case
					when (
						(
							`h`.`trans_type` in (4, 5, 12, 14, 15, 16, 17, 24, 25, 26, 27, 29, 30, 32, 33)
						)
						and (`h`.`trans_isallocation` = 1)
					) then (
						(
							(
								coalesce(`d`.`transline_qtyinput`, 0) - coalesce(`d`.`transline_qtyrealize`, 0)
							) - coalesce(`d`.`transline_qtyadjust`, 0)
						) * (
							`d`.`transline_convertionqty` * `d`.`transline_vector`
						)
					)
					else 0
				end
			)
		),
		0
	) AS `qtyavail`
from (
		`trans` `h`
		join `transline` `d`
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`h`.`trans_status` <> 'C')
		and (`d`.`masteritem_id` is not null)
	)
group by `d`.`masteritem_id`,
	`d`.`masterwarehouse_id`,
	`d`.`masterstore_id`,
	`d`.`masterbussiness_id`
order by `h`.`masterbussiness_id`,
	`d`.`masteritem_id`,
	`d`.`masterwarehouse_id`,
	`d`.`masterstore_id`;
-- Dumping structure for view gogabook.v_totalcrud
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_totalcrud`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_totalcrud` AS
select uuid() AS `id`,
	`h`.`trans_id` AS `trans_id`,
	`h`.`masterbussiness_id` AS `masterbussiness_id`,
	`h`.`trans_text` AS `trans_text`,
	`h`.`trans_type` AS `trans_type`,
(
		coalesce(`dd`.`transline_priceinput`, 0) + coalesce(`um`.`uangmuka`, 0)
	) AS `uangmuka`,
	sum(`d`.`transline_netvalue`) AS `totaldpp`,
	sum(`d`.`transline_taxvalue`) AS `totalppn`,
(
		case
			when (`h`.`trans_type` = 6) then sum(
				(
					`d`.`transline_priceinput` * `d`.`transline_vector`
				)
			)
			when (`h`.`trans_type` = 18) then sum(
				(
					`d`.`transline_priceinput` * -(`d`.`transline_vector`)
				)
			)
			when (`h`.`trans_type` not in (6, 18)) then sum(
				(
					`d`.`transline_netvalue` + `d`.`transline_taxvalue`
				)
			)
		end
	) AS `totalnilai`,
(
		case
			when (`h`.`trans_type` in (4, 16, 11, 23)) then coalesce(`fh`.`finance_currentvalue`, 0)
			else (
				(
					sum(
						(
							coalesce(`d`.`transline_netvalue`, 0) + coalesce(`d`.`transline_taxvalue`, 0)
						)
					) - coalesce(`um`.`uangmuka`, 0)
				) - coalesce(`dd`.`transline_priceinput`, 0)
			)
		end
	) AS `finance_currentvalue`,
(
		case
			when (`h`.`trans_type` in (4, 16, 11, 23)) then (
				case
					when (`fh`.`finance_currentvalue` = 0) then 'Lunas'
					when (
						(
							`fh`.`finance_originalvalue` * `fh`.`finance_exchangevalue`
						) = `fh`.`finance_currentvalue`
					) then 'Belum Dibayar'
					when (
						(
							`fh`.`finance_originalvalue` * `fh`.`finance_exchangevalue`
						) <> `fh`.`finance_currentvalue`
					) then 'Dibayar Sebagian'
					when (`fh`.`finance_currentvalue` < 0) then 'Kelebihan Bayar'
				end
			)
			else (
				case
					when (
						(
							sum(
								(
									coalesce(`d`.`transline_netvalue`, 0) + coalesce(`d`.`transline_taxvalue`, 0)
								)
							) - coalesce(`um`.`uangmuka`, 0)
						) = 0
					) then 'Lunas'
					when (
						(
							sum(
								(
									coalesce(`d`.`transline_netvalue`, 0) + coalesce(`d`.`transline_taxvalue`, 0)
								)
							) - coalesce(`um`.`uangmuka`, 0)
						) <> sum(
							(
								coalesce(`d`.`transline_netvalue`, 0) + coalesce(`d`.`transline_taxvalue`, 0)
							)
						)
					) then 'Dibayar Sebagian'
					when (
						(
							sum(
								(
									coalesce(`d`.`transline_netvalue`, 0) + coalesce(`d`.`transline_taxvalue`, 0)
								)
							) - coalesce(`um`.`uangmuka`, 0)
						) = sum(
							(
								coalesce(`d`.`transline_netvalue`, 0) + coalesce(`d`.`transline_taxvalue`, 0)
							)
						)
					) then 'Belum Dibayar'
					when (
						(
							sum(
								(
									coalesce(`d`.`transline_netvalue`, 0) + coalesce(`d`.`transline_taxvalue`, 0)
								)
							) - coalesce(`um`.`uangmuka`, 0)
						) < 0
					) then 'Kelebihan Bayar'
				end
			)
		end
	) AS `statusbayar`,
(
		case
			when (`h`.`trans_status` = 'P') then 'FINISH'
			when (`h`.`trans_status` = 'O') then 'OPEN'
			when (`h`.`trans_status` = 'C') then 'VOID'
			when (`h`.`trans_status` = 'H') then 'PARTIAL'
			when (`h`.`trans_status` = 'OD') then 'OVER'
			when (`h`.`trans_status` = 'CT') then 'CLOSED TRANS'
		end
	) AS `statustrans`
from (
		(
			(
				(
					`gogabook`.`trans` `h`
					left join `gogabook`.`transline` `dd` on(
						(
							(`h`.`trans_id` = `dd`.`trans_id`)
							and (`dd`.`transline_ishide` = 1)
						)
					)
				)
				left join `gogabook`.`finance` `fh` on((`h`.`trans_id` = `fh`.`trans_id`))
			)
			left join (
				select `h`.`transparent_id` AS `transparent_id`,
					sum(`d`.`transline_netvalue`) AS `uangmuka`
				from (
						`gogabook`.`trans` `h`
						join `gogabook`.`transline` `d`
					)
				where (
						(`h`.`trans_id` = `d`.`trans_id`)
						and (`h`.`trans_status` <> 'C')
						and (`h`.`trans_type` in (2, 7, 14, 19))
						and (`d`.`transline_ishide` = 0)
					)
				group by `h`.`transparent_id`
			) `um` on((`h`.`trans_id` = `um`.`transparent_id`))
		)
		join `gogabook`.`transline` `d`
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`h`.`trans_status` <> 'C')
		and (`d`.`transline_ishide` = 0)
		and (
			`h`.`trans_type` in (
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				11,
				13,
				14,
				15,
				16,
				17,
				18,
				23,
				40,
				41,
				42,
				50,
				51
			)
		)
	)
group by `h`.`trans_id`
order by `h`.`trans_entrydate`,
	`h`.`trans_waktu`;
-- Dumping structure for view gogabook.v_totalhutangpiutang
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_totalhutangpiutang`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_totalhutangpiutang` AS
select uuid() AS `id`,
	`p`.`masterpartner_id` AS `masterpartner_id`,
	`h`.`masterbussiness_id` AS `masterbussiness_id`,
	`p`.`masterpartner_description` AS `masterpartner_description`,
	`p`.`masterpartner_alias` AS `masterpartner_alias`,
	coalesce(sum(`hf`.`finance_currentvalue`), 0) AS `sisahutangpiutang`,
	coalesce(count(0), 0) AS `jumlahtrans`,
	coalesce(`j`.`nilaijatem`, 0) AS `nilaijatem`,
	coalesce(`j`.`jatem`, 0) AS `jatem`
from (
		(
			`gogabook`.`trans` `h`
			join `gogabook`.`finance` `hf`
		)
		join (
			`gogabook`.`masterpartner` `p`
			left join (
				select `h`.`masterpartner_id` AS `masterpartner_id`,
					sum(`hf`.`finance_currentvalue`) AS `nilaijatem`,
					count(0) AS `jatem`
				from (
						`gogabook`.`trans` `h`
						join `gogabook`.`finance` `hf`
					)
				where (
						(`h`.`trans_id` = `hf`.`trans_id`)
						and (`h`.`trans_status` = 'P')
						and (`hf`.`finance_currentvalue` <> 0)
						and (
							cast(
								from_unixtime((`hf`.`finance_duedate` DIV 1000)) as date
							) <= now()
						)
					)
				group by `h`.`masterpartner_id`
			) `j` on(
				(`p`.`masterpartner_id` = `j`.`masterpartner_id`)
			)
		)
	)
where (
		(`h`.`trans_id` = `hf`.`trans_id`)
		and (`h`.`masterpartner_id` = `p`.`masterpartner_id`)
	)
group by `h`.`masterpartner_id`;
-- Dumping structure for view gogabook.v_totalstockcard
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_totalstockcard`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_totalstockcard` AS
select uuid() AS `id`,
	`d`.`masteritem_id` AS `masteritem_id`,
	coalesce(
		sum(
			(
				case
					when (`h`.`trans_type` in (4, 5, 12, 16, 17, 24, 27, 30, 33)) then `d`.`transline_qty`
					else 0
				end
			)
		),
		0
	) AS `qtyonhand`
from (
		`trans` `h`
		join `transline` `d`
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`h`.`trans_status` <> 'C')
		and (`d`.`masteritem_id` is not null)
	)
group by `d`.`masteritem_id`
order by `d`.`masteritem_id`;
-- Dumping structure for view gogabook.v_trans
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_trans`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_trans` AS
select `h`.`trans_id` AS `trans_id`,
	`h`.`trans_text` AS `trans_text`,
	`h`.`trans_type` AS `trans_type`,
	cast(
		from_unixtime((`h`.`trans_entrydate` DIV 1000)) as date
	) AS `trans_entrydate`,
	`h`.`trans_description` AS `trans_description`,
	`p`.`masterpartner_id` AS `masterpartner_id`,
	`h`.`trans_status` AS `trans_status`,
	`i`.`masteritem_description` AS `masteritem_description`,
	`i`.`masteritem_alias` AS `masteritem_alias`,
	`a`.`masteraccount_description` AS `masteraccount_description`,
	`a`.`masteraccount_alias` AS `masteraccount_alias`,
	`d`.`transline_qtyinput` AS `transline_qtyinput`,
	`d`.`transline_convertionqty` AS `transline_convertionqty`,
	`d`.`transline_vector` AS `transline_vector`,
	`d`.`transline_qty` AS `transline_qty`,
	`d`.`transline_priceinput` AS `transline_priceinput`,
	`d`.`transline_discinput` AS `transline_discinput`,
	`d`.`transline_netvalue` AS `transline_netvalue`,
	`d`.`transline_taxvalue` AS `transline_taxvalue`,
	`u`.`masterother_description` AS `nmsatuan`,
	`w`.`masterwarehouse_description` AS `masterwarehouse_description`,
	`s`.`masterother_description` AS `nmstore`,
	`dh`.`translinehpp_hpp` AS `translinehpp_hpp`,
	`dh`.`translinehpp_totalhpp` AS `translinehpp_totalhpp`
from (
		(
			`trans` `h`
			left join `masterpartner` `p` on(
				(`h`.`masterpartner_id` = `p`.`masterpartner_id`)
			)
		)
		join (
			(
				(
					(
						(
							(
								(
									`transline` `d`
									left join `masteritem` `i` on((`d`.`masteritem_id` = `i`.`masteritem_id`))
								)
								left join `masteraccount` `a` on(
									(`d`.`masteraccount_id` = `a`.`masteraccount_id`)
								)
							)
							left join `masteritemuom` `iu` on(
								(`d`.`masteritemuom_id` = `iu`.`masteritemuom_id`)
							)
						)
						left join `masterother` `u` on((`iu`.`masteruom_id` = `u`.`masterother_id`))
					)
					left join `masterwarehouse` `w` on(
						(
							`d`.`masterwarehouse_id` = `w`.`masterwarehouse_id`
						)
					)
				)
				left join `masterother` `s` on((`d`.`masterstore_id` = `s`.`masterother_id`))
			)
			left join `translinehpp` `dh` on((`d`.`transline_id` = `dh`.`transline_id`))
		)
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`h`.`trans_type` in (3, 4, 5, 12, 15, 16, 17, 24, 27, 30))
		and (
			`h`.`masterbussiness_id` = '44fd4330-8a62-11ed-b0c2-e59127f33fab'
		)
	)
order by `h`.`trans_waktu`;
-- Dumping structure for view gogabook.v_transretur
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_transretur`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_transretur` AS
select uuid() AS `id`,
	`d`.`transline_id` AS `transline_id`,
	coalesce(sum(`d`.`transline_qtyinput`), 0) AS `terinput`,
	coalesce(`r`.`telahretur`, 0) AS `telahretur`,
(
		coalesce(sum(`d`.`transline_qtyinput`), 0) - coalesce(`r`.`telahretur`, 0)
	) AS `sisaretur`
from (
		`gogabook`.`trans` `h`
		join (
			`gogabook`.`transline` `d`
			left join (
				select `d`.`translineparent_id` AS `translineparent_id`,
					sum(`d`.`transline_qtyinput`) AS `telahretur`
				from (
						`gogabook`.`trans` `h`
						join `gogabook`.`transline` `d`
					)
				where (
						(`h`.`trans_id` = `d`.`trans_id`)
						and (`h`.`trans_status` = 'P')
						and (`h`.`trans_type` = 5)
					)
				group by `d`.`translineparent_id`
			) `r` on((`d`.`transline_id` = `r`.`translineparent_id`))
		)
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`h`.`trans_status` = 'P')
		and (`h`.`trans_type` = 4)
	)
group by `d`.`transline_id`
union
select uuid() AS `id`,
	`d`.`transline_id` AS `transline_id`,
	coalesce(sum(`d`.`transline_qtyinput`), 0) AS `terinput`,
	coalesce(`r`.`telahretur`, 0) AS `telahretur`,
(
		coalesce(sum(`d`.`transline_qtyinput`), 0) - coalesce(`r`.`telahretur`, 0)
	) AS `sisaretur`
from (
		`gogabook`.`trans` `h`
		join (
			`gogabook`.`transline` `d`
			left join (
				select `d`.`translineparent_id` AS `translineparent_id`,
					sum(`d`.`transline_qtyinput`) AS `telahretur`
				from (
						`gogabook`.`trans` `h`
						join `gogabook`.`transline` `d`
					)
				where (
						(`h`.`trans_id` = `d`.`trans_id`)
						and (`h`.`trans_status` = 'P')
						and (`h`.`trans_type` = 17)
					)
				group by `d`.`translineparent_id`
			) `r` on((`d`.`transline_id` = `r`.`translineparent_id`))
		)
	)
where (
		(`h`.`trans_id` = `d`.`trans_id`)
		and (`h`.`trans_status` = 'P')
		and (`h`.`trans_type` = 16)
	)
group by `d`.`transline_id`;
-- Dumping structure for view gogabook.v_uniontable
-- Removing temporary table and create final VIEW structure
DROP TABLE IF EXISTS `v_uniontable`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY DEFINER VIEW `v_uniontable` AS
select `masteritem`.`masteritem_id` AS `id`,
	`masteritem`.`masteritem_description` AS `masterentity_description`,
	`masteritem`.`masteritem_alias` AS `masterentity_alias`,
	`masteritem`.`masterbussiness_id` AS `masterentity_bussiness`,
	'masteritem' AS `masterentity_tablename`
from `masteritem`
union
select `masteritemcategory`.`masteritemcategory_id` AS `masteritemcategory_id`,
	`masteritemcategory`.`masteritemcategory_description` AS `masteritemcategory_description`,
	`masteritemcategory`.`masteritemcategory_description` AS `masteritemcategory_alias`,
	`masteritemcategory`.`masterbussiness_id` AS `masterbussiness_id`,
	'masteritemcategory' AS `masteritemcategory`
from `masteritemcategory`
union
select `masterother`.`masterother_id` AS `masterother_id`,
	`masterother`.`masterother_description` AS `masterother_description`,
	`masterother`.`masterother_alias` AS `masterother_alias`,
	`masterother`.`masterbussiness_id` AS `masterbussiness_id`,
	'masterother' AS `masterother`
from `masterother`
union
select `masteraccount`.`masteraccount_id` AS `masteraccount_id`,
	`masteraccount`.`masteraccount_description` AS `masteraccount_description`,
	`masteraccount`.`masteraccount_alias` AS `masteraccount_alias`,
	`masteraccount`.`masterbussiness_id` AS `masterbussiness_id`,
	'masteraccount' AS `masteraccount`
from `masteraccount`
union
select `masterwarehouse`.`masterwarehouse_id` AS `masterwarehouse_id`,
	`masterwarehouse`.`masterwarehouse_description` AS `masterwarehouse_description`,
	`masterwarehouse`.`masterwarehouse_description` AS `masterwarehouse_description`,
	`masterwarehouse`.`masterbussiness_id` AS `masterbussiness_id`,
	'masterwarehouse' AS `masterwarehouse`
from `masterwarehouse`
union
select `masterpartner`.`masterpartner_id` AS `masterpartner_id`,
	`masterpartner`.`masterpartner_description` AS `masterpartner_description`,
	`masterpartner`.`masterpartner_alias` AS `masterpartner_alias`,
	`masterpartner`.`masterbussiness_id` AS `masterbussiness_id`,
	'masterpartner' AS `masterpartner`
from `masterpartner`;
/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, 'system') */
;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */
;
/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */
;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */
;
/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */
;